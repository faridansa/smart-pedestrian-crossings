
Praktikum_5_Template_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00802000  00004168  000041fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003c1  00802050  00802050  0000424c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000424c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000042a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000760  00000000  00000000  000042f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016451  00000000  00000000  00004a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006238  00000000  00000000  0001aea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c196  00000000  00000000  000210d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001820  00000000  00000000  0002d270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00038ec9  00000000  00000000  0002ea90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000adbe  00000000  00000000  00067959  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000958  00000000  00000000  00072718  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c8b  00000000  00000000  00073070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c2       	rjmp	.+1184   	; 0x4a2 <__ctors_end>
       2:	00 00       	nop
       4:	6f c2       	rjmp	.+1246   	; 0x4e4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c2       	rjmp	.+1242   	; 0x4e4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c2       	rjmp	.+1238   	; 0x4e4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c2       	rjmp	.+1234   	; 0x4e4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c2       	rjmp	.+1230   	; 0x4e4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c2       	rjmp	.+1226   	; 0x4e4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c2       	rjmp	.+1222   	; 0x4e4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c2       	rjmp	.+1218   	; 0x4e4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c2       	rjmp	.+1214   	; 0x4e4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c2       	rjmp	.+1210   	; 0x4e4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_11>
      30:	59 c2       	rjmp	.+1202   	; 0x4e4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c2       	rjmp	.+1198   	; 0x4e4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_14>
      3c:	53 c2       	rjmp	.+1190   	; 0x4e4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c2       	rjmp	.+1186   	; 0x4e4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c2       	rjmp	.+1182   	; 0x4e4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c2       	rjmp	.+1178   	; 0x4e4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4b c2       	rjmp	.+1174   	; 0x4e4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c2       	rjmp	.+1170   	; 0x4e4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c2       	rjmp	.+1166   	; 0x4e4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c2       	rjmp	.+1162   	; 0x4e4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c2       	rjmp	.+1158   	; 0x4e4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c2       	rjmp	.+1154   	; 0x4e4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c2       	rjmp	.+1150   	; 0x4e4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c2       	rjmp	.+1146   	; 0x4e4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c2       	rjmp	.+1142   	; 0x4e4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c2       	rjmp	.+1138   	; 0x4e4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c2       	rjmp	.+1134   	; 0x4e4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c2       	rjmp	.+1130   	; 0x4e4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c2       	rjmp	.+1126   	; 0x4e4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c2       	rjmp	.+1122   	; 0x4e4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c2       	rjmp	.+1118   	; 0x4e4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c2       	rjmp	.+1114   	; 0x4e4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b c2       	rjmp	.+1110   	; 0x4e4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	29 c2       	rjmp	.+1106   	; 0x4e4 <__bad_interrupt>
      92:	00 00       	nop
      94:	27 c2       	rjmp	.+1102   	; 0x4e4 <__bad_interrupt>
      96:	00 00       	nop
      98:	25 c2       	rjmp	.+1098   	; 0x4e4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e9 c7       	rjmp	.+4050   	; 0x1070 <__vector_39>
      9e:	00 00       	nop
      a0:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_40>
      a4:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_41>
      a8:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_42>
      ac:	1b c2       	rjmp	.+1078   	; 0x4e4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	19 c2       	rjmp	.+1074   	; 0x4e4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	17 c2       	rjmp	.+1070   	; 0x4e4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	15 c2       	rjmp	.+1066   	; 0x4e4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	13 c2       	rjmp	.+1062   	; 0x4e4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	11 c2       	rjmp	.+1058   	; 0x4e4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0f c2       	rjmp	.+1054   	; 0x4e4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0d c2       	rjmp	.+1050   	; 0x4e4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0b c2       	rjmp	.+1046   	; 0x4e4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	09 c2       	rjmp	.+1042   	; 0x4e4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	07 c2       	rjmp	.+1038   	; 0x4e4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c2       	rjmp	.+1034   	; 0x4e4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	03 c2       	rjmp	.+1030   	; 0x4e4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	01 c2       	rjmp	.+1026   	; 0x4e4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ff c1       	rjmp	.+1022   	; 0x4e4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fd c1       	rjmp	.+1018   	; 0x4e4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fb c1       	rjmp	.+1014   	; 0x4e4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f9 c1       	rjmp	.+1010   	; 0x4e4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f7 c1       	rjmp	.+1006   	; 0x4e4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f5 c1       	rjmp	.+1002   	; 0x4e4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f3 c1       	rjmp	.+998    	; 0x4e4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f1 c1       	rjmp	.+994    	; 0x4e4 <__bad_interrupt>
     102:	00 00       	nop
     104:	ef c1       	rjmp	.+990    	; 0x4e4 <__bad_interrupt>
     106:	00 00       	nop
     108:	ed c1       	rjmp	.+986    	; 0x4e4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	eb c1       	rjmp	.+982    	; 0x4e4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e9 c1       	rjmp	.+978    	; 0x4e4 <__bad_interrupt>
     112:	00 00       	nop
     114:	e7 c1       	rjmp	.+974    	; 0x4e4 <__bad_interrupt>
     116:	00 00       	nop
     118:	e5 c1       	rjmp	.+970    	; 0x4e4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e1 c6       	rjmp	.+3522   	; 0xee0 <__vector_71>
     11e:	00 00       	nop
     120:	11 c7       	rjmp	.+3618   	; 0xf44 <__vector_72>
     122:	00 00       	nop
     124:	41 c7       	rjmp	.+3714   	; 0xfa8 <__vector_73>
     126:	00 00       	nop
     128:	71 c7       	rjmp	.+3810   	; 0x100c <__vector_74>
     12a:	00 00       	nop
     12c:	db c1       	rjmp	.+950    	; 0x4e4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d9 c1       	rjmp	.+946    	; 0x4e4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d7 c1       	rjmp	.+942    	; 0x4e4 <__bad_interrupt>
     136:	00 00       	nop
     138:	d5 c1       	rjmp	.+938    	; 0x4e4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d3 c1       	rjmp	.+934    	; 0x4e4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d1 c1       	rjmp	.+930    	; 0x4e4 <__bad_interrupt>
     142:	00 00       	nop
     144:	cf c1       	rjmp	.+926    	; 0x4e4 <__bad_interrupt>
     146:	00 00       	nop
     148:	cd c1       	rjmp	.+922    	; 0x4e4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	cb c1       	rjmp	.+918    	; 0x4e4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c9 c1       	rjmp	.+914    	; 0x4e4 <__bad_interrupt>
     152:	00 00       	nop
     154:	c7 c1       	rjmp	.+910    	; 0x4e4 <__bad_interrupt>
     156:	00 00       	nop
     158:	c5 c1       	rjmp	.+906    	; 0x4e4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c3 c1       	rjmp	.+902    	; 0x4e4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c1 c1       	rjmp	.+898    	; 0x4e4 <__bad_interrupt>
     162:	00 00       	nop
     164:	bf c1       	rjmp	.+894    	; 0x4e4 <__bad_interrupt>
     166:	00 00       	nop
     168:	bd c1       	rjmp	.+890    	; 0x4e4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	bb c1       	rjmp	.+886    	; 0x4e4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b9 c1       	rjmp	.+882    	; 0x4e4 <__bad_interrupt>
     172:	00 00       	nop
     174:	b7 c1       	rjmp	.+878    	; 0x4e4 <__bad_interrupt>
     176:	00 00       	nop
     178:	b5 c1       	rjmp	.+874    	; 0x4e4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b3 c1       	rjmp	.+870    	; 0x4e4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b1 c1       	rjmp	.+866    	; 0x4e4 <__bad_interrupt>
     182:	00 00       	nop
     184:	af c1       	rjmp	.+862    	; 0x4e4 <__bad_interrupt>
     186:	00 00       	nop
     188:	ad c1       	rjmp	.+858    	; 0x4e4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	ab c1       	rjmp	.+854    	; 0x4e4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a9 c1       	rjmp	.+850    	; 0x4e4 <__bad_interrupt>
     192:	00 00       	nop
     194:	a7 c1       	rjmp	.+846    	; 0x4e4 <__bad_interrupt>
     196:	00 00       	nop
     198:	a5 c1       	rjmp	.+842    	; 0x4e4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a3 c1       	rjmp	.+838    	; 0x4e4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a1 c1       	rjmp	.+834    	; 0x4e4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9f c1       	rjmp	.+830    	; 0x4e4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9d c1       	rjmp	.+826    	; 0x4e4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9b c1       	rjmp	.+822    	; 0x4e4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	99 c1       	rjmp	.+818    	; 0x4e4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	97 c1       	rjmp	.+814    	; 0x4e4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	95 c1       	rjmp	.+810    	; 0x4e4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	93 c1       	rjmp	.+806    	; 0x4e4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	91 c1       	rjmp	.+802    	; 0x4e4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8f c1       	rjmp	.+798    	; 0x4e4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8d c1       	rjmp	.+794    	; 0x4e4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8b c1       	rjmp	.+790    	; 0x4e4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	89 c1       	rjmp	.+786    	; 0x4e4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	87 c1       	rjmp	.+782    	; 0x4e4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	85 c1       	rjmp	.+778    	; 0x4e4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	83 c1       	rjmp	.+774    	; 0x4e4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	81 c1       	rjmp	.+770    	; 0x4e4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7f c1       	rjmp	.+766    	; 0x4e4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7d c1       	rjmp	.+762    	; 0x4e4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7b c1       	rjmp	.+758    	; 0x4e4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	79 c1       	rjmp	.+754    	; 0x4e4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	77 c1       	rjmp	.+750    	; 0x4e4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	75 c1       	rjmp	.+746    	; 0x4e4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ec 18       	sub	r14, r12
     1fe:	ec 18       	sub	r14, r12
     200:	ec 18       	sub	r14, r12
     202:	22 19       	sub	r18, r2
     204:	12 19       	sub	r17, r2
     206:	1f 19       	sub	r17, r15
     208:	ec 18       	sub	r14, r12
     20a:	ec 18       	sub	r14, r12
     20c:	22 19       	sub	r18, r2
     20e:	12 19       	sub	r17, r2

00000210 <__trampolines_end>:
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 00       	nop
     216:	00 20       	and	r0, r0
     218:	20 20       	and	r2, r0
     21a:	20 20       	and	r2, r0
     21c:	00 20       	and	r0, r0
     21e:	50 50       	subi	r21, 0x00	; 0
     220:	50 00       	.word	0x0050	; ????
     222:	00 00       	nop
     224:	00 50       	subi	r16, 0x00	; 0
     226:	50 f8       	bld	r5, 0
     228:	50 f8       	bld	r5, 0
     22a:	50 50       	subi	r21, 0x00	; 0
     22c:	20 78       	andi	r18, 0x80	; 128
     22e:	a0 70       	andi	r26, 0x00	; 0
     230:	28 f0       	brcs	.+10     	; 0x23c <__trampolines_end+0x2c>
     232:	20 c0       	rjmp	.+64     	; 0x274 <__trampolines_end+0x64>
     234:	c8 10       	cpse	r12, r8
     236:	20 40       	sbci	r18, 0x00	; 0
     238:	98 18       	sub	r9, r8
     23a:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1c8f>
     23e:	a8 90       	.word	0x90a8	; ????
     240:	68 60       	ori	r22, 0x08	; 8
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	00 00       	nop
     246:	00 00       	nop
     248:	10 20       	and	r1, r0
     24a:	40 40       	sbci	r20, 0x00	; 0
     24c:	40 20       	and	r4, r0
     24e:	10 40       	sbci	r17, 0x00	; 0
     250:	20 10       	cpse	r2, r0
     252:	10 10       	cpse	r1, r0
     254:	20 40       	sbci	r18, 0x00	; 0
     256:	00 50       	subi	r16, 0x00	; 0
     258:	20 f8       	bld	r2, 0
     25a:	20 50       	subi	r18, 0x00	; 0
     25c:	00 00       	nop
     25e:	20 20       	and	r2, r0
     260:	f8 20       	and	r15, r8
     262:	20 00       	.word	0x0020	; ????
     264:	00 00       	nop
     266:	00 00       	nop
     268:	60 20       	and	r6, r0
     26a:	40 00       	.word	0x0040	; ????
     26c:	00 00       	nop
     26e:	f8 00       	.word	0x00f8	; ????
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 60       	ori	r16, 0x00	; 0
     278:	60 00       	.word	0x0060	; ????
     27a:	08 10       	cpse	r0, r8
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 00       	.word	0x0080	; ????
     280:	70 88       	ldd	r7, Z+16	; 0x10
     282:	98 a8       	ldd	r9, Y+48	; 0x30
     284:	c8 88       	ldd	r12, Y+16	; 0x10
     286:	70 20       	and	r7, r0
     288:	60 20       	and	r6, r0
     28a:	20 20       	and	r2, r0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	70 88       	ldd	r7, Z+16	; 0x10
     290:	08 10       	cpse	r0, r8
     292:	20 40       	sbci	r18, 0x00	; 0
     294:	f8 f8       	.word	0xf8f8	; ????
     296:	10 20       	and	r1, r0
     298:	10 08       	sbc	r1, r0
     29a:	88 70       	andi	r24, 0x08	; 8
     29c:	10 30       	cpi	r17, 0x00	; 0
     29e:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     2a2:	10 f8       	bld	r1, 0
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <__trampolines_end+0xb6>
     2a6:	08 08       	sbc	r0, r8
     2a8:	88 70       	andi	r24, 0x08	; 8
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	80 f0       	brcs	.+32     	; 0x2ce <__trampolines_end+0xbe>
     2ae:	88 88       	ldd	r8, Y+16	; 0x10
     2b0:	70 f8       	bld	r7, 0
     2b2:	08 10       	cpse	r0, r8
     2b4:	20 40       	sbci	r18, 0x00	; 0
     2b6:	40 40       	sbci	r20, 0x00	; 0
     2b8:	70 88       	ldd	r7, Z+16	; 0x10
     2ba:	88 70       	andi	r24, 0x08	; 8
     2bc:	88 88       	ldd	r8, Y+16	; 0x10
     2be:	70 70       	andi	r23, 0x00	; 0
     2c0:	88 88       	ldd	r8, Y+16	; 0x10
     2c2:	78 08       	sbc	r7, r8
     2c4:	10 60       	ori	r17, 0x00	; 0
     2c6:	00 60       	ori	r16, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	60 60       	ori	r22, 0x00	; 0
     2cc:	00 00       	nop
     2ce:	60 60       	ori	r22, 0x00	; 0
     2d0:	00 60       	ori	r16, 0x00	; 0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	08 10       	cpse	r0, r8
     2d6:	20 40       	sbci	r18, 0x00	; 0
     2d8:	20 10       	cpse	r2, r0
     2da:	08 00       	.word	0x0008	; ????
     2dc:	00 f8       	bld	r0, 0
     2de:	00 f8       	bld	r0, 0
     2e0:	00 00       	nop
     2e2:	80 40       	sbci	r24, 0x00	; 0
     2e4:	20 10       	cpse	r2, r0
     2e6:	20 40       	sbci	r18, 0x00	; 0
     2e8:	80 70       	andi	r24, 0x00	; 0
     2ea:	88 08       	sbc	r8, r8
     2ec:	10 20       	and	r1, r0
     2ee:	00 20       	and	r0, r0
     2f0:	70 88       	ldd	r7, Z+16	; 0x10
     2f2:	08 68       	ori	r16, 0x88	; 136
     2f4:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f6:	70 70       	andi	r23, 0x00	; 0
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	88 f8       	.word	0xf888	; ????
     2fc:	88 88       	ldd	r8, Y+16	; 0x10
     2fe:	f0 88       	ldd	r15, Z+16	; 0x10
     300:	88 f0       	brcs	.+34     	; 0x324 <__trampolines_end+0x114>
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	f0 70       	andi	r31, 0x00	; 0
     306:	88 80       	ld	r8, Y
     308:	80 80       	ld	r8, Z
     30a:	88 70       	andi	r24, 0x08	; 8
     30c:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6477>
     310:	88 90       	.word	0x9088	; ????
     312:	e0 f8       	bld	r14, 0
     314:	80 80       	ld	r8, Z
     316:	f0 80       	ld	r15, Z
     318:	80 f8       	bld	r8, 0
     31a:	f8 80       	ld	r15, Y
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	80 80       	ld	r8, Z
     320:	80 70       	andi	r24, 0x00	; 0
     322:	88 80       	ld	r8, Y
     324:	80 98       	cbi	0x10, 0	; 16
     326:	88 70       	andi	r24, 0x08	; 8
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 f8       	.word	0xf888	; ????
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	88 70       	andi	r24, 0x08	; 8
     330:	20 20       	and	r2, r0
     332:	20 20       	and	r2, r0
     334:	20 70       	andi	r18, 0x00	; 0
     336:	38 10       	cpse	r3, r8
     338:	10 10       	cpse	r1, r0
     33a:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x644f>
     33e:	90 a0       	ldd	r9, Z+32	; 0x20
     340:	c0 a0       	ldd	r12, Z+32	; 0x20
     342:	90 88       	ldd	r9, Z+16	; 0x10
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	80 80       	ld	r8, Z
     34a:	f8 88       	ldd	r15, Y+16	; 0x10
     34c:	d8 a8       	ldd	r13, Y+48	; 0x30
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	88 88       	ldd	r8, Y+16	; 0x10
     354:	c8 a8       	ldd	r12, Y+48	; 0x30
     356:	98 88       	ldd	r9, Y+16	; 0x10
     358:	88 70       	andi	r24, 0x08	; 8
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 88       	ldd	r8, Y+16	; 0x10
     35e:	88 70       	andi	r24, 0x08	; 8
     360:	f0 88       	ldd	r15, Z+16	; 0x10
     362:	88 f0       	brcs	.+34     	; 0x386 <__trampolines_end+0x176>
     364:	80 80       	ld	r8, Z
     366:	80 70       	andi	r24, 0x00	; 0
     368:	88 88       	ldd	r8, Y+16	; 0x10
     36a:	88 a8       	ldd	r8, Y+48	; 0x30
     36c:	90 68       	ori	r25, 0x80	; 128
     36e:	f0 88       	ldd	r15, Z+16	; 0x10
     370:	88 f0       	brcs	.+34     	; 0x394 <__trampolines_end+0x184>
     372:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5477>
     376:	80 80       	ld	r8, Z
     378:	70 08       	sbc	r7, r0
     37a:	08 f0       	brcs	.+2      	; 0x37e <__trampolines_end+0x16e>
     37c:	f8 20       	and	r15, r8
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 88       	ldd	r2, Z+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 88       	ldd	r8, Y+16	; 0x10
     388:	88 70       	andi	r24, 0x08	; 8
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 88       	ldd	r8, Y+16	; 0x10
     38e:	88 50       	subi	r24, 0x08	; 8
     390:	20 88       	ldd	r2, Z+16	; 0x10
     392:	88 88       	ldd	r8, Y+16	; 0x10
     394:	a8 a8       	ldd	r10, Y+48	; 0x30
     396:	d8 88       	ldd	r13, Y+16	; 0x10
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	50 20       	and	r5, r0
     39c:	50 88       	ldd	r5, Z+16	; 0x10
     39e:	88 88       	ldd	r8, Y+16	; 0x10
     3a0:	88 50       	subi	r24, 0x08	; 8
     3a2:	20 20       	and	r2, r0
     3a4:	20 20       	and	r2, r0
     3a6:	f8 08       	sbc	r15, r8
     3a8:	10 20       	and	r1, r0
     3aa:	40 80       	ld	r4, Z
     3ac:	f8 38       	cpi	r31, 0x88	; 136
     3ae:	20 20       	and	r2, r0
     3b0:	20 20       	and	r2, r0
     3b2:	20 38       	cpi	r18, 0x80	; 128
     3b4:	00 80       	ld	r0, Z
     3b6:	40 20       	and	r4, r0
     3b8:	10 08       	sbc	r1, r0
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	20 20       	and	r2, r0
     3be:	20 20       	and	r2, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	20 50       	subi	r18, 0x00	; 0
     3c4:	88 00       	.word	0x0088	; ????
	...
     3ce:	00 f8       	bld	r0, 0
     3d0:	40 20       	and	r4, r0
     3d2:	10 00       	.word	0x0010	; ????
     3d4:	00 00       	nop
     3d6:	00 00       	nop
     3d8:	00 70       	andi	r16, 0x00	; 0
     3da:	08 78       	andi	r16, 0x88	; 136
     3dc:	88 78       	andi	r24, 0x88	; 136
     3de:	80 80       	ld	r8, Z
     3e0:	b0 c8       	rjmp	.-3744   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	f0 00       	.word	0x00f0	; ????
     3e6:	00 70       	andi	r16, 0x00	; 0
     3e8:	80 80       	ld	r8, Z
     3ea:	88 70       	andi	r24, 0x08	; 8
     3ec:	08 08       	sbc	r0, r8
     3ee:	68 98       	cbi	0x0d, 0	; 13
     3f0:	88 88       	ldd	r8, Y+16	; 0x10
     3f2:	78 00       	.word	0x0078	; ????
     3f4:	00 70       	andi	r16, 0x00	; 0
     3f6:	88 f8       	.word	0xf888	; ????
     3f8:	80 70       	andi	r24, 0x00	; 0
     3fa:	30 48       	sbci	r19, 0x80	; 128
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	40 00       	.word	0x0040	; ????
     402:	00 78       	andi	r16, 0x80	; 128
     404:	88 78       	andi	r24, 0x88	; 136
     406:	08 30       	cpi	r16, 0x08	; 8
     408:	80 80       	ld	r8, Z
     40a:	b0 c8       	rjmp	.-3744   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
     40c:	88 88       	ldd	r8, Y+16	; 0x10
     40e:	88 20       	and	r8, r8
     410:	00 60       	ori	r16, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 70       	andi	r18, 0x00	; 0
     416:	10 00       	.word	0x0010	; ????
     418:	30 10       	cpse	r3, r0
     41a:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1c4f>
     41e:	40 48       	sbci	r20, 0x80	; 128
     420:	50 60       	ori	r21, 0x00	; 0
     422:	50 48       	sbci	r21, 0x80	; 128
     424:	60 20       	and	r6, r0
     426:	20 20       	and	r2, r0
     428:	20 20       	and	r2, r0
     42a:	70 00       	.word	0x0070	; ????
     42c:	00 d0       	rcall	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	a8 a8       	ldd	r10, Y+48	; 0x30
     430:	88 88       	ldd	r8, Y+16	; 0x10
     432:	00 00       	nop
     434:	b0 c8       	rjmp	.-3744   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     436:	88 88       	ldd	r8, Y+16	; 0x10
     438:	88 00       	.word	0x0088	; ????
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	88 88       	ldd	r8, Y+16	; 0x10
     43e:	88 70       	andi	r24, 0x08	; 8
     440:	00 00       	nop
     442:	f0 88       	ldd	r15, Z+16	; 0x10
     444:	f0 80       	ld	r15, Z
     446:	80 00       	.word	0x0080	; ????
     448:	00 68       	ori	r16, 0x80	; 128
     44a:	98 78       	andi	r25, 0x88	; 136
     44c:	08 08       	sbc	r0, r8
     44e:	00 00       	nop
     450:	b0 c8       	rjmp	.-3744   	; 0xfffff5b2 <__eeprom_end+0xff7ef5b2>
     452:	80 80       	ld	r8, Z
     454:	80 00       	.word	0x0080	; ????
     456:	00 70       	andi	r16, 0x00	; 0
     458:	80 70       	andi	r24, 0x00	; 0
     45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e0 40       	sbci	r30, 0x00	; 0
     460:	40 48       	sbci	r20, 0x80	; 128
     462:	30 00       	.word	0x0030	; ????
     464:	00 88       	ldd	r0, Z+16	; 0x10
     466:	88 88       	ldd	r8, Y+16	; 0x10
     468:	98 68       	ori	r25, 0x88	; 136
     46a:	00 00       	nop
     46c:	88 88       	ldd	r8, Y+16	; 0x10
     46e:	88 50       	subi	r24, 0x08	; 8
     470:	20 00       	.word	0x0020	; ????
     472:	00 88       	ldd	r0, Z+16	; 0x10
     474:	88 a8       	ldd	r8, Y+48	; 0x30
     476:	a8 50       	subi	r26, 0x08	; 8
     478:	00 00       	nop
     47a:	88 50       	subi	r24, 0x08	; 8
     47c:	20 50       	subi	r18, 0x00	; 0
     47e:	88 00       	.word	0x0088	; ????
     480:	00 88       	ldd	r0, Z+16	; 0x10
     482:	88 78       	andi	r24, 0x88	; 136
     484:	08 70       	andi	r16, 0x08	; 8
     486:	00 00       	nop
     488:	f8 10       	cpse	r15, r8
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	f8 10       	cpse	r15, r8
     48e:	20 20       	and	r2, r0
     490:	40 20       	and	r4, r0
     492:	20 10       	cpse	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 20       	and	r2, r0
     49a:	20 40       	sbci	r18, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	10 20       	and	r1, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0

000004a2 <__ctors_end>:
     4a2:	11 24       	eor	r1, r1
     4a4:	1f be       	out	0x3f, r1	; 63
     4a6:	cf ef       	ldi	r28, 0xFF	; 255
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df e5       	ldi	r29, 0x5F	; 95
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0c bf       	out	0x3c, r16	; 60

000004b2 <__do_copy_data>:
     4b2:	10 e2       	ldi	r17, 0x20	; 32
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
     4b8:	e8 e6       	ldi	r30, 0x68	; 104
     4ba:	f1 e4       	ldi	r31, 0x41	; 65
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	0b bf       	out	0x3b, r16	; 59
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__do_copy_data+0x14>
     4c2:	07 90       	elpm	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	a0 35       	cpi	r26, 0x50	; 80
     4c8:	b1 07       	cpc	r27, r17
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__do_copy_data+0x10>

000004cc <__do_clear_bss>:
     4cc:	24 e2       	ldi	r18, 0x24	; 36
     4ce:	a0 e5       	ldi	r26, 0x50	; 80
     4d0:	b0 e2       	ldi	r27, 0x20	; 32
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <.do_clear_bss_start>

000004d4 <.do_clear_bss_loop>:
     4d4:	1d 92       	st	X+, r1

000004d6 <.do_clear_bss_start>:
     4d6:	a1 31       	cpi	r26, 0x11	; 17
     4d8:	b2 07       	cpc	r27, r18
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <.do_clear_bss_loop>
     4dc:	0e 94 4f 1b 	call	0x369e	; 0x369e <main>
     4e0:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <_exit>

000004e4 <__bad_interrupt>:
     4e4:	8d cd       	rjmp	.-1254   	; 0x0 <__vectors>

000004e6 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     4e6:	61 50       	subi	r22, 0x01	; 1
     4e8:	71 09       	sbc	r23, r1
     4ea:	81 09       	sbc	r24, r1
     4ec:	91 09       	sbc	r25, r1
     4ee:	d9 f7       	brne	.-10     	; 0x4e6 <__portable_avr_delay_cycles>
}
     4f0:	08 95       	ret

000004f2 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     50a:	00 e0       	ldi	r16, 0x00	; 0
     50c:	16 e0       	ldi	r17, 0x06	; 6
     50e:	68 94       	set
     510:	ff 24       	eor	r15, r15
     512:	f3 f8       	bld	r15, 3
     514:	f8 01       	movw	r30, r16
     516:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	e2 df       	rcall	.-60     	; 0x4e6 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     522:	f8 01       	movw	r30, r16
     524:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     526:	63 e0       	ldi	r22, 0x03	; 3
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	db df       	rcall	.-74     	; 0x4e6 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     530:	0f 2e       	mov	r0, r31
     532:	fb e2       	ldi	r31, 0x2B	; 43
     534:	bf 2e       	mov	r11, r31
     536:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     538:	b9 82       	std	Y+1, r11	; 0x01
     53a:	80 ea       	ldi	r24, 0xA0	; 160
     53c:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     53e:	08 d4       	rcall	.+2064   	; 0xd50 <usart_spi_init>
     540:	c1 2c       	mov	r12, r1
     542:	d1 2c       	mov	r13, r1
     544:	76 01       	movw	r14, r12
     546:	00 e4       	ldi	r16, 0x40	; 64
     548:	12 e4       	ldi	r17, 0x42	; 66
     54a:	2f e0       	ldi	r18, 0x0F	; 15
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	43 e0       	ldi	r20, 0x03	; 3
     550:	be 01       	movw	r22, r28
     552:	6f 5f       	subi	r22, 0xFF	; 255
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	80 ea       	ldi	r24, 0xA0	; 160
     558:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     55a:	29 d4       	rcall	.+2130   	; 0xdae <usart_spi_setup_device>
     55c:	00 e6       	ldi	r16, 0x60	; 96
     55e:	16 e0       	ldi	r17, 0x06	; 6
     560:	ff 24       	eor	r15, r15
     562:	f3 94       	inc	r15
     564:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     566:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     568:	b9 82       	std	Y+1, r11	; 0x01
     56a:	be 01       	movw	r22, r28
     56c:	6f 5f       	subi	r22, 0xFF	; 255
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	80 ea       	ldi	r24, 0xA0	; 160
     572:	99 e0       	ldi	r25, 0x09	; 9
     574:	36 d4       	rcall	.+2156   	; 0xde2 <usart_spi_select_device>
     576:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     578:	f6 82       	std	Z+6, r15	; 0x06
     57a:	e0 ea       	ldi	r30, 0xA0	; 160
     57c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     57e:	81 81       	ldd	r24, Z+1	; 0x01
     580:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     582:	fd cf       	rjmp	.-6      	; 0x57e <st7565r_init+0x8c>
     584:	80 ea       	ldi	r24, 0xA0	; 160
     586:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     58e:	81 81       	ldd	r24, Z+1	; 0x01
     590:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     592:	fd cf       	rjmp	.-6      	; 0x58e <st7565r_init+0x9c>
     594:	e0 ea       	ldi	r30, 0xA0	; 160
     596:	f9 e0       	ldi	r31, 0x09	; 9
     598:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     59a:	81 83       	std	Z+1, r24	; 0x01
     59c:	80 81       	ld	r24, Z
     59e:	be 01       	movw	r22, r28
     5a0:	6f 5f       	subi	r22, 0xFF	; 255
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a6:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a8:	32 d4       	rcall	.+2148   	; 0xe0e <usart_spi_deselect_device>
     5aa:	8b e2       	ldi	r24, 0x2B	; 43
     5ac:	89 83       	std	Y+1, r24	; 0x01
     5ae:	be 01       	movw	r22, r28
     5b0:	6f 5f       	subi	r22, 0xFF	; 255
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	80 ea       	ldi	r24, 0xA0	; 160
     5b6:	99 e0       	ldi	r25, 0x09	; 9
     5b8:	14 d4       	rcall	.+2088   	; 0xde2 <usart_spi_select_device>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     5c0:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5c2:	f9 e0       	ldi	r31, 0x09	; 9
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <st7565r_init+0xd2>
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5cc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d6:	86 ff       	sbrs	r24, 6
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <st7565r_init+0xe2>
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	81 83       	std	Z+1, r24	; 0x01
     5e2:	80 81       	ld	r24, Z
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ee:	0f d4       	rcall	.+2078   	; 0xe0e <usart_spi_deselect_device>
     5f0:	8b e2       	ldi	r24, 0x2B	; 43
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	80 ea       	ldi	r24, 0xA0	; 160
     5fc:	99 e0       	ldi	r25, 0x09	; 9
     5fe:	f1 d3       	rcall	.+2018   	; 0xde2 <usart_spi_select_device>
     600:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     602:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     606:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     608:	f9 e0       	ldi	r31, 0x09	; 9
     60a:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     60c:	85 ff       	sbrs	r24, 5
     60e:	fd cf       	rjmp	.-6      	; 0x60a <st7565r_init+0x118>
     610:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     612:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     616:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     61c:	86 ff       	sbrs	r24, 6
     61e:	fd cf       	rjmp	.-6      	; 0x61a <st7565r_init+0x128>
     620:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     622:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	81 83       	std	Z+1, r24	; 0x01
     628:	80 81       	ld	r24, Z
     62a:	be 01       	movw	r22, r28
     62c:	6f 5f       	subi	r22, 0xFF	; 255
     62e:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     630:	80 ea       	ldi	r24, 0xA0	; 160
     632:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     634:	ec d3       	rcall	.+2008   	; 0xe0e <usart_spi_deselect_device>
     636:	8b e2       	ldi	r24, 0x2B	; 43
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	be 01       	movw	r22, r28
     63c:	6f 5f       	subi	r22, 0xFF	; 255
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	80 ea       	ldi	r24, 0xA0	; 160
     642:	99 e0       	ldi	r25, 0x09	; 9
     644:	ce d3       	rcall	.+1948   	; 0xde2 <usart_spi_select_device>
     646:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     648:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     64c:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     64e:	f9 e0       	ldi	r31, 0x09	; 9
     650:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     652:	85 ff       	sbrs	r24, 5
     654:	fd cf       	rjmp	.-6      	; 0x650 <st7565r_init+0x15e>
     656:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     658:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     65e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     660:	81 81       	ldd	r24, Z+1	; 0x01
     662:	86 ff       	sbrs	r24, 6
     664:	fd cf       	rjmp	.-6      	; 0x660 <st7565r_init+0x16e>
     666:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     668:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     66a:	80 e4       	ldi	r24, 0x40	; 64
     66c:	81 83       	std	Z+1, r24	; 0x01
     66e:	80 81       	ld	r24, Z
     670:	be 01       	movw	r22, r28
     672:	6f 5f       	subi	r22, 0xFF	; 255
     674:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     676:	80 ea       	ldi	r24, 0xA0	; 160
     678:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     67a:	c9 d3       	rcall	.+1938   	; 0xe0e <usart_spi_deselect_device>
     67c:	8b e2       	ldi	r24, 0x2B	; 43
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	be 01       	movw	r22, r28
     682:	6f 5f       	subi	r22, 0xFF	; 255
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	80 ea       	ldi	r24, 0xA0	; 160
     688:	99 e0       	ldi	r25, 0x09	; 9
     68a:	ab d3       	rcall	.+1878   	; 0xde2 <usart_spi_select_device>
     68c:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     68e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     692:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     694:	f9 e0       	ldi	r31, 0x09	; 9
     696:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     698:	85 ff       	sbrs	r24, 5
     69a:	fd cf       	rjmp	.-6      	; 0x696 <st7565r_init+0x1a4>
     69c:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     69e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a6:	81 81       	ldd	r24, Z+1	; 0x01
     6a8:	86 ff       	sbrs	r24, 6
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <st7565r_init+0x1b4>
     6ac:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ae:	f9 e0       	ldi	r31, 0x09	; 9
     6b0:	80 e4       	ldi	r24, 0x40	; 64
     6b2:	81 83       	std	Z+1, r24	; 0x01
     6b4:	80 81       	ld	r24, Z
     6b6:	be 01       	movw	r22, r28
     6b8:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6be:	99 e0       	ldi	r25, 0x09	; 9
     6c0:	a6 d3       	rcall	.+1868   	; 0xe0e <usart_spi_deselect_device>
     6c2:	8b e2       	ldi	r24, 0x2B	; 43
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	be 01       	movw	r22, r28
     6c8:	6f 5f       	subi	r22, 0xFF	; 255
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	80 ea       	ldi	r24, 0xA0	; 160
     6ce:	99 e0       	ldi	r25, 0x09	; 9
     6d0:	88 d3       	rcall	.+1808   	; 0xde2 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d8:	e0 ea       	ldi	r30, 0xA0	; 160
     6da:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6dc:	81 81       	ldd	r24, Z+1	; 0x01
     6de:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6e0:	fd cf       	rjmp	.-6      	; 0x6dc <st7565r_init+0x1ea>
     6e2:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ee:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <st7565r_init+0x1fa>
     6f2:	e0 ea       	ldi	r30, 0xA0	; 160
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
     6f6:	80 e4       	ldi	r24, 0x40	; 64
     6f8:	81 83       	std	Z+1, r24	; 0x01
     6fa:	80 81       	ld	r24, Z
     6fc:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     702:	80 ea       	ldi	r24, 0xA0	; 160
     704:	99 e0       	ldi	r25, 0x09	; 9
     706:	83 d3       	rcall	.+1798   	; 0xe0e <usart_spi_deselect_device>
     708:	8b e2       	ldi	r24, 0x2B	; 43
     70a:	89 83       	std	Y+1, r24	; 0x01
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	80 ea       	ldi	r24, 0xA0	; 160
     714:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     716:	65 d3       	rcall	.+1738   	; 0xde2 <usart_spi_select_device>
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     720:	f9 e0       	ldi	r31, 0x09	; 9
     722:	81 81       	ldd	r24, Z+1	; 0x01
     724:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	fd cf       	rjmp	.-6      	; 0x722 <st7565r_init+0x230>
     728:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	86 ff       	sbrs	r24, 6
     734:	fd cf       	rjmp	.-6      	; 0x730 <st7565r_init+0x23e>
     736:	e0 ea       	ldi	r30, 0xA0	; 160
     738:	f9 e0       	ldi	r31, 0x09	; 9
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	81 83       	std	Z+1, r24	; 0x01
     73e:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	80 ea       	ldi	r24, 0xA0	; 160
     748:	99 e0       	ldi	r25, 0x09	; 9
     74a:	61 d3       	rcall	.+1730   	; 0xe0e <usart_spi_deselect_device>
     74c:	8b e2       	ldi	r24, 0x2B	; 43
     74e:	89 83       	std	Y+1, r24	; 0x01
     750:	be 01       	movw	r22, r28
     752:	6f 5f       	subi	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	99 e0       	ldi	r25, 0x09	; 9
     75a:	43 d3       	rcall	.+1670   	; 0xde2 <usart_spi_select_device>
     75c:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     762:	e0 ea       	ldi	r30, 0xA0	; 160
     764:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     766:	81 81       	ldd	r24, Z+1	; 0x01
     768:	85 ff       	sbrs	r24, 5
     76a:	fd cf       	rjmp	.-6      	; 0x766 <st7565r_init+0x274>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	86 ff       	sbrs	r24, 6
     77a:	fd cf       	rjmp	.-6      	; 0x776 <st7565r_init+0x284>
     77c:	e0 ea       	ldi	r30, 0xA0	; 160
     77e:	f9 e0       	ldi	r31, 0x09	; 9
     780:	80 e4       	ldi	r24, 0x40	; 64
     782:	81 83       	std	Z+1, r24	; 0x01
     784:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	be 01       	movw	r22, r28
     788:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	7f 4f       	sbci	r23, 0xFF	; 255
     78c:	80 ea       	ldi	r24, 0xA0	; 160
     78e:	99 e0       	ldi	r25, 0x09	; 9
     790:	3e d3       	rcall	.+1660   	; 0xe0e <usart_spi_deselect_device>
     792:	8b e2       	ldi	r24, 0x2B	; 43
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	99 e0       	ldi	r25, 0x09	; 9
     7a0:	20 d3       	rcall	.+1600   	; 0xde2 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a8:	e0 ea       	ldi	r30, 0xA0	; 160
     7aa:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ac:	81 81       	ldd	r24, Z+1	; 0x01
     7ae:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <st7565r_init+0x2ba>
     7b2:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	86 ff       	sbrs	r24, 6
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <st7565r_init+0x2ca>
     7c2:	e0 ea       	ldi	r30, 0xA0	; 160
     7c4:	f9 e0       	ldi	r31, 0x09	; 9
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	81 83       	std	Z+1, r24	; 0x01
     7ca:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	be 01       	movw	r22, r28
     7ce:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	80 ea       	ldi	r24, 0xA0	; 160
     7d4:	99 e0       	ldi	r25, 0x09	; 9
     7d6:	1b d3       	rcall	.+1590   	; 0xe0e <usart_spi_deselect_device>
     7d8:	8b e2       	ldi	r24, 0x2B	; 43
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e2:	80 ea       	ldi	r24, 0xA0	; 160
     7e4:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e6:	fd d2       	rcall	.+1530   	; 0xde2 <usart_spi_select_device>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ea:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ee:	e0 ea       	ldi	r30, 0xA0	; 160
     7f0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f2:	81 81       	ldd	r24, Z+1	; 0x01
     7f4:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <st7565r_init+0x300>
     7f8:	81 e2       	ldi	r24, 0x21	; 33
     7fa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     800:	f9 e0       	ldi	r31, 0x09	; 9
     802:	81 81       	ldd	r24, Z+1	; 0x01
     804:	86 ff       	sbrs	r24, 6
     806:	fd cf       	rjmp	.-6      	; 0x802 <st7565r_init+0x310>
     808:	e0 ea       	ldi	r30, 0xA0	; 160
     80a:	f9 e0       	ldi	r31, 0x09	; 9
     80c:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     80e:	81 83       	std	Z+1, r24	; 0x01
     810:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     812:	be 01       	movw	r22, r28
     814:	6f 5f       	subi	r22, 0xFF	; 255
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	80 ea       	ldi	r24, 0xA0	; 160
     81a:	99 e0       	ldi	r25, 0x09	; 9
     81c:	f8 d2       	rcall	.+1520   	; 0xe0e <usart_spi_deselect_device>
     81e:	8b e2       	ldi	r24, 0x2B	; 43
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82a:	99 e0       	ldi	r25, 0x09	; 9
     82c:	da d2       	rcall	.+1460   	; 0xde2 <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     834:	e0 ea       	ldi	r30, 0xA0	; 160
     836:	f9 e0       	ldi	r31, 0x09	; 9
     838:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83a:	85 ff       	sbrs	r24, 5
     83c:	fd cf       	rjmp	.-6      	; 0x838 <st7565r_init+0x346>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     83e:	8f ea       	ldi	r24, 0xAF	; 175
     840:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     846:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     848:	81 81       	ldd	r24, Z+1	; 0x01
     84a:	86 ff       	sbrs	r24, 6
     84c:	fd cf       	rjmp	.-6      	; 0x848 <st7565r_init+0x356>
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
     852:	80 e4       	ldi	r24, 0x40	; 64
     854:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     856:	80 81       	ld	r24, Z
     858:	be 01       	movw	r22, r28
     85a:	6f 5f       	subi	r22, 0xFF	; 255
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	80 ea       	ldi	r24, 0xA0	; 160
     860:	99 e0       	ldi	r25, 0x09	; 9
     862:	d5 d2       	rcall	.+1450   	; 0xe0e <usart_spi_deselect_device>
     864:	0f 90       	pop	r0
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	08 95       	ret

0000087a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     880:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     884:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     888:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     88c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     890:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     894:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     898:	08 95       	ret

0000089a <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     89a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     89c:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     89e:	e8 2f       	mov	r30, r24
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	e0 59       	subi	r30, 0x90	; 144
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	60 95       	com	r22
     8a8:	80 81       	ld	r24, Z
     8aa:	68 23       	and	r22, r24
     8ac:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8ae:	9f bf       	out	0x3f, r25	; 63
     8b0:	08 95       	ret

000008b2 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8b2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     8b4:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     8b6:	e8 2f       	mov	r30, r24
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e0 59       	subi	r30, 0x90	; 144
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	80 81       	ld	r24, Z
     8c0:	68 2b       	or	r22, r24
     8c2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8c4:	9f bf       	out	0x3f, r25	; 63
     8c6:	08 95       	ret

000008c8 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	1f 92       	push	r1
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	08 2f       	mov	r16, r24
     8da:	f6 2e       	mov	r15, r22
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8dc:	14 2f       	mov	r17, r20
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8de:	1a d1       	rcall	.+564    	; 0xb14 <gfx_mono_framebuffer_put_byte>
     8e0:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8e2:	00 6b       	ori	r16, 0xB0	; 176
     8e4:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	be 01       	movw	r22, r28
     8ea:	6f 5f       	subi	r22, 0xFF	; 255
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	80 ea       	ldi	r24, 0xA0	; 160
     8f0:	99 e0       	ldi	r25, 0x09	; 9
     8f2:	77 d2       	rcall	.+1262   	; 0xde2 <usart_spi_select_device>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8fa:	e0 ea       	ldi	r30, 0xA0	; 160
     8fc:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	95 ff       	sbrs	r25, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     902:	fd cf       	rjmp	.-6      	; 0x8fe <gfx_mono_st7565r_put_byte+0x36>
     904:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     908:	e0 ea       	ldi	r30, 0xA0	; 160
     90a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     90c:	81 81       	ldd	r24, Z+1	; 0x01
     90e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     910:	fd cf       	rjmp	.-6      	; 0x90c <gfx_mono_st7565r_put_byte+0x44>
     912:	e0 ea       	ldi	r30, 0xA0	; 160
     914:	f9 e0       	ldi	r31, 0x09	; 9
     916:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     918:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     91a:	80 81       	ld	r24, Z
     91c:	be 01       	movw	r22, r28
     91e:	6f 5f       	subi	r22, 0xFF	; 255
     920:	7f 4f       	sbci	r23, 0xFF	; 255
     922:	80 ea       	ldi	r24, 0xA0	; 160
     924:	99 e0       	ldi	r25, 0x09	; 9
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     926:	73 d2       	rcall	.+1254   	; 0xe0e <usart_spi_deselect_device>
     928:	0f 2d       	mov	r16, r15
     92a:	0f 77       	andi	r16, 0x7F	; 127
     92c:	02 95       	swap	r16
     92e:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     930:	00 61       	ori	r16, 0x10	; 16
     932:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     934:	89 83       	std	Y+1, r24	; 0x01
     936:	be 01       	movw	r22, r28
     938:	6f 5f       	subi	r22, 0xFF	; 255
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	80 ea       	ldi	r24, 0xA0	; 160
     93e:	99 e0       	ldi	r25, 0x09	; 9
     940:	50 d2       	rcall	.+1184   	; 0xde2 <usart_spi_select_device>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     948:	e0 ea       	ldi	r30, 0xA0	; 160
     94a:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     950:	fd cf       	rjmp	.-6      	; 0x94c <gfx_mono_st7565r_put_byte+0x84>
     952:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     956:	e0 ea       	ldi	r30, 0xA0	; 160
     958:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     95a:	81 81       	ldd	r24, Z+1	; 0x01
     95c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     95e:	fd cf       	rjmp	.-6      	; 0x95a <gfx_mono_st7565r_put_byte+0x92>
     960:	e0 ea       	ldi	r30, 0xA0	; 160
     962:	f9 e0       	ldi	r31, 0x09	; 9
     964:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     966:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     968:	80 81       	ld	r24, Z
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	80 ea       	ldi	r24, 0xA0	; 160
     972:	99 e0       	ldi	r25, 0x09	; 9
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     974:	4c d2       	rcall	.+1176   	; 0xe0e <usart_spi_deselect_device>
     976:	0f 2d       	mov	r16, r15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     978:	0f 70       	andi	r16, 0x0F	; 15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     97a:	8b e2       	ldi	r24, 0x2B	; 43
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	be 01       	movw	r22, r28
     980:	6f 5f       	subi	r22, 0xFF	; 255
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	80 ea       	ldi	r24, 0xA0	; 160
     986:	99 e0       	ldi	r25, 0x09	; 9
     988:	2c d2       	rcall	.+1112   	; 0xde2 <usart_spi_select_device>
     98a:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     98c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     990:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     992:	f9 e0       	ldi	r31, 0x09	; 9
     994:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     996:	85 ff       	sbrs	r24, 5
     998:	fd cf       	rjmp	.-6      	; 0x994 <gfx_mono_st7565r_put_byte+0xcc>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     99a:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     99e:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9a0:	f9 e0       	ldi	r31, 0x09	; 9
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a4:	86 ff       	sbrs	r24, 6
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <gfx_mono_st7565r_put_byte+0xda>
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9aa:	f9 e0       	ldi	r31, 0x09	; 9
     9ac:	80 e4       	ldi	r24, 0x40	; 64
     9ae:	81 83       	std	Z+1, r24	; 0x01
     9b0:	80 81       	ld	r24, Z
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9b8:	80 ea       	ldi	r24, 0xA0	; 160
     9ba:	99 e0       	ldi	r25, 0x09	; 9
     9bc:	28 d2       	rcall	.+1104   	; 0xe0e <usart_spi_deselect_device>
     9be:	8b e2       	ldi	r24, 0x2B	; 43
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	be 01       	movw	r22, r28
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	80 ea       	ldi	r24, 0xA0	; 160
     9ca:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9cc:	0a d2       	rcall	.+1044   	; 0xde2 <usart_spi_select_device>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9d6:	f9 e0       	ldi	r31, 0x09	; 9
     9d8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9da:	85 ff       	sbrs	r24, 5
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <gfx_mono_st7565r_put_byte+0x110>
     9de:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9e2:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9e4:	f9 e0       	ldi	r31, 0x09	; 9
     9e6:	81 81       	ldd	r24, Z+1	; 0x01
     9e8:	86 ff       	sbrs	r24, 6
     9ea:	fd cf       	rjmp	.-6      	; 0x9e6 <gfx_mono_st7565r_put_byte+0x11e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9ec:	e0 ea       	ldi	r30, 0xA0	; 160
     9ee:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f0:	80 e4       	ldi	r24, 0x40	; 64
     9f2:	81 83       	std	Z+1, r24	; 0x01
     9f4:	80 81       	ld	r24, Z
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     9fc:	be 01       	movw	r22, r28

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9fe:	6f 5f       	subi	r22, 0xFF	; 255
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	80 ea       	ldi	r24, 0xA0	; 160
     a04:	99 e0       	ldi	r25, 0x09	; 9
     a06:	03 d2       	rcall	.+1030   	; 0xe0e <usart_spi_deselect_device>
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	08 95       	ret

00000a16 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a24:	80 e5       	ldi	r24, 0x50	; 80
     a26:	90 e2       	ldi	r25, 0x20	; 32
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a28:	70 d0       	rcall	.+224    	; 0xb0a <gfx_mono_set_framebuffer>
     a2a:	63 dd       	rcall	.-1338   	; 0x4f2 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a2c:	8b e2       	ldi	r24, 0x2B	; 43
     a2e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a30:	be 01       	movw	r22, r28
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	80 ea       	ldi	r24, 0xA0	; 160
     a38:	99 e0       	ldi	r25, 0x09	; 9
     a3a:	d3 d1       	rcall	.+934    	; 0xde2 <usart_spi_select_device>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a42:	e0 ea       	ldi	r30, 0xA0	; 160
     a44:	f9 e0       	ldi	r31, 0x09	; 9
     a46:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a48:	85 ff       	sbrs	r24, 5
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a52:	e0 ea       	ldi	r30, 0xA0	; 160
     a54:	f9 e0       	ldi	r31, 0x09	; 9
     a56:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a58:	86 ff       	sbrs	r24, 6
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a5c:	e0 ea       	ldi	r30, 0xA0	; 160
     a5e:	f9 e0       	ldi	r31, 0x09	; 9
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a64:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
     a6e:	99 e0       	ldi	r25, 0x09	; 9
     a70:	ce d1       	rcall	.+924    	; 0xe0e <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a72:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <gfx_mono_st7565r_init+0x74>
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	61 2f       	mov	r22, r17
     a7a:	80 2f       	mov	r24, r16
     a7c:	25 df       	rcall	.-438    	; 0x8c8 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a7e:	1f 5f       	subi	r17, 0xFF	; 255
     a80:	10 38       	cpi	r17, 0x80	; 128
     a82:	c9 f7       	brne	.-14     	; 0xa76 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a84:	0f 5f       	subi	r16, 0xFF	; 255
     a86:	04 30       	cpi	r16, 0x04	; 4
     a88:	11 f0       	breq	.+4      	; 0xa8e <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a8a:	10 e0       	ldi	r17, 0x00	; 0
     a8c:	f4 cf       	rjmp	.-24     	; 0xa76 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a8e:	0f 90       	pop	r0
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     aa4:	88 23       	and	r24, r24
     aa6:	4c f1       	brlt	.+82     	; 0xafa <gfx_mono_st7565r_draw_pixel+0x60>
     aa8:	60 32       	cpi	r22, 0x20	; 32
     aaa:	38 f5       	brcc	.+78     	; 0xafa <gfx_mono_st7565r_draw_pixel+0x60>
     aac:	d4 2f       	mov	r29, r20
     aae:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ab0:	f6 2e       	mov	r15, r22
     ab2:	f6 94       	lsr	r15
     ab4:	f6 94       	lsr	r15
     ab6:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	f8 9e       	mul	r15, r24
     abe:	60 19       	sub	r22, r0
     ac0:	71 09       	sbc	r23, r1
     ac2:	11 24       	eor	r1, r1
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	8c 01       	movw	r16, r24
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <gfx_mono_st7565r_draw_pixel+0x36>
     acc:	00 0f       	add	r16, r16
     ace:	11 1f       	adc	r17, r17
     ad0:	6a 95       	dec	r22
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ad4:	6c 2f       	mov	r22, r28
     ad6:	8f 2d       	mov	r24, r15
     ad8:	2b d0       	rcall	.+86     	; 0xb30 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ada:	d1 30       	cpi	r29, 0x01	; 1
     adc:	21 f0       	breq	.+8      	; 0xae6 <gfx_mono_st7565r_draw_pixel+0x4c>
     ade:	28 f0       	brcs	.+10     	; 0xaea <gfx_mono_st7565r_draw_pixel+0x50>
     ae0:	d2 30       	cpi	r29, 0x02	; 2
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <gfx_mono_st7565r_draw_pixel+0x56>
     ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ae6:	80 2b       	or	r24, r16
		break;
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     aea:	00 95       	com	r16
     aec:	80 23       	and	r24, r16
		break;
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     af0:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     af2:	48 2f       	mov	r20, r24
     af4:	6c 2f       	mov	r22, r28
     af6:	8f 2d       	mov	r24, r15
     af8:	e7 de       	rcall	.-562    	; 0x8c8 <gfx_mono_st7565r_put_byte>
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	08 95       	ret

00000b06 <gfx_mono_st7565r_get_byte>:
 * \code
	data = gfx_mono_st7565r_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     b06:	14 c0       	rjmp	.+40     	; 0xb30 <gfx_mono_framebuffer_get_byte>
     b08:	08 95       	ret

00000b0a <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     b0a:	80 93 50 22 	sts	0x2250, r24	; 0x802250 <fbpointer>
     b0e:	90 93 51 22 	sts	0x2251, r25	; 0x802251 <fbpointer+0x1>
     b12:	08 95       	ret

00000b14 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b14:	20 91 50 22 	lds	r18, 0x2250	; 0x802250 <fbpointer>
     b18:	30 91 51 22 	lds	r19, 0x2251	; 0x802251 <fbpointer+0x1>
     b1c:	90 e8       	ldi	r25, 0x80	; 128
     b1e:	89 9f       	mul	r24, r25
     b20:	20 0d       	add	r18, r0
     b22:	31 1d       	adc	r19, r1
     b24:	11 24       	eor	r1, r1
     b26:	f9 01       	movw	r30, r18
     b28:	e6 0f       	add	r30, r22
     b2a:	f1 1d       	adc	r31, r1
     b2c:	40 83       	st	Z, r20
     b2e:	08 95       	ret

00000b30 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b30:	20 91 50 22 	lds	r18, 0x2250	; 0x802250 <fbpointer>
     b34:	30 91 51 22 	lds	r19, 0x2251	; 0x802251 <fbpointer+0x1>
     b38:	90 e8       	ldi	r25, 0x80	; 128
     b3a:	89 9f       	mul	r24, r25
     b3c:	20 0d       	add	r18, r0
     b3e:	31 1d       	adc	r19, r1
     b40:	11 24       	eor	r1, r1
     b42:	f9 01       	movw	r30, r18
     b44:	e6 0f       	add	r30, r22
     b46:	f1 1d       	adc	r31, r1
}
     b48:	80 81       	ld	r24, Z
     b4a:	08 95       	ret

00000b4c <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	e4 2f       	mov	r30, r20
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	e8 0f       	add	r30, r24
     b5c:	f1 1d       	adc	r31, r1
     b5e:	e1 38       	cpi	r30, 0x81	; 129
     b60:	f1 05       	cpc	r31, r1
     b62:	1c f0       	brlt	.+6      	; 0xb6a <gfx_mono_generic_draw_horizontal_line+0x1e>
     b64:	c0 e8       	ldi	r28, 0x80	; 128
     b66:	4c 2f       	mov	r20, r28
     b68:	48 1b       	sub	r20, r24
     b6a:	44 23       	and	r20, r20
     b6c:	09 f4       	brne	.+2      	; 0xb70 <gfx_mono_generic_draw_horizontal_line+0x24>
     b6e:	4a c0       	rjmp	.+148    	; 0xc04 <gfx_mono_generic_draw_horizontal_line+0xb8>
     b70:	d6 2f       	mov	r29, r22
     b72:	d6 95       	lsr	r29
     b74:	d6 95       	lsr	r29
     b76:	d6 95       	lsr	r29
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	98 e0       	ldi	r25, 0x08	; 8
     b7c:	d9 9f       	mul	r29, r25
     b7e:	60 19       	sub	r22, r0
     b80:	71 09       	sbc	r23, r1
     b82:	11 24       	eor	r1, r1
     b84:	e1 e0       	ldi	r30, 0x01	; 1
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	df 01       	movw	r26, r30
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <gfx_mono_generic_draw_horizontal_line+0x44>
     b8c:	aa 0f       	add	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	6a 95       	dec	r22
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <gfx_mono_generic_draw_horizontal_line+0x40>
     b94:	fa 2e       	mov	r15, r26
     b96:	21 30       	cpi	r18, 0x01	; 1
     b98:	21 f0       	breq	.+8      	; 0xba2 <gfx_mono_generic_draw_horizontal_line+0x56>
     b9a:	98 f0       	brcs	.+38     	; 0xbc2 <gfx_mono_generic_draw_horizontal_line+0x76>
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	19 f1       	breq	.+70     	; 0xbe6 <gfx_mono_generic_draw_horizontal_line+0x9a>
     ba0:	31 c0       	rjmp	.+98     	; 0xc04 <gfx_mono_generic_draw_horizontal_line+0xb8>
     ba2:	c4 2f       	mov	r28, r20
     ba4:	1f ef       	ldi	r17, 0xFF	; 255
     ba6:	18 0f       	add	r17, r24
     ba8:	01 2f       	mov	r16, r17
     baa:	0c 0f       	add	r16, r28
     bac:	60 2f       	mov	r22, r16
     bae:	8d 2f       	mov	r24, r29
     bb0:	aa df       	rcall	.-172    	; 0xb06 <gfx_mono_st7565r_get_byte>
     bb2:	4f 2d       	mov	r20, r15
     bb4:	48 2b       	or	r20, r24
     bb6:	60 2f       	mov	r22, r16
     bb8:	8d 2f       	mov	r24, r29
     bba:	86 de       	rcall	.-756    	; 0x8c8 <gfx_mono_st7565r_put_byte>
     bbc:	c1 50       	subi	r28, 0x01	; 1
     bbe:	a1 f7       	brne	.-24     	; 0xba8 <gfx_mono_generic_draw_horizontal_line+0x5c>
     bc0:	21 c0       	rjmp	.+66     	; 0xc04 <gfx_mono_generic_draw_horizontal_line+0xb8>
     bc2:	c4 2f       	mov	r28, r20
     bc4:	1f ef       	ldi	r17, 0xFF	; 255
     bc6:	18 0f       	add	r17, r24
     bc8:	fa 2e       	mov	r15, r26
     bca:	f0 94       	com	r15
     bcc:	01 2f       	mov	r16, r17
     bce:	0c 0f       	add	r16, r28
     bd0:	60 2f       	mov	r22, r16
     bd2:	8d 2f       	mov	r24, r29
     bd4:	98 df       	rcall	.-208    	; 0xb06 <gfx_mono_st7565r_get_byte>
     bd6:	4f 2d       	mov	r20, r15
     bd8:	48 23       	and	r20, r24
     bda:	60 2f       	mov	r22, r16
     bdc:	8d 2f       	mov	r24, r29
     bde:	74 de       	rcall	.-792    	; 0x8c8 <gfx_mono_st7565r_put_byte>
     be0:	c1 50       	subi	r28, 0x01	; 1
     be2:	a1 f7       	brne	.-24     	; 0xbcc <gfx_mono_generic_draw_horizontal_line+0x80>
     be4:	0f c0       	rjmp	.+30     	; 0xc04 <gfx_mono_generic_draw_horizontal_line+0xb8>
     be6:	c4 2f       	mov	r28, r20
     be8:	1f ef       	ldi	r17, 0xFF	; 255
     bea:	18 0f       	add	r17, r24
     bec:	01 2f       	mov	r16, r17
     bee:	0c 0f       	add	r16, r28
     bf0:	60 2f       	mov	r22, r16
     bf2:	8d 2f       	mov	r24, r29
     bf4:	88 df       	rcall	.-240    	; 0xb06 <gfx_mono_st7565r_get_byte>
     bf6:	4f 2d       	mov	r20, r15
     bf8:	48 27       	eor	r20, r24
     bfa:	60 2f       	mov	r22, r16
     bfc:	8d 2f       	mov	r24, r29
     bfe:	64 de       	rcall	.-824    	; 0x8c8 <gfx_mono_st7565r_put_byte>
     c00:	c1 50       	subi	r28, 0x01	; 1
     c02:	a1 f7       	brne	.-24     	; 0xbec <gfx_mono_generic_draw_horizontal_line+0xa0>
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	08 95       	ret

00000c10 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	if (height == 0) {
     c1a:	22 23       	and	r18, r18
     c1c:	69 f0       	breq	.+26     	; 0xc38 <gfx_mono_generic_draw_filled_rect+0x28>
     c1e:	f4 2e       	mov	r15, r20
     c20:	18 2f       	mov	r17, r24
     c22:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     c24:	df ef       	ldi	r29, 0xFF	; 255
     c26:	d6 0f       	add	r29, r22
     c28:	6d 2f       	mov	r22, r29
     c2a:	6c 0f       	add	r22, r28
     c2c:	20 2f       	mov	r18, r16
     c2e:	4f 2d       	mov	r20, r15
     c30:	81 2f       	mov	r24, r17
     c32:	8c df       	rcall	.-232    	; 0xb4c <gfx_mono_generic_draw_horizontal_line>
     c34:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     c36:	c1 f7       	brne	.-16     	; 0xc28 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	08 95       	ret

00000c44 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	c8 2f       	mov	r28, r24
     c5a:	e6 2e       	mov	r14, r22
     c5c:	b4 2e       	mov	r11, r20
     c5e:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     c60:	00 e0       	ldi	r16, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	43 81       	ldd	r20, Z+3	; 0x03
     c68:	6b 2d       	mov	r22, r11
     c6a:	8e 2d       	mov	r24, r14
     c6c:	d1 df       	rcall	.-94     	; 0xc10 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c6e:	f6 01       	movw	r30, r12
     c70:	80 81       	ld	r24, Z
     c72:	81 11       	cpse	r24, r1
     c74:	39 c0       	rjmp	.+114    	; 0xce8 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c76:	83 81       	ldd	r24, Z+3	; 0x03
     c78:	28 2f       	mov	r18, r24
     c7a:	26 95       	lsr	r18
     c7c:	26 95       	lsr	r18
     c7e:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c80:	87 70       	andi	r24, 0x07	; 7
     c82:	09 f0       	breq	.+2      	; 0xc86 <gfx_mono_draw_char+0x42>
		char_row_size++;
     c84:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c86:	f6 01       	movw	r30, r12
     c88:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c8a:	8c 2f       	mov	r24, r28
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	35 81       	ldd	r19, Z+5	; 0x05
     c90:	83 1b       	sub	r24, r19
     c92:	91 09       	sbc	r25, r1
     c94:	2a 9d       	mul	r18, r10
     c96:	90 01       	movw	r18, r0
     c98:	11 24       	eor	r1, r1
     c9a:	82 9f       	mul	r24, r18
     c9c:	a0 01       	movw	r20, r0
     c9e:	83 9f       	mul	r24, r19
     ca0:	50 0d       	add	r21, r0
     ca2:	92 9f       	mul	r25, r18
     ca4:	50 0d       	add	r21, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	01 81       	ldd	r16, Z+1	; 0x01
     caa:	12 81       	ldd	r17, Z+2	; 0x02
     cac:	04 0f       	add	r16, r20
     cae:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     cb0:	f6 01       	movw	r30, r12
     cb2:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     cb4:	ff 20       	and	r15, r15
     cb6:	a1 f0       	breq	.+40     	; 0xce0 <gfx_mono_draw_char+0x9c>
     cb8:	d0 e0       	ldi	r29, 0x00	; 0
     cba:	c0 e0       	ldi	r28, 0x00	; 0
     cbc:	8e 2d       	mov	r24, r14
     cbe:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     cc0:	9c 2f       	mov	r25, r28
     cc2:	97 70       	andi	r25, 0x07	; 7
     cc4:	21 f4       	brne	.+8      	; 0xcce <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     cc6:	f8 01       	movw	r30, r16
     cc8:	d4 91       	lpm	r29, Z
				glyph_data++;
     cca:	0f 5f       	subi	r16, 0xFF	; 255
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     cce:	dd 23       	and	r29, r29
     cd0:	1c f4       	brge	.+6      	; 0xcd8 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	6b 2d       	mov	r22, r11
     cd6:	e1 de       	rcall	.-574    	; 0xa9a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     cd8:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     cda:	cf 5f       	subi	r28, 0xFF	; 255
     cdc:	fc 12       	cpse	r15, r28
     cde:	ee cf       	rjmp	.-36     	; 0xcbc <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     ce0:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     ce2:	aa 94       	dec	r10
	} while (rows_left > 0);
     ce4:	a1 10       	cpse	r10, r1
     ce6:	e4 cf       	rjmp	.-56     	; 0xcb0 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	08 95       	ret

00000cfe <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	d6 2e       	mov	r13, r22
     d0e:	04 2f       	mov	r16, r20
     d10:	79 01       	movw	r14, r18
     d12:	ec 01       	movw	r28, r24
     d14:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d16:	89 91       	ld	r24, Y+
     d18:	8a 30       	cpi	r24, 0x0A	; 10
     d1a:	31 f4       	brne	.+12     	; 0xd28 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     d1c:	f7 01       	movw	r30, r14
     d1e:	84 81       	ldd	r24, Z+4	; 0x04
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     d24:	1d 2d       	mov	r17, r13
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     d28:	8d 30       	cpi	r24, 0x0D	; 13
     d2a:	39 f0       	breq	.+14     	; 0xd3a <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     d2c:	97 01       	movw	r18, r14
     d2e:	40 2f       	mov	r20, r16
     d30:	61 2f       	mov	r22, r17
     d32:	88 df       	rcall	.-240    	; 0xc44 <gfx_mono_draw_char>
			x += font->width;
     d34:	f7 01       	movw	r30, r14
     d36:	83 81       	ldd	r24, Z+3	; 0x03
     d38:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     d3a:	88 81       	ld	r24, Y
     d3c:	81 11       	cpse	r24, r1
     d3e:	eb cf       	rjmp	.-42     	; 0xd16 <gfx_mono_draw_string+0x18>
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	08 95       	ret

00000d50 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     d50:	80 3a       	cpi	r24, 0xA0	; 160
     d52:	28 e0       	ldi	r18, 0x08	; 8
     d54:	92 07       	cpc	r25, r18
     d56:	21 f4       	brne	.+8      	; 0xd60 <usart_spi_init+0x10>
     d58:	60 e1       	ldi	r22, 0x10	; 16
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	9e cd       	rjmp	.-1220   	; 0x89a <sysclk_enable_module>
     d5e:	08 95       	ret
     d60:	80 3b       	cpi	r24, 0xB0	; 176
     d62:	28 e0       	ldi	r18, 0x08	; 8
     d64:	92 07       	cpc	r25, r18
     d66:	21 f4       	brne	.+8      	; 0xd70 <usart_spi_init+0x20>
     d68:	60 e2       	ldi	r22, 0x20	; 32
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	96 cd       	rjmp	.-1236   	; 0x89a <sysclk_enable_module>
     d6e:	08 95       	ret
     d70:	80 3a       	cpi	r24, 0xA0	; 160
     d72:	29 e0       	ldi	r18, 0x09	; 9
     d74:	92 07       	cpc	r25, r18
     d76:	21 f4       	brne	.+8      	; 0xd80 <usart_spi_init+0x30>
     d78:	60 e1       	ldi	r22, 0x10	; 16
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	8e cd       	rjmp	.-1252   	; 0x89a <sysclk_enable_module>
     d7e:	08 95       	ret
     d80:	80 3b       	cpi	r24, 0xB0	; 176
     d82:	29 e0       	ldi	r18, 0x09	; 9
     d84:	92 07       	cpc	r25, r18
     d86:	21 f4       	brne	.+8      	; 0xd90 <usart_spi_init+0x40>
     d88:	60 e2       	ldi	r22, 0x20	; 32
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	86 cd       	rjmp	.-1268   	; 0x89a <sysclk_enable_module>
     d8e:	08 95       	ret
     d90:	80 3a       	cpi	r24, 0xA0	; 160
     d92:	2a e0       	ldi	r18, 0x0A	; 10
     d94:	92 07       	cpc	r25, r18
     d96:	21 f4       	brne	.+8      	; 0xda0 <usart_spi_init+0x50>
     d98:	60 e1       	ldi	r22, 0x10	; 16
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	7e cd       	rjmp	.-1284   	; 0x89a <sysclk_enable_module>
     d9e:	08 95       	ret
     da0:	80 3a       	cpi	r24, 0xA0	; 160
     da2:	9b 40       	sbci	r25, 0x0B	; 11
     da4:	19 f4       	brne	.+6      	; 0xdac <usart_spi_init+0x5c>
     da6:	60 e1       	ldi	r22, 0x10	; 16
     da8:	86 e0       	ldi	r24, 0x06	; 6
     daa:	77 cd       	rjmp	.-1298   	; 0x89a <sysclk_enable_module>
     dac:	08 95       	ret

00000dae <usart_spi_setup_device>:
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <usart_spi_setup_device+0xa>
     db8:	00 d0       	rcall	.+0      	; 0xdba <usart_spi_setup_device+0xc>
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	09 83       	std	Y+1, r16	; 0x01
     dc0:	1a 83       	std	Y+2, r17	; 0x02
     dc2:	2b 83       	std	Y+3, r18	; 0x03
     dc4:	3c 83       	std	Y+4, r19	; 0x04
     dc6:	4d 83       	std	Y+5, r20	; 0x05
     dc8:	1e 82       	std	Y+6, r1	; 0x06
     dca:	be 01       	movw	r22, r28
     dcc:	6f 5f       	subi	r22, 0xFF	; 255
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	a8 d5       	rcall	.+2896   	; 0x1922 <usart_init_spi>
     dd2:	26 96       	adiw	r28, 0x06	; 6
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     de2:	fb 01       	movw	r30, r22
     de4:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     de6:	e8 2f       	mov	r30, r24
     de8:	e6 95       	lsr	r30
     dea:	e6 95       	lsr	r30
     dec:	e6 95       	lsr	r30
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	e4 9f       	mul	r30, r20
     df2:	f0 01       	movw	r30, r0
     df4:	11 24       	eor	r1, r1
     df6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     df8:	87 70       	andi	r24, 0x07	; 7
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	a9 01       	movw	r20, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <usart_spi_select_device+0x24>
     e02:	44 0f       	add	r20, r20
     e04:	55 1f       	adc	r21, r21
     e06:	8a 95       	dec	r24
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     e0a:	46 83       	std	Z+6, r20	; 0x06
     e0c:	08 95       	ret

00000e0e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     e0e:	fb 01       	movw	r30, r22
     e10:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e12:	e8 2f       	mov	r30, r24
     e14:	e6 95       	lsr	r30
     e16:	e6 95       	lsr	r30
     e18:	e6 95       	lsr	r30
     e1a:	40 e2       	ldi	r20, 0x20	; 32
     e1c:	e4 9f       	mul	r30, r20
     e1e:	f0 01       	movw	r30, r0
     e20:	11 24       	eor	r1, r1
     e22:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e24:	87 70       	andi	r24, 0x07	; 7
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <usart_spi_deselect_device+0x24>
     e2e:	44 0f       	add	r20, r20
     e30:	55 1f       	adc	r21, r21
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e36:	45 83       	std	Z+5, r20	; 0x05
     e38:	08 95       	ret

00000e3a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     e3a:	81 15       	cp	r24, r1
     e3c:	22 e0       	ldi	r18, 0x02	; 2
     e3e:	92 07       	cpc	r25, r18
     e40:	61 f4       	brne	.+24     	; 0xe5a <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     e42:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <adca_enable_count>
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	98 0f       	add	r25, r24
     e4a:	90 93 53 22 	sts	0x2253, r25	; 0x802253 <adca_enable_count>
     e4e:	81 11       	cpse	r24, r1
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     e52:	62 e0       	ldi	r22, 0x02	; 2
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	21 cd       	rjmp	.-1470   	; 0x89a <sysclk_enable_module>
     e58:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     e5a:	80 34       	cpi	r24, 0x40	; 64
     e5c:	92 40       	sbci	r25, 0x02	; 2
     e5e:	59 f4       	brne	.+22     	; 0xe76 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     e60:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <adcb_enable_count>
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	98 0f       	add	r25, r24
     e68:	90 93 52 22 	sts	0x2252, r25	; 0x802252 <adcb_enable_count>
     e6c:	81 11       	cpse	r24, r1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     e70:	62 e0       	ldi	r22, 0x02	; 2
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	12 cd       	rjmp	.-1500   	; 0x89a <sysclk_enable_module>
     e76:	08 95       	ret

00000e78 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     e78:	81 15       	cp	r24, r1
     e7a:	22 e0       	ldi	r18, 0x02	; 2
     e7c:	92 07       	cpc	r25, r18
     e7e:	59 f4       	brne	.+22     	; 0xe96 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     e80:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <adca_enable_count>
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <adca_enable_count>
     e8a:	81 11       	cpse	r24, r1
     e8c:	11 c0       	rjmp	.+34     	; 0xeb0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     e8e:	62 e0       	ldi	r22, 0x02	; 2
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0f cd       	rjmp	.-1506   	; 0x8b2 <sysclk_disable_module>
     e94:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     e96:	80 34       	cpi	r24, 0x40	; 64
     e98:	92 40       	sbci	r25, 0x02	; 2
     e9a:	51 f4       	brne	.+20     	; 0xeb0 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     e9c:	80 91 52 22 	lds	r24, 0x2252	; 0x802252 <adcb_enable_count>
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	80 93 52 22 	sts	0x2252, r24	; 0x802252 <adcb_enable_count>
     ea6:	81 11       	cpse	r24, r1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	01 cd       	rjmp	.-1534   	; 0x8b2 <sysclk_disable_module>
     eb0:	08 95       	ret

00000eb2 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     eba:	1f b7       	in	r17, 0x3f	; 63
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     ebc:	f8 94       	cli
	adc->CTRLA |= ADC_ENABLE_bm;
     ebe:	bd df       	rcall	.-134    	; 0xe3a <adc_enable_clock>
     ec0:	88 81       	ld	r24, Y
     ec2:	81 60       	ori	r24, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ec4:	88 83       	st	Y, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ec6:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_disable();
     ec8:	9f b7       	in	r25, 0x3f	; 63
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     eca:	f8 94       	cli
     ecc:	e1 e0       	ldi	r30, 0x01	; 1
     ece:	f4 e2       	ldi	r31, 0x24	; 36
     ed0:	81 81       	ldd	r24, Z+1	; 0x01
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ed4:	81 83       	std	Z+1, r24	; 0x01
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     ed6:	9f bf       	out	0x3f, r25	; 63
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	08 95       	ret

00000ee0 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	0b b6       	in	r0, 0x3b	; 59
     eec:	0f 92       	push	r0
     eee:	2f 93       	push	r18
     ef0:	3f 93       	push	r19
     ef2:	4f 93       	push	r20
     ef4:	5f 93       	push	r21
     ef6:	6f 93       	push	r22
     ef8:	7f 93       	push	r23
     efa:	8f 93       	push	r24
     efc:	9f 93       	push	r25
     efe:	af 93       	push	r26
     f00:	bf 93       	push	r27
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     f06:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     f0a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     f0e:	e0 91 09 24 	lds	r30, 0x2409	; 0x802409 <adca_callback>
     f12:	f0 91 0a 24 	lds	r31, 0x240A	; 0x80240a <adca_callback+0x1>
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	19 95       	eicall
}
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0b be       	out	0x3b, r0	; 59
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	0b b6       	in	r0, 0x3b	; 59
     f50:	0f 92       	push	r0
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     f6a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     f6e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     f72:	e0 91 09 24 	lds	r30, 0x2409	; 0x802409 <adca_callback>
     f76:	f0 91 0a 24 	lds	r31, 0x240A	; 0x80240a <adca_callback+0x1>
     f7a:	62 e0       	ldi	r22, 0x02	; 2
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	19 95       	eicall
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	0b b6       	in	r0, 0x3b	; 59
     fb4:	0f 92       	push	r0
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     fce:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     fd2:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     fd6:	e0 91 09 24 	lds	r30, 0x2409	; 0x802409 <adca_callback>
     fda:	f0 91 0a 24 	lds	r31, 0x240A	; 0x80240a <adca_callback+0x1>
     fde:	64 e0       	ldi	r22, 0x04	; 4
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	19 95       	eicall
}
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	7f 91       	pop	r23
     ff4:	6f 91       	pop	r22
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0b be       	out	0x3b, r0	; 59
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	0b b6       	in	r0, 0x3b	; 59
    1018:	0f 92       	push	r0
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1032:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1036:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    103a:	e0 91 09 24 	lds	r30, 0x2409	; 0x802409 <adca_callback>
    103e:	f0 91 0a 24 	lds	r31, 0x240A	; 0x80240a <adca_callback+0x1>
    1042:	68 e0       	ldi	r22, 0x08	; 8
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	19 95       	eicall
}
    104a:	ff 91       	pop	r31
    104c:	ef 91       	pop	r30
    104e:	bf 91       	pop	r27
    1050:	af 91       	pop	r26
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	7f 91       	pop	r23
    1058:	6f 91       	pop	r22
    105a:	5f 91       	pop	r21
    105c:	4f 91       	pop	r20
    105e:	3f 91       	pop	r19
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0b be       	out	0x3b, r0	; 59
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	0b b6       	in	r0, 0x3b	; 59
    107c:	0f 92       	push	r0
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1096:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    109a:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    109e:	e0 91 07 24 	lds	r30, 0x2407	; 0x802407 <adcb_callback>
    10a2:	f0 91 08 24 	lds	r31, 0x2408	; 0x802408 <adcb_callback+0x1>
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	80 e4       	ldi	r24, 0x40	; 64
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	19 95       	eicall
}
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0b be       	out	0x3b, r0	; 59
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	0b b6       	in	r0, 0x3b	; 59
    10e0:	0f 92       	push	r0
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    10fa:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    10fe:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1102:	e0 91 07 24 	lds	r30, 0x2407	; 0x802407 <adcb_callback>
    1106:	f0 91 08 24 	lds	r31, 0x2408	; 0x802408 <adcb_callback+0x1>
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	80 e4       	ldi	r24, 0x40	; 64
    110e:	92 e0       	ldi	r25, 0x02	; 2
    1110:	19 95       	eicall
}
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0b be       	out	0x3b, r0	; 59
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	0b b6       	in	r0, 0x3b	; 59
    1144:	0f 92       	push	r0
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    115e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1162:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1166:	e0 91 07 24 	lds	r30, 0x2407	; 0x802407 <adcb_callback>
    116a:	f0 91 08 24 	lds	r31, 0x2408	; 0x802408 <adcb_callback+0x1>
    116e:	64 e0       	ldi	r22, 0x04	; 4
    1170:	80 e4       	ldi	r24, 0x40	; 64
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	19 95       	eicall
}
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0b be       	out	0x3b, r0	; 59
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	0b b6       	in	r0, 0x3b	; 59
    11a8:	0f 92       	push	r0
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    11c2:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    11c6:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    11ca:	e0 91 07 24 	lds	r30, 0x2407	; 0x802407 <adcb_callback>
    11ce:	f0 91 08 24 	lds	r31, 0x2408	; 0x802408 <adcb_callback+0x1>
    11d2:	68 e0       	ldi	r22, 0x08	; 8
    11d4:	80 e4       	ldi	r24, 0x40	; 64
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	19 95       	eicall
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0b be       	out	0x3b, r0	; 59
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
    1210:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1212:	81 15       	cp	r24, r1
    1214:	22 e0       	ldi	r18, 0x02	; 2
    1216:	92 07       	cpc	r25, r18
    1218:	71 f4       	brne	.+28     	; 0x1236 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    121a:	61 e2       	ldi	r22, 0x21	; 33
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	d4 d0       	rcall	.+424    	; 0x13ca <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1222:	e8 2e       	mov	r14, r24
    1224:	f1 2c       	mov	r15, r1
    1226:	60 e2       	ldi	r22, 0x20	; 32
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	ce d0       	rcall	.+412    	; 0x13ca <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    122e:	fe 2c       	mov	r15, r14
    1230:	ee 24       	eor	r14, r14
    1232:	e8 2a       	or	r14, r24
    1234:	10 c0       	rjmp	.+32     	; 0x1256 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1236:	80 34       	cpi	r24, 0x40	; 64
    1238:	92 40       	sbci	r25, 0x02	; 2
    123a:	51 f5       	brne	.+84     	; 0x1290 <adc_write_configuration+0x90>
    123c:	65 e2       	ldi	r22, 0x25	; 37
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	c3 d0       	rcall	.+390    	; 0x13ca <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1244:	e8 2e       	mov	r14, r24
    1246:	f1 2c       	mov	r15, r1
    1248:	64 e2       	ldi	r22, 0x24	; 36
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    124e:	bd d0       	rcall	.+378    	; 0x13ca <nvm_read_byte>
    1250:	fe 2c       	mov	r15, r14

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1252:	ee 24       	eor	r14, r14
	cpu_irq_disable();
    1254:	e8 2a       	or	r14, r24
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1256:	df b6       	in	r13, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	ce 01       	movw	r24, r28
	enable = adc->CTRLA & ADC_ENABLE_bm;
    125c:	ee dd       	rcall	.-1060   	; 0xe3a <adc_enable_clock>

	adc->CTRLA = ADC_FLUSH_bm;
    125e:	88 81       	ld	r24, Y
    1260:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
    1262:	98 83       	st	Y, r25
    1264:	ec 86       	std	Y+12, r14	; 0x0c
	adc->CMP = conf->cmp;
    1266:	fd 86       	std	Y+13, r15	; 0x0d
    1268:	f8 01       	movw	r30, r16
    126a:	25 81       	ldd	r18, Z+5	; 0x05
    126c:	36 81       	ldd	r19, Z+6	; 0x06
    126e:	28 8f       	std	Y+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
    1270:	39 8f       	std	Y+25, r19	; 0x19
    1272:	92 81       	ldd	r25, Z+2	; 0x02
	adc->PRESCALER = conf->prescaler;
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	94 81       	ldd	r25, Z+4	; 0x04
	adc->EVCTRL = conf->evctrl;
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	93 81       	ldd	r25, Z+3	; 0x03
	adc->CTRLB = conf->ctrlb;
    127c:	9b 83       	std	Y+3, r25	; 0x03

	adc->CTRLA = enable | conf->ctrla;
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	99 83       	std	Y+1, r25	; 0x01
    1282:	81 70       	andi	r24, 0x01	; 1

	adc_disable_clock(adc);
    1284:	90 81       	ld	r25, Z
    1286:	89 2b       	or	r24, r25
    1288:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    128a:	ce 01       	movw	r24, r28

	cpu_irq_restore(flags);
}
    128c:	f5 dd       	rcall	.-1046   	; 0xe78 <adc_disable_clock>
    128e:	df be       	out	0x3f, r13	; 63
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	08 95       	ret

000012a0 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ec 01       	movw	r28, r24
    12ac:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    12ae:	ff b6       	in	r15, 0x3f	; 63
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    12b0:	f8 94       	cli

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    12b2:	c3 dd       	rcall	.-1146   	; 0xe3a <adc_enable_clock>
    12b4:	88 81       	ld	r24, Y
    12b6:	80 7c       	andi	r24, 0xC0	; 192
    12b8:	f8 01       	movw	r30, r16

	conf->cmp = adc->CMP;
    12ba:	80 83       	st	Z, r24
    12bc:	88 8d       	ldd	r24, Y+24	; 0x18
    12be:	99 8d       	ldd	r25, Y+25	; 0x19
    12c0:	85 83       	std	Z+5, r24	; 0x05
	conf->refctrl = adc->REFCTRL;
    12c2:	96 83       	std	Z+6, r25	; 0x06
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->prescaler = adc->PRESCALER;
    12c6:	82 83       	std	Z+2, r24	; 0x02
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
	conf->evctrl = adc->EVCTRL;
    12ca:	84 83       	std	Z+4, r24	; 0x04
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
	conf->ctrlb = adc->CTRLB;
    12ce:	83 83       	std	Z+3, r24	; 0x03

	adc_disable_clock(adc);
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12d4:	ce 01       	movw	r24, r28

	cpu_irq_restore(flags);
}
    12d6:	d0 dd       	rcall	.-1120   	; 0xe78 <adc_disable_clock>
    12d8:	ff be       	out	0x3f, r15	; 63
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	08 95       	ret

000012e6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	7c 01       	movw	r14, r24
    12f8:	d6 2e       	mov	r13, r22
    12fa:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    12fc:	86 2f       	mov	r24, r22
    12fe:	83 70       	andi	r24, 0x03	; 3
    1300:	29 f4       	brne	.+10     	; 0x130c <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1302:	96 2f       	mov	r25, r22
    1304:	96 95       	lsr	r25
    1306:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    130c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    130e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1310:	90 ff       	sbrs	r25, 0
		index++;
    1312:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1314:	e7 01       	movw	r28, r14
    1316:	a0 96       	adiw	r28, 0x20	; 32
    1318:	98 e0       	ldi	r25, 0x08	; 8
    131a:	89 9f       	mul	r24, r25
    131c:	c0 0d       	add	r28, r0
    131e:	d1 1d       	adc	r29, r1
    1320:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1322:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1324:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1326:	c7 01       	movw	r24, r14
    1328:	88 dd       	rcall	.-1264   	; 0xe3a <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    132a:	f8 01       	movw	r30, r16
    132c:	80 81       	ld	r24, Z
    132e:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1334:	81 81       	ldd	r24, Z+1	; 0x01
    1336:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1338:	d0 fe       	sbrs	r13, 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    133c:	83 81       	ldd	r24, Z+3	; 0x03
	}
	adc_disable_clock(adc);
    133e:	8e 83       	std	Y+6, r24	; 0x06
    1340:	c7 01       	movw	r24, r14
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1342:	9a dd       	rcall	.-1228   	; 0xe78 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1344:	cf be       	out	0x3f, r12	; 63
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	08 95       	ret

00001358 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	7c 01       	movw	r14, r24
    136a:	d6 2e       	mov	r13, r22
    136c:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    136e:	86 2f       	mov	r24, r22
    1370:	83 70       	andi	r24, 0x03	; 3
    1372:	29 f4       	brne	.+10     	; 0x137e <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1374:	96 2f       	mov	r25, r22
    1376:	96 95       	lsr	r25
    1378:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    137e:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1380:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1382:	90 ff       	sbrs	r25, 0
		index++;
    1384:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1386:	e7 01       	movw	r28, r14
    1388:	a0 96       	adiw	r28, 0x20	; 32
    138a:	98 e0       	ldi	r25, 0x08	; 8
    138c:	89 9f       	mul	r24, r25
    138e:	c0 0d       	add	r28, r0
    1390:	d1 1d       	adc	r29, r1
    1392:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1394:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1396:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1398:	c7 01       	movw	r24, r14
    139a:	4f dd       	rcall	.-1378   	; 0xe3a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    139c:	88 81       	ld	r24, Y
    139e:	f8 01       	movw	r30, r16
    13a0:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    13aa:	d0 fe       	sbrs	r13, 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <adcch_read_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    13ae:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	adc_disable_clock(adc);
    13b0:	83 83       	std	Z+3, r24	; 0x03
    13b2:	c7 01       	movw	r24, r14
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    13b4:	61 dd       	rcall	.-1342   	; 0xe78 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    13b6:	cf be       	out	0x3f, r12	; 63
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	08 95       	ret

000013ca <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    13ca:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    13ce:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    13d0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    13d2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    13d6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    13d8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    13dc:	08 95       	ret

000013de <rtc_get_time>:
	RTC32.INTCTRL = 0;
	RTC32.CTRL = RTC32_ENABLE_bm;

	// Make sure it's sync'ed before return
	while (rtc_is_busy());
}
    13de:	80 e1       	ldi	r24, 0x10	; 16
    13e0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
    13e4:	e0 e2       	ldi	r30, 0x20	; 32
    13e6:	f4 e0       	ldi	r31, 0x04	; 4
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	84 fd       	sbrc	r24, 4
    13ec:	fd cf       	rjmp	.-6      	; 0x13e8 <rtc_get_time+0xa>
    13ee:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <__TEXT_REGION_LENGTH__+0x700424>
    13f2:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
    13f6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    13fa:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
    13fe:	08 95       	ret

00001400 <__vector_11>:
 *
 * Disables the RTC32 interrupts, then calls the alarm callback function if one
 * has been set.
 */
ISR(RTC32_COMP_vect)
{
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	0b b6       	in	r0, 0x3b	; 59
    140c:	0f 92       	push	r0
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
	RTC32.INTCTRL = 0;
    142a:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
	if (rtc_data.callback)
    142e:	c0 91 0b 24 	lds	r28, 0x240B	; 0x80240b <rtc_data>
    1432:	d0 91 0c 24 	lds	r29, 0x240C	; 0x80240c <rtc_data+0x1>
    1436:	20 97       	sbiw	r28, 0x00	; 0
		rtc_data.callback(rtc_get_time());
    1438:	19 f0       	breq	.+6      	; 0x1440 <__vector_11+0x40>
    143a:	d1 df       	rcall	.-94     	; 0x13de <rtc_get_time>
    143c:	fe 01       	movw	r30, r28
}
    143e:	19 95       	eicall
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0b be       	out	0x3b, r0	; 59
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <usart_getchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    146a:	fc 01       	movw	r30, r24
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	99 23       	and	r25, r25
    1470:	ec f7       	brge	.-6      	; 0x146c <usart_getchar+0x2>
    1472:	80 81       	ld	r24, Z
    1474:	08 95       	ret

00001476 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	7c 01       	movw	r14, r24
    1492:	4a 01       	movw	r8, r20
    1494:	5b 01       	movw	r10, r22
    1496:	28 01       	movw	r4, r16
    1498:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    149a:	fc 01       	movw	r30, r24
    149c:	84 81       	ldd	r24, Z+4	; 0x04
    149e:	82 ff       	sbrs	r24, 2
    14a0:	16 c0       	rjmp	.+44     	; 0x14ce <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    14a2:	d9 01       	movw	r26, r18
    14a4:	c8 01       	movw	r24, r16
    14a6:	68 94       	set
    14a8:	12 f8       	bld	r1, 2
    14aa:	b6 95       	lsr	r27
    14ac:	a7 95       	ror	r26
    14ae:	97 95       	ror	r25
    14b0:	87 95       	ror	r24
    14b2:	16 94       	lsr	r1
    14b4:	d1 f7       	brne	.-12     	; 0x14aa <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    14b6:	b9 01       	movw	r22, r18
    14b8:	a8 01       	movw	r20, r16
    14ba:	03 2e       	mov	r0, r19
    14bc:	36 e1       	ldi	r19, 0x16	; 22
    14be:	76 95       	lsr	r23
    14c0:	67 95       	ror	r22
    14c2:	57 95       	ror	r21
    14c4:	47 95       	ror	r20
    14c6:	3a 95       	dec	r19
    14c8:	d1 f7       	brne	.-12     	; 0x14be <usart_set_baudrate+0x48>
    14ca:	30 2d       	mov	r19, r0
    14cc:	15 c0       	rjmp	.+42     	; 0x14f8 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    14ce:	d9 01       	movw	r26, r18
    14d0:	c8 01       	movw	r24, r16
    14d2:	68 94       	set
    14d4:	13 f8       	bld	r1, 3
    14d6:	b6 95       	lsr	r27
    14d8:	a7 95       	ror	r26
    14da:	97 95       	ror	r25
    14dc:	87 95       	ror	r24
    14de:	16 94       	lsr	r1
    14e0:	d1 f7       	brne	.-12     	; 0x14d6 <usart_set_baudrate+0x60>
		min_rate /= 2;
    14e2:	b9 01       	movw	r22, r18
    14e4:	a8 01       	movw	r20, r16
    14e6:	03 2e       	mov	r0, r19
    14e8:	37 e1       	ldi	r19, 0x17	; 23
    14ea:	76 95       	lsr	r23
    14ec:	67 95       	ror	r22
    14ee:	57 95       	ror	r21
    14f0:	47 95       	ror	r20
    14f2:	3a 95       	dec	r19
    14f4:	d1 f7       	brne	.-12     	; 0x14ea <usart_set_baudrate+0x74>
    14f6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    14f8:	88 15       	cp	r24, r8
    14fa:	99 05       	cpc	r25, r9
    14fc:	aa 05       	cpc	r26, r10
    14fe:	bb 05       	cpc	r27, r11
    1500:	08 f4       	brcc	.+2      	; 0x1504 <usart_set_baudrate+0x8e>
    1502:	a6 c0       	rjmp	.+332    	; 0x1650 <usart_set_baudrate+0x1da>
    1504:	84 16       	cp	r8, r20
    1506:	95 06       	cpc	r9, r21
    1508:	a6 06       	cpc	r10, r22
    150a:	b7 06       	cpc	r11, r23
    150c:	08 f4       	brcc	.+2      	; 0x1510 <usart_set_baudrate+0x9a>
    150e:	a2 c0       	rjmp	.+324    	; 0x1654 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1510:	f7 01       	movw	r30, r14
    1512:	84 81       	ldd	r24, Z+4	; 0x04
    1514:	82 fd       	sbrc	r24, 2
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <usart_set_baudrate+0xaa>
		baud *= 2;
    1518:	88 0c       	add	r8, r8
    151a:	99 1c       	adc	r9, r9
    151c:	aa 1c       	adc	r10, r10
    151e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1520:	c3 01       	movw	r24, r6
    1522:	b2 01       	movw	r22, r4
    1524:	a5 01       	movw	r20, r10
    1526:	94 01       	movw	r18, r8
    1528:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    152c:	2f 3f       	cpi	r18, 0xFF	; 255
    152e:	31 05       	cpc	r19, r1
    1530:	41 05       	cpc	r20, r1
    1532:	51 05       	cpc	r21, r1
    1534:	08 f4       	brcc	.+2      	; 0x1538 <usart_set_baudrate+0xc2>
    1536:	90 c0       	rjmp	.+288    	; 0x1658 <usart_set_baudrate+0x1e2>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 e0       	ldi	r26, 0x00	; 0
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	c9 ef       	ldi	r28, 0xF9	; 249
    1542:	05 c0       	rjmp	.+10     	; 0x154e <usart_set_baudrate+0xd8>
    1544:	28 17       	cp	r18, r24
    1546:	39 07       	cpc	r19, r25
    1548:	4a 07       	cpc	r20, r26
    154a:	5b 07       	cpc	r21, r27
    154c:	58 f0       	brcs	.+22     	; 0x1564 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	aa 1f       	adc	r26, r26
    1554:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1556:	cd 3f       	cpi	r28, 0xFD	; 253
    1558:	0c f4       	brge	.+2      	; 0x155c <usart_set_baudrate+0xe6>
			limit |= 1;
    155a:	81 60       	ori	r24, 0x01	; 1
    155c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    155e:	c7 30       	cpi	r28, 0x07	; 7
    1560:	89 f7       	brne	.-30     	; 0x1544 <usart_set_baudrate+0xce>
    1562:	4f c0       	rjmp	.+158    	; 0x1602 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1564:	cc 23       	and	r28, r28
    1566:	0c f0       	brlt	.+2      	; 0x156a <usart_set_baudrate+0xf4>
    1568:	4c c0       	rjmp	.+152    	; 0x1602 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    156a:	d5 01       	movw	r26, r10
    156c:	c4 01       	movw	r24, r8
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	aa 1f       	adc	r26, r26
    1574:	bb 1f       	adc	r27, r27
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	aa 1f       	adc	r26, r26
    157c:	bb 1f       	adc	r27, r27
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	aa 1f       	adc	r26, r26
    1584:	bb 1f       	adc	r27, r27
    1586:	48 1a       	sub	r4, r24
    1588:	59 0a       	sbc	r5, r25
    158a:	6a 0a       	sbc	r6, r26
    158c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    158e:	ce 3f       	cpi	r28, 0xFE	; 254
    1590:	f4 f4       	brge	.+60     	; 0x15ce <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1592:	8d ef       	ldi	r24, 0xFD	; 253
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	8c 1b       	sub	r24, r28
    1598:	91 09       	sbc	r25, r1
    159a:	c7 fd       	sbrc	r28, 7
    159c:	93 95       	inc	r25
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <usart_set_baudrate+0x132>
    15a0:	44 0c       	add	r4, r4
    15a2:	55 1c       	adc	r5, r5
    15a4:	66 1c       	adc	r6, r6
    15a6:	77 1c       	adc	r7, r7
    15a8:	8a 95       	dec	r24
    15aa:	d2 f7       	brpl	.-12     	; 0x15a0 <usart_set_baudrate+0x12a>
    15ac:	d5 01       	movw	r26, r10
    15ae:	c4 01       	movw	r24, r8
    15b0:	b6 95       	lsr	r27
    15b2:	a7 95       	ror	r26
    15b4:	97 95       	ror	r25
    15b6:	87 95       	ror	r24
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	64 0d       	add	r22, r4
    15be:	75 1d       	adc	r23, r5
    15c0:	86 1d       	adc	r24, r6
    15c2:	97 1d       	adc	r25, r7
    15c4:	a5 01       	movw	r20, r10
    15c6:	94 01       	movw	r18, r8
    15c8:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodsi4>
    15cc:	37 c0       	rjmp	.+110    	; 0x163c <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	8c 0f       	add	r24, r28
    15d2:	a5 01       	movw	r20, r10
    15d4:	94 01       	movw	r18, r8
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <usart_set_baudrate+0x16a>
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	44 1f       	adc	r20, r20
    15de:	55 1f       	adc	r21, r21
    15e0:	8a 95       	dec	r24
    15e2:	d2 f7       	brpl	.-12     	; 0x15d8 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    15e4:	da 01       	movw	r26, r20
    15e6:	c9 01       	movw	r24, r18
    15e8:	b6 95       	lsr	r27
    15ea:	a7 95       	ror	r26
    15ec:	97 95       	ror	r25
    15ee:	87 95       	ror	r24
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	64 0d       	add	r22, r4
    15f6:	75 1d       	adc	r23, r5
    15f8:	86 1d       	adc	r24, r6
    15fa:	97 1d       	adc	r25, r7
    15fc:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodsi4>
    1600:	1d c0       	rjmp	.+58     	; 0x163c <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	8c 0f       	add	r24, r28
    1606:	a5 01       	movw	r20, r10
    1608:	94 01       	movw	r18, r8
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <usart_set_baudrate+0x19e>
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	44 1f       	adc	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	8a 95       	dec	r24
    1616:	d2 f7       	brpl	.-12     	; 0x160c <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1618:	da 01       	movw	r26, r20
    161a:	c9 01       	movw	r24, r18
    161c:	b6 95       	lsr	r27
    161e:	a7 95       	ror	r26
    1620:	97 95       	ror	r25
    1622:	87 95       	ror	r24
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	64 0d       	add	r22, r4
    162a:	75 1d       	adc	r23, r5
    162c:	86 1d       	adc	r24, r6
    162e:	97 1d       	adc	r25, r7
    1630:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodsi4>
    1634:	21 50       	subi	r18, 0x01	; 1
    1636:	31 09       	sbc	r19, r1
    1638:	41 09       	sbc	r20, r1
    163a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    163c:	83 2f       	mov	r24, r19
    163e:	8f 70       	andi	r24, 0x0F	; 15
    1640:	c2 95       	swap	r28
    1642:	c0 7f       	andi	r28, 0xF0	; 240
    1644:	c8 2b       	or	r28, r24
    1646:	f7 01       	movw	r30, r14
    1648:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    164a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	18 c0       	rjmp	.+48     	; 0x1680 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	16 c0       	rjmp	.+44     	; 0x1680 <usart_set_baudrate+0x20a>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1658:	d5 01       	movw	r26, r10
    165a:	c4 01       	movw	r24, r8
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	aa 1f       	adc	r26, r26
    1662:	bb 1f       	adc	r27, r27
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	aa 1f       	adc	r26, r26
    166a:	bb 1f       	adc	r27, r27
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	aa 1f       	adc	r26, r26
    1672:	bb 1f       	adc	r27, r27
    1674:	48 1a       	sub	r4, r24
    1676:	59 0a       	sbc	r5, r25
    1678:	6a 0a       	sbc	r6, r26
    167a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    167c:	c9 ef       	ldi	r28, 0xF9	; 249
    167e:	89 cf       	rjmp	.-238    	; 0x1592 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	bf 90       	pop	r11
    168c:	af 90       	pop	r10
    168e:	9f 90       	pop	r9
    1690:	8f 90       	pop	r8
    1692:	7f 90       	pop	r7
    1694:	6f 90       	pop	r6
    1696:	5f 90       	pop	r5
    1698:	4f 90       	pop	r4
    169a:	08 95       	ret

0000169c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	ec 01       	movw	r28, r24
    16a6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	09 f4       	brne	.+2      	; 0x16ae <usart_init_rs232+0x12>
    16ac:	e6 c0       	rjmp	.+460    	; 0x187a <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    16ae:	80 3c       	cpi	r24, 0xC0	; 192
    16b0:	91 05       	cpc	r25, r1
    16b2:	21 f4       	brne	.+8      	; 0x16bc <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    16b4:	60 e1       	ldi	r22, 0x10	; 16
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	f0 d8       	rcall	.-3616   	; 0x89a <sysclk_enable_module>
    16ba:	df c0       	rjmp	.+446    	; 0x187a <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    16bc:	c0 38       	cpi	r28, 0x80	; 128
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	d8 07       	cpc	r29, r24
    16c2:	21 f4       	brne	.+8      	; 0x16cc <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    16c4:	62 e0       	ldi	r22, 0x02	; 2
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	e8 d8       	rcall	.-3632   	; 0x89a <sysclk_enable_module>
    16ca:	d7 c0       	rjmp	.+430    	; 0x187a <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    16cc:	c1 15       	cp	r28, r1
    16ce:	e1 e0       	ldi	r30, 0x01	; 1
    16d0:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    16d2:	21 f4       	brne	.+8      	; 0x16dc <usart_init_rs232+0x40>
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	e0 d8       	rcall	.-3648   	; 0x89a <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    16da:	cf c0       	rjmp	.+414    	; 0x187a <usart_init_rs232+0x1de>
    16dc:	c0 38       	cpi	r28, 0x80	; 128
    16de:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    16e0:	df 07       	cpc	r29, r31
    16e2:	21 f4       	brne	.+8      	; 0x16ec <usart_init_rs232+0x50>
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	d8 d8       	rcall	.-3664   	; 0x89a <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    16ea:	c7 c0       	rjmp	.+398    	; 0x187a <usart_init_rs232+0x1de>
    16ec:	c0 39       	cpi	r28, 0x90	; 144
    16ee:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    16f0:	d8 07       	cpc	r29, r24
    16f2:	21 f4       	brne	.+8      	; 0x16fc <usart_init_rs232+0x60>
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	d0 d8       	rcall	.-3680   	; 0x89a <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    16fa:	bf c0       	rjmp	.+382    	; 0x187a <usart_init_rs232+0x1de>
    16fc:	c1 15       	cp	r28, r1
    16fe:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1700:	de 07       	cpc	r29, r30
    1702:	21 f4       	brne	.+8      	; 0x170c <usart_init_rs232+0x70>
    1704:	62 e0       	ldi	r22, 0x02	; 2
    1706:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1708:	c8 d8       	rcall	.-3696   	; 0x89a <sysclk_enable_module>
    170a:	b7 c0       	rjmp	.+366    	; 0x187a <usart_init_rs232+0x1de>
    170c:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    170e:	f2 e0       	ldi	r31, 0x02	; 2
    1710:	df 07       	cpc	r29, r31
    1712:	21 f4       	brne	.+8      	; 0x171c <usart_init_rs232+0x80>
    1714:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	c0 d8       	rcall	.-3712   	; 0x89a <sysclk_enable_module>
    171a:	af c0       	rjmp	.+350    	; 0x187a <usart_init_rs232+0x1de>
    171c:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	d8 07       	cpc	r29, r24
    1722:	21 f4       	brne	.+8      	; 0x172c <usart_init_rs232+0x90>
    1724:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	b8 d8       	rcall	.-3728   	; 0x89a <sysclk_enable_module>
    172a:	a7 c0       	rjmp	.+334    	; 0x187a <usart_init_rs232+0x1de>
    172c:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    172e:	e8 e0       	ldi	r30, 0x08	; 8
    1730:	de 07       	cpc	r29, r30
    1732:	21 f4       	brne	.+8      	; 0x173c <usart_init_rs232+0xa0>
    1734:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	b0 d8       	rcall	.-3744   	; 0x89a <sysclk_enable_module>
    173a:	9f c0       	rjmp	.+318    	; 0x187a <usart_init_rs232+0x1de>
    173c:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    173e:	f9 e0       	ldi	r31, 0x09	; 9
    1740:	df 07       	cpc	r29, r31
    1742:	21 f4       	brne	.+8      	; 0x174c <usart_init_rs232+0xb0>
    1744:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1746:	84 e0       	ldi	r24, 0x04	; 4
    1748:	a8 d8       	rcall	.-3760   	; 0x89a <sysclk_enable_module>
    174a:	97 c0       	rjmp	.+302    	; 0x187a <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    174c:	c1 15       	cp	r28, r1
    174e:	8a e0       	ldi	r24, 0x0A	; 10
    1750:	d8 07       	cpc	r29, r24
    1752:	21 f4       	brne	.+8      	; 0x175c <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	85 e0       	ldi	r24, 0x05	; 5
    1758:	a0 d8       	rcall	.-3776   	; 0x89a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    175a:	8f c0       	rjmp	.+286    	; 0x187a <usart_init_rs232+0x1de>
    175c:	c1 15       	cp	r28, r1
    175e:	eb e0       	ldi	r30, 0x0B	; 11
    1760:	de 07       	cpc	r29, r30
    1762:	21 f4       	brne	.+8      	; 0x176c <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	86 e0       	ldi	r24, 0x06	; 6
    1768:	98 d8       	rcall	.-3792   	; 0x89a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    176a:	87 c0       	rjmp	.+270    	; 0x187a <usart_init_rs232+0x1de>
    176c:	c0 34       	cpi	r28, 0x40	; 64
    176e:	f8 e0       	ldi	r31, 0x08	; 8
    1770:	df 07       	cpc	r29, r31
    1772:	21 f4       	brne	.+8      	; 0x177c <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	90 d8       	rcall	.-3808   	; 0x89a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    177a:	7f c0       	rjmp	.+254    	; 0x187a <usart_init_rs232+0x1de>
    177c:	c0 34       	cpi	r28, 0x40	; 64
    177e:	89 e0       	ldi	r24, 0x09	; 9
    1780:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1782:	21 f4       	brne	.+8      	; 0x178c <usart_init_rs232+0xf0>
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1788:	88 d8       	rcall	.-3824   	; 0x89a <sysclk_enable_module>
    178a:	77 c0       	rjmp	.+238    	; 0x187a <usart_init_rs232+0x1de>
    178c:	c0 34       	cpi	r28, 0x40	; 64
    178e:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1790:	de 07       	cpc	r29, r30
    1792:	21 f4       	brne	.+8      	; 0x179c <usart_init_rs232+0x100>
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1798:	80 d8       	rcall	.-3840   	; 0x89a <sysclk_enable_module>
    179a:	6f c0       	rjmp	.+222    	; 0x187a <usart_init_rs232+0x1de>
    179c:	c0 39       	cpi	r28, 0x90	; 144
    179e:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    17a0:	df 07       	cpc	r29, r31
    17a2:	21 f4       	brne	.+8      	; 0x17ac <usart_init_rs232+0x110>
    17a4:	64 e0       	ldi	r22, 0x04	; 4
    17a6:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    17a8:	78 d8       	rcall	.-3856   	; 0x89a <sysclk_enable_module>
    17aa:	67 c0       	rjmp	.+206    	; 0x187a <usart_init_rs232+0x1de>
    17ac:	c0 39       	cpi	r28, 0x90	; 144
    17ae:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    17b0:	d8 07       	cpc	r29, r24
    17b2:	21 f4       	brne	.+8      	; 0x17bc <usart_init_rs232+0x120>
    17b4:	64 e0       	ldi	r22, 0x04	; 4
    17b6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    17b8:	70 d8       	rcall	.-3872   	; 0x89a <sysclk_enable_module>
    17ba:	5f c0       	rjmp	.+190    	; 0x187a <usart_init_rs232+0x1de>
    17bc:	c0 39       	cpi	r28, 0x90	; 144
    17be:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    17c0:	de 07       	cpc	r29, r30
    17c2:	21 f4       	brne	.+8      	; 0x17cc <usart_init_rs232+0x130>
    17c4:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    17c6:	85 e0       	ldi	r24, 0x05	; 5
    17c8:	68 d8       	rcall	.-3888   	; 0x89a <sysclk_enable_module>
    17ca:	57 c0       	rjmp	.+174    	; 0x187a <usart_init_rs232+0x1de>
    17cc:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	df 07       	cpc	r29, r31
    17d2:	21 f4       	brne	.+8      	; 0x17dc <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    17d4:	64 e0       	ldi	r22, 0x04	; 4
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	60 d8       	rcall	.-3904   	; 0x89a <sysclk_enable_module>
    17da:	4f c0       	rjmp	.+158    	; 0x187a <usart_init_rs232+0x1de>
    17dc:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    17de:	88 e0       	ldi	r24, 0x08	; 8
    17e0:	d8 07       	cpc	r29, r24
    17e2:	21 f4       	brne	.+8      	; 0x17ec <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    17e4:	68 e0       	ldi	r22, 0x08	; 8
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	58 d8       	rcall	.-3920   	; 0x89a <sysclk_enable_module>
    17ea:	47 c0       	rjmp	.+142    	; 0x187a <usart_init_rs232+0x1de>
    17ec:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    17ee:	e9 e0       	ldi	r30, 0x09	; 9
    17f0:	de 07       	cpc	r29, r30
    17f2:	21 f4       	brne	.+8      	; 0x17fc <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    17f4:	68 e0       	ldi	r22, 0x08	; 8
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	50 d8       	rcall	.-3936   	; 0x89a <sysclk_enable_module>
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    17fc:	c0 3a       	cpi	r28, 0xA0	; 160
    17fe:	f8 e0       	ldi	r31, 0x08	; 8
    1800:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1802:	21 f4       	brne	.+8      	; 0x180c <usart_init_rs232+0x170>
    1804:	60 e1       	ldi	r22, 0x10	; 16
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	48 d8       	rcall	.-3952   	; 0x89a <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    180a:	37 c0       	rjmp	.+110    	; 0x187a <usart_init_rs232+0x1de>
    180c:	c0 3a       	cpi	r28, 0xA0	; 160
    180e:	89 e0       	ldi	r24, 0x09	; 9
    1810:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1812:	21 f4       	brne	.+8      	; 0x181c <usart_init_rs232+0x180>
    1814:	60 e1       	ldi	r22, 0x10	; 16
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	40 d8       	rcall	.-3968   	; 0x89a <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    181a:	2f c0       	rjmp	.+94     	; 0x187a <usart_init_rs232+0x1de>
    181c:	c0 3a       	cpi	r28, 0xA0	; 160
    181e:	ea e0       	ldi	r30, 0x0A	; 10
    1820:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1822:	21 f4       	brne	.+8      	; 0x182c <usart_init_rs232+0x190>
    1824:	60 e1       	ldi	r22, 0x10	; 16
    1826:	85 e0       	ldi	r24, 0x05	; 5
    1828:	38 d8       	rcall	.-3984   	; 0x89a <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    182a:	27 c0       	rjmp	.+78     	; 0x187a <usart_init_rs232+0x1de>
    182c:	c0 3a       	cpi	r28, 0xA0	; 160
    182e:	fb e0       	ldi	r31, 0x0B	; 11
    1830:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1832:	21 f4       	brne	.+8      	; 0x183c <usart_init_rs232+0x1a0>
    1834:	60 e1       	ldi	r22, 0x10	; 16
    1836:	86 e0       	ldi	r24, 0x06	; 6
    1838:	30 d8       	rcall	.-4000   	; 0x89a <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    183a:	1f c0       	rjmp	.+62     	; 0x187a <usart_init_rs232+0x1de>
    183c:	c0 3b       	cpi	r28, 0xB0	; 176
    183e:	88 e0       	ldi	r24, 0x08	; 8
    1840:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1842:	21 f4       	brne	.+8      	; 0x184c <usart_init_rs232+0x1b0>
    1844:	60 e2       	ldi	r22, 0x20	; 32
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	28 d8       	rcall	.-4016   	; 0x89a <sysclk_enable_module>
    184a:	17 c0       	rjmp	.+46     	; 0x187a <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    184c:	c0 3b       	cpi	r28, 0xB0	; 176
    184e:	e9 e0       	ldi	r30, 0x09	; 9
    1850:	de 07       	cpc	r29, r30
    1852:	21 f4       	brne	.+8      	; 0x185c <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1854:	60 e2       	ldi	r22, 0x20	; 32
    1856:	84 e0       	ldi	r24, 0x04	; 4
    1858:	20 d8       	rcall	.-4032   	; 0x89a <sysclk_enable_module>
    185a:	0f c0       	rjmp	.+30     	; 0x187a <usart_init_rs232+0x1de>
    185c:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    185e:	f4 e0       	ldi	r31, 0x04	; 4
    1860:	df 07       	cpc	r29, r31
    1862:	21 f4       	brne	.+8      	; 0x186c <usart_init_rs232+0x1d0>
    1864:	60 e4       	ldi	r22, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	18 d8       	rcall	.-4048   	; 0x89a <sysclk_enable_module>
    186a:	07 c0       	rjmp	.+14     	; 0x187a <usart_init_rs232+0x1de>
    186c:	c0 3a       	cpi	r28, 0xA0	; 160
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	d8 07       	cpc	r29, r24
    1872:	19 f4       	brne	.+6      	; 0x187a <usart_init_rs232+0x1de>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1874:	60 e4       	ldi	r22, 0x40	; 64
    1876:	85 e0       	ldi	r24, 0x05	; 5
    1878:	10 d8       	rcall	.-4064   	; 0x89a <sysclk_enable_module>
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	8f 73       	andi	r24, 0x3F	; 63
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	f8 01       	movw	r30, r16
    1882:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1884:	84 81       	ldd	r24, Z+4	; 0x04
    1886:	89 2b       	or	r24, r25
    1888:	96 81       	ldd	r25, Z+6	; 0x06
    188a:	91 11       	cpse	r25, r1
    188c:	98 e0       	ldi	r25, 0x08	; 8
    188e:	89 2b       	or	r24, r25
    1890:	8d 83       	std	Y+5, r24	; 0x05
    1892:	f8 01       	movw	r30, r16
    1894:	40 81       	ld	r20, Z
    1896:	51 81       	ldd	r21, Z+1	; 0x01
    1898:	62 81       	ldd	r22, Z+2	; 0x02
    189a:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    189c:	00 e8       	ldi	r16, 0x80	; 128
    189e:	14 e8       	ldi	r17, 0x84	; 132
    18a0:	2e e1       	ldi	r18, 0x1E	; 30
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	ce 01       	movw	r24, r28
    18a6:	e7 dd       	rcall	.-1074   	; 0x1476 <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	98 60       	ori	r25, 0x08	; 8
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	90 61       	ori	r25, 0x10	; 16
    18b2:	9c 83       	std	Y+4, r25	; 0x04
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    18d0:	d9 01       	movw	r26, r18
    18d2:	c8 01       	movw	r24, r16
    18d4:	b6 95       	lsr	r27
    18d6:	a7 95       	ror	r26
    18d8:	97 95       	ror	r25
    18da:	87 95       	ror	r24
    18dc:	48 17       	cp	r20, r24
    18de:	59 07       	cpc	r21, r25
    18e0:	6a 07       	cpc	r22, r26
    18e2:	7b 07       	cpc	r23, r27
    18e4:	78 f4       	brcc	.+30     	; 0x1904 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    18e6:	6a 01       	movw	r12, r20
    18e8:	7b 01       	movw	r14, r22
    18ea:	cc 0c       	add	r12, r12
    18ec:	dd 1c       	adc	r13, r13
    18ee:	ee 1c       	adc	r14, r14
    18f0:	ff 1c       	adc	r15, r15
    18f2:	c9 01       	movw	r24, r18
    18f4:	b8 01       	movw	r22, r16
    18f6:	a7 01       	movw	r20, r14
    18f8:	96 01       	movw	r18, r12
    18fa:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodsi4>
    18fe:	21 50       	subi	r18, 0x01	; 1
    1900:	31 09       	sbc	r19, r1
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1908:	83 2f       	mov	r24, r19
    190a:	8f 70       	andi	r24, 0x0F	; 15
    190c:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    190e:	2e 83       	std	Y+6, r18	; 0x06
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	08 95       	ret

00001922 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1922:	ef 92       	push	r14
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	ec 01       	movw	r28, r24
    1930:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	09 f4       	brne	.+2      	; 0x1938 <usart_init_spi+0x16>
    1936:	98 c1       	rjmp	.+816    	; 0x1c68 <usart_init_spi+0x346>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1938:	80 3c       	cpi	r24, 0xC0	; 192
    193a:	91 05       	cpc	r25, r1
    193c:	29 f4       	brne	.+10     	; 0x1948 <usart_init_spi+0x26>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    193e:	60 e1       	ldi	r22, 0x10	; 16
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1946:	90 c1       	rjmp	.+800    	; 0x1c68 <usart_init_spi+0x346>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1948:	80 38       	cpi	r24, 0x80	; 128
    194a:	91 40       	sbci	r25, 0x01	; 1
    194c:	29 f4       	brne	.+10     	; 0x1958 <usart_init_spi+0x36>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    194e:	62 e0       	ldi	r22, 0x02	; 2
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1956:	88 c1       	rjmp	.+784    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1958:	c1 15       	cp	r28, r1
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	d8 07       	cpc	r29, r24
    195e:	29 f4       	brne	.+10     	; 0x196a <usart_init_spi+0x48>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1968:	7f c1       	rjmp	.+766    	; 0x1c68 <usart_init_spi+0x346>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    196a:	c0 38       	cpi	r28, 0x80	; 128
    196c:	e3 e0       	ldi	r30, 0x03	; 3
    196e:	de 07       	cpc	r29, r30
    1970:	29 f4       	brne	.+10     	; 0x197c <usart_init_spi+0x5a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    197a:	76 c1       	rjmp	.+748    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    197c:	c0 39       	cpi	r28, 0x90	; 144
    197e:	f3 e0       	ldi	r31, 0x03	; 3
    1980:	df 07       	cpc	r29, r31
    1982:	29 f4       	brne	.+10     	; 0x198e <usart_init_spi+0x6c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    198c:	6d c1       	rjmp	.+730    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    198e:	c1 15       	cp	r28, r1
    1990:	32 e0       	ldi	r19, 0x02	; 2
    1992:	d3 07       	cpc	r29, r19
    1994:	29 f4       	brne	.+10     	; 0x19a0 <usart_init_spi+0x7e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    199e:	64 c1       	rjmp	.+712    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    19a0:	c0 34       	cpi	r28, 0x40	; 64
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	d8 07       	cpc	r29, r24
    19a6:	29 f4       	brne	.+10     	; 0x19b2 <usart_init_spi+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    19b0:	5b c1       	rjmp	.+694    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    19b2:	c0 32       	cpi	r28, 0x20	; 32
    19b4:	e3 e0       	ldi	r30, 0x03	; 3
    19b6:	de 07       	cpc	r29, r30
    19b8:	29 f4       	brne	.+10     	; 0x19c4 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    19ba:	64 e0       	ldi	r22, 0x04	; 4
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    19c2:	52 c1       	rjmp	.+676    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    19c4:	c1 15       	cp	r28, r1
    19c6:	f8 e0       	ldi	r31, 0x08	; 8
    19c8:	df 07       	cpc	r29, r31
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <usart_init_spi+0xb4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    19d4:	49 c1       	rjmp	.+658    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    19d6:	c1 15       	cp	r28, r1
    19d8:	39 e0       	ldi	r19, 0x09	; 9
    19da:	d3 07       	cpc	r29, r19
    19dc:	29 f4       	brne	.+10     	; 0x19e8 <usart_init_spi+0xc6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	84 e0       	ldi	r24, 0x04	; 4
    19e2:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    19e6:	40 c1       	rjmp	.+640    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    19e8:	c1 15       	cp	r28, r1
    19ea:	8a e0       	ldi	r24, 0x0A	; 10
    19ec:	d8 07       	cpc	r29, r24
    19ee:	29 f4       	brne	.+10     	; 0x19fa <usart_init_spi+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	85 e0       	ldi	r24, 0x05	; 5
    19f4:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    19f8:	37 c1       	rjmp	.+622    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    19fa:	c1 15       	cp	r28, r1
    19fc:	eb e0       	ldi	r30, 0x0B	; 11
    19fe:	de 07       	cpc	r29, r30
    1a00:	29 f4       	brne	.+10     	; 0x1a0c <usart_init_spi+0xea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	86 e0       	ldi	r24, 0x06	; 6
    1a06:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a0a:	2e c1       	rjmp	.+604    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1a0c:	c0 34       	cpi	r28, 0x40	; 64
    1a0e:	f8 e0       	ldi	r31, 0x08	; 8
    1a10:	df 07       	cpc	r29, r31
    1a12:	29 f4       	brne	.+10     	; 0x1a1e <usart_init_spi+0xfc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a14:	62 e0       	ldi	r22, 0x02	; 2
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a1c:	25 c1       	rjmp	.+586    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1a1e:	c0 34       	cpi	r28, 0x40	; 64
    1a20:	39 e0       	ldi	r19, 0x09	; 9
    1a22:	d3 07       	cpc	r29, r19
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <usart_init_spi+0x10e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	84 e0       	ldi	r24, 0x04	; 4
    1a2a:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a2e:	1c c1       	rjmp	.+568    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1a30:	c0 34       	cpi	r28, 0x40	; 64
    1a32:	8a e0       	ldi	r24, 0x0A	; 10
    1a34:	d8 07       	cpc	r29, r24
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <usart_init_spi+0x120>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1a38:	62 e0       	ldi	r22, 0x02	; 2
    1a3a:	85 e0       	ldi	r24, 0x05	; 5
    1a3c:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a40:	13 c1       	rjmp	.+550    	; 0x1c68 <usart_init_spi+0x346>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1a42:	c0 39       	cpi	r28, 0x90	; 144
    1a44:	e8 e0       	ldi	r30, 0x08	; 8
    1a46:	de 07       	cpc	r29, r30
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <usart_init_spi+0x132>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a4a:	64 e0       	ldi	r22, 0x04	; 4
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a52:	0a c1       	rjmp	.+532    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1a54:	c0 39       	cpi	r28, 0x90	; 144
    1a56:	f9 e0       	ldi	r31, 0x09	; 9
    1a58:	df 07       	cpc	r29, r31
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <usart_init_spi+0x144>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a5c:	64 e0       	ldi	r22, 0x04	; 4
    1a5e:	84 e0       	ldi	r24, 0x04	; 4
    1a60:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a64:	01 c1       	rjmp	.+514    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1a66:	c0 39       	cpi	r28, 0x90	; 144
    1a68:	3a e0       	ldi	r19, 0x0A	; 10
    1a6a:	d3 07       	cpc	r29, r19
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <usart_init_spi+0x156>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	85 e0       	ldi	r24, 0x05	; 5
    1a72:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a76:	f8 c0       	rjmp	.+496    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1a78:	c0 39       	cpi	r28, 0x90	; 144
    1a7a:	8b e0       	ldi	r24, 0x0B	; 11
    1a7c:	d8 07       	cpc	r29, r24
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <usart_init_spi+0x168>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1a80:	64 e0       	ldi	r22, 0x04	; 4
    1a82:	86 e0       	ldi	r24, 0x06	; 6
    1a84:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a88:	ef c0       	rjmp	.+478    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1a8a:	c0 3c       	cpi	r28, 0xC0	; 192
    1a8c:	e8 e0       	ldi	r30, 0x08	; 8
    1a8e:	de 07       	cpc	r29, r30
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <usart_init_spi+0x17a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1a92:	68 e0       	ldi	r22, 0x08	; 8
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1a9a:	e6 c0       	rjmp	.+460    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1a9c:	c0 3c       	cpi	r28, 0xC0	; 192
    1a9e:	f9 e0       	ldi	r31, 0x09	; 9
    1aa0:	df 07       	cpc	r29, r31
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <usart_init_spi+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1aa4:	68 e0       	ldi	r22, 0x08	; 8
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1aac:	dd c0       	rjmp	.+442    	; 0x1c68 <usart_init_spi+0x346>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1aae:	c0 3a       	cpi	r28, 0xA0	; 160
    1ab0:	38 e0       	ldi	r19, 0x08	; 8
    1ab2:	d3 07       	cpc	r29, r19
    1ab4:	69 f4       	brne	.+26     	; 0x1ad0 <usart_init_spi+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1ab6:	60 e1       	ldi	r22, 0x10	; 16
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1abe:	e0 ea       	ldi	r30, 0xA0	; 160
    1ac0:	f8 e0       	ldi	r31, 0x08	; 8
    1ac2:	84 81       	ldd	r24, Z+4	; 0x04
    1ac4:	8f 7e       	andi	r24, 0xEF	; 239
    1ac6:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1ac8:	f7 01       	movw	r30, r14
    1aca:	24 81       	ldd	r18, Z+4	; 0x04
    1acc:	22 50       	subi	r18, 0x02	; 2
    1ace:	4a c0       	rjmp	.+148    	; 0x1b64 <usart_init_spi+0x242>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1ad0:	c0 3a       	cpi	r28, 0xA0	; 160
    1ad2:	f9 e0       	ldi	r31, 0x09	; 9
    1ad4:	df 07       	cpc	r29, r31
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <usart_init_spi+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1ad8:	60 e1       	ldi	r22, 0x10	; 16
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1ae0:	c3 c0       	rjmp	.+390    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1ae2:	c0 3a       	cpi	r28, 0xA0	; 160
    1ae4:	3a e0       	ldi	r19, 0x0A	; 10
    1ae6:	d3 07       	cpc	r29, r19
    1ae8:	29 f4       	brne	.+10     	; 0x1af4 <usart_init_spi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1aea:	60 e1       	ldi	r22, 0x10	; 16
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1af2:	ba c0       	rjmp	.+372    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1af4:	c0 3a       	cpi	r28, 0xA0	; 160
    1af6:	8b e0       	ldi	r24, 0x0B	; 11
    1af8:	d8 07       	cpc	r29, r24
    1afa:	29 f4       	brne	.+10     	; 0x1b06 <usart_init_spi+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1afc:	60 e1       	ldi	r22, 0x10	; 16
    1afe:	86 e0       	ldi	r24, 0x06	; 6
    1b00:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1b04:	b1 c0       	rjmp	.+354    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1b06:	c0 3b       	cpi	r28, 0xB0	; 176
    1b08:	e8 e0       	ldi	r30, 0x08	; 8
    1b0a:	de 07       	cpc	r29, r30
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <usart_init_spi+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1b0e:	60 e2       	ldi	r22, 0x20	; 32
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1b16:	a8 c0       	rjmp	.+336    	; 0x1c68 <usart_init_spi+0x346>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1b18:	c0 3b       	cpi	r28, 0xB0	; 176
    1b1a:	f9 e0       	ldi	r31, 0x09	; 9
    1b1c:	df 07       	cpc	r29, r31
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <usart_init_spi+0x208>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1b20:	60 e2       	ldi	r22, 0x20	; 32
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1b28:	9f c0       	rjmp	.+318    	; 0x1c68 <usart_init_spi+0x346>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1b2a:	c0 38       	cpi	r28, 0x80	; 128
    1b2c:	34 e0       	ldi	r19, 0x04	; 4
    1b2e:	d3 07       	cpc	r29, r19
    1b30:	29 f4       	brne	.+10     	; 0x1b3c <usart_init_spi+0x21a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1b32:	60 e4       	ldi	r22, 0x40	; 64
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1b3a:	96 c0       	rjmp	.+300    	; 0x1c68 <usart_init_spi+0x346>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1b3c:	c0 3a       	cpi	r28, 0xA0	; 160
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	d8 07       	cpc	r29, r24
    1b42:	29 f4       	brne	.+10     	; 0x1b4e <usart_init_spi+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1b44:	60 e4       	ldi	r22, 0x40	; 64
    1b46:	85 e0       	ldi	r24, 0x05	; 5
    1b48:	0e 94 4d 04 	call	0x89a	; 0x89a <sysclk_enable_module>
    1b4c:	8d c0       	rjmp	.+282    	; 0x1c68 <usart_init_spi+0x346>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	8f 7e       	andi	r24, 0xEF	; 239
    1b52:	8c 83       	std	Y+4, r24	; 0x04
    1b54:	fb 01       	movw	r30, r22
    1b56:	24 81       	ldd	r18, Z+4	; 0x04
    1b58:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	c0 3a       	cpi	r28, 0xA0	; 160
    1b5e:	f8 e0       	ldi	r31, 0x08	; 8
    1b60:	df 07       	cpc	r29, r31
    1b62:	31 f4       	brne	.+12     	; 0x1b70 <usart_init_spi+0x24e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1b64:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1b68:	84 fd       	sbrc	r24, 4
    1b6a:	86 c0       	rjmp	.+268    	; 0x1c78 <usart_init_spi+0x356>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1b6c:	11 e1       	ldi	r17, 0x11	; 17
    1b6e:	85 c0       	rjmp	.+266    	; 0x1c7a <usart_init_spi+0x358>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1b70:	80 3b       	cpi	r24, 0xB0	; 176
    1b72:	38 e0       	ldi	r19, 0x08	; 8
    1b74:	93 07       	cpc	r25, r19
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <usart_init_spi+0x274>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1b78:	80 3a       	cpi	r24, 0xA0	; 160
    1b7a:	e9 e0       	ldi	r30, 0x09	; 9
    1b7c:	9e 07       	cpc	r25, r30
    1b7e:	31 f4       	brne	.+12     	; 0x1b8c <usart_init_spi+0x26a>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1b80:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1b84:	34 fd       	sbrc	r19, 4
    1b86:	7c c0       	rjmp	.+248    	; 0x1c80 <usart_init_spi+0x35e>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1b88:	19 e1       	ldi	r17, 0x19	; 25
    1b8a:	10 c0       	rjmp	.+32     	; 0x1bac <usart_init_spi+0x28a>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1b8c:	80 3b       	cpi	r24, 0xB0	; 176
    1b8e:	f9 e0       	ldi	r31, 0x09	; 9
    1b90:	9f 07       	cpc	r25, r31
    1b92:	a9 f0       	breq	.+42     	; 0x1bbe <usart_init_spi+0x29c>
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <usart_init_spi+0x276>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1b96:	15 e1       	ldi	r17, 0x15	; 21
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1b98:	80 3a       	cpi	r24, 0xA0	; 160
    1b9a:	3a e0       	ldi	r19, 0x0A	; 10
    1b9c:	93 07       	cpc	r25, r19
    1b9e:	31 f4       	brne	.+12     	; 0x1bac <usart_init_spi+0x28a>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1ba0:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1ba4:	84 fd       	sbrc	r24, 4
    1ba6:	6e c0       	rjmp	.+220    	; 0x1c84 <usart_init_spi+0x362>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1ba8:	11 e2       	ldi	r17, 0x21	; 33
    1baa:	0c c0       	rjmp	.+24     	; 0x1bc4 <usart_init_spi+0x2a2>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1bac:	80 3a       	cpi	r24, 0xA0	; 160
    1bae:	9b 40       	sbci	r25, 0x0B	; 11
    1bb0:	49 f4       	brne	.+18     	; 0x1bc4 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1bb2:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1bb6:	84 fd       	sbrc	r24, 4
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <usart_init_spi+0x2a0>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1bba:	19 e2       	ldi	r17, 0x29	; 41
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <usart_init_spi+0x2a2>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1bbe:	1d e1       	ldi	r17, 0x1D	; 29
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <usart_init_spi+0x2a2>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1bc2:	1d e2       	ldi	r17, 0x2D	; 45
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1bc4:	e1 2f       	mov	r30, r17
    1bc6:	e6 95       	lsr	r30
    1bc8:	e6 95       	lsr	r30
    1bca:	e6 95       	lsr	r30
    1bcc:	30 e2       	ldi	r19, 0x20	; 32
    1bce:	e3 9f       	mul	r30, r19
    1bd0:	f0 01       	movw	r30, r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	fa 5f       	subi	r31, 0xFA	; 250
    1bd6:	17 70       	andi	r17, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	01 2e       	mov	r0, r17
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <usart_init_spi+0x2c2>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <usart_init_spi+0x2be>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1be8:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	10 f0       	brcs	.+4      	; 0x1bf2 <usart_init_spi+0x2d0>
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <usart_init_spi+0x2d2>
    1bf2:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1bf4:	df 01       	movw	r26, r30
    1bf6:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1bf8:	a1 0f       	add	r26, r17
    1bfa:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bfc:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    1bfe:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1c00:	2c 91       	ld	r18, X
    1c02:	27 70       	andi	r18, 0x07	; 7
    1c04:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1c06:	9c 91       	ld	r25, X
    1c08:	94 2b       	or	r25, r20
    1c0a:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c0c:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c0e:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	80 6c       	ori	r24, 0xC0	; 192
    1c14:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1c16:	f7 01       	movw	r30, r14
    1c18:	84 81       	ldd	r24, Z+4	; 0x04
    1c1a:	8d 7f       	andi	r24, 0xFD	; 253
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	21 f4       	brne	.+8      	; 0x1c28 <usart_init_spi+0x306>
		usart->CTRLC |= USART_UCPHA_bm;
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <usart_init_spi+0x30c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	8d 7f       	andi	r24, 0xFD	; 253
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    1c2e:	f7 01       	movw	r30, r14
    1c30:	85 81       	ldd	r24, Z+5	; 0x05
    1c32:	88 23       	and	r24, r24
    1c34:	21 f0       	breq	.+8      	; 0x1c3e <usart_init_spi+0x31c>
		(usart)->CTRLC |= USART_DORD_bm;
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <usart_init_spi+0x322>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	8b 7f       	andi	r24, 0xFB	; 251
    1c42:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1c44:	f7 01       	movw	r30, r14
    1c46:	40 81       	ld	r20, Z
    1c48:	51 81       	ldd	r21, Z+1	; 0x01
    1c4a:	62 81       	ldd	r22, Z+2	; 0x02
    1c4c:	73 81       	ldd	r23, Z+3	; 0x03
    1c4e:	00 e8       	ldi	r16, 0x80	; 128
    1c50:	14 e8       	ldi	r17, 0x84	; 132
    1c52:	2e e1       	ldi	r18, 0x1E	; 30
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	ce 01       	movw	r24, r28
    1c58:	32 de       	rcall	.-924    	; 0x18be <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	88 60       	ori	r24, 0x08	; 8
    1c5e:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	80 61       	ori	r24, 0x10	; 16
    1c64:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1c66:	10 c0       	rjmp	.+32     	; 0x1c88 <usart_init_spi+0x366>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	8f 7e       	andi	r24, 0xEF	; 239
    1c6c:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1c6e:	f7 01       	movw	r30, r14
    1c70:	24 81       	ldd	r18, Z+4	; 0x04
    1c72:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1c74:	ce 01       	movw	r24, r28
    1c76:	7c cf       	rjmp	.-264    	; 0x1b70 <usart_init_spi+0x24e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1c78:	15 e1       	ldi	r17, 0x15	; 21
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1c7a:	80 ea       	ldi	r24, 0xA0	; 160
    1c7c:	98 e0       	ldi	r25, 0x08	; 8
    1c7e:	86 cf       	rjmp	.-244    	; 0x1b8c <usart_init_spi+0x26a>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1c80:	1d e1       	ldi	r17, 0x1D	; 29
    1c82:	94 cf       	rjmp	.-216    	; 0x1bac <usart_init_spi+0x28a>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1c84:	15 e2       	ldi	r17, 0x25	; 37
    1c86:	9e cf       	rjmp	.-196    	; 0x1bc4 <usart_init_spi+0x2a2>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	08 95       	ret

00001c96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1c96:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1c98:	03 96       	adiw	r24, 0x03	; 3
    1c9a:	81 83       	std	Z+1, r24	; 0x01
    1c9c:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1c9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	23 83       	std	Z+3, r18	; 0x03
    1ca4:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ca6:	85 83       	std	Z+5, r24	; 0x05
    1ca8:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1caa:	87 83       	std	Z+7, r24	; 0x07
    1cac:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1cae:	10 82       	st	Z, r1
    1cb0:	08 95       	ret

00001cb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	10 86       	std	Z+8, r1	; 0x08
    1cb6:	11 86       	std	Z+9, r1	; 0x09
    1cb8:	08 95       	ret

00001cba <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	9c 01       	movw	r18, r24
    1cc0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	cd 91       	ld	r28, X+
    1cc8:	dc 91       	ld	r29, X
    1cca:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1ccc:	c2 83       	std	Z+2, r28	; 0x02
    1cce:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd4:	84 83       	std	Z+4, r24	; 0x04
    1cd6:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	dc 01       	movw	r26, r24
    1cde:	12 96       	adiw	r26, 0x02	; 2
    1ce0:	6d 93       	st	X+, r22
    1ce2:	7c 93       	st	X, r23
    1ce4:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    1ce6:	6c 83       	std	Y+4, r22	; 0x04
    1ce8:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1cea:	20 87       	std	Z+8, r18	; 0x08
    1cec:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    1cee:	f9 01       	movw	r30, r18
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	80 83       	st	Z, r24
}
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	08 95       	ret

00001cfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1d02:	48 81       	ld	r20, Y
    1d04:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1d06:	4f 3f       	cpi	r20, 0xFF	; 255
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	52 07       	cpc	r21, r18
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1d0e:	fc 01       	movw	r30, r24
    1d10:	a7 81       	ldd	r26, Z+7	; 0x07
    1d12:	b0 85       	ldd	r27, Z+8	; 0x08
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d16:	dc 01       	movw	r26, r24
    1d18:	13 96       	adiw	r26, 0x03	; 3
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <vListInsert+0x22>
    1d1c:	df 01       	movw	r26, r30
    1d1e:	12 96       	adiw	r26, 0x02	; 2
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	13 97       	sbiw	r26, 0x03	; 3
    1d26:	20 81       	ld	r18, Z
    1d28:	31 81       	ldd	r19, Z+1	; 0x01
    1d2a:	42 17       	cp	r20, r18
    1d2c:	53 07       	cpc	r21, r19
    1d2e:	b0 f7       	brcc	.-20     	; 0x1d1c <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1d30:	12 96       	adiw	r26, 0x02	; 2
    1d32:	ed 91       	ld	r30, X+
    1d34:	fc 91       	ld	r31, X
    1d36:	13 97       	sbiw	r26, 0x03	; 3
    1d38:	ea 83       	std	Y+2, r30	; 0x02
    1d3a:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1d3c:	c4 83       	std	Z+4, r28	; 0x04
    1d3e:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    1d40:	ac 83       	std	Y+4, r26	; 0x04
    1d42:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    1d44:	12 96       	adiw	r26, 0x02	; 2
    1d46:	cd 93       	st	X+, r28
    1d48:	dc 93       	st	X, r29
    1d4a:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1d4c:	88 87       	std	Y+8, r24	; 0x08
    1d4e:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 81       	ld	r18, Z
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	20 83       	st	Z, r18
}
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	08 95       	ret

00001d5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1d64:	a0 85       	ldd	r26, Z+8	; 0x08
    1d66:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1d68:	c2 81       	ldd	r28, Z+2	; 0x02
    1d6a:	d3 81       	ldd	r29, Z+3	; 0x03
    1d6c:	84 81       	ldd	r24, Z+4	; 0x04
    1d6e:	95 81       	ldd	r25, Z+5	; 0x05
    1d70:	8c 83       	std	Y+4, r24	; 0x04
    1d72:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1d74:	c4 81       	ldd	r28, Z+4	; 0x04
    1d76:	d5 81       	ldd	r29, Z+5	; 0x05
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
    1d7e:	9b 83       	std	Y+3, r25	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1d80:	11 96       	adiw	r26, 0x01	; 1
    1d82:	8d 91       	ld	r24, X+
    1d84:	9c 91       	ld	r25, X
    1d86:	12 97       	sbiw	r26, 0x02	; 2
    1d88:	e8 17       	cp	r30, r24
    1d8a:	f9 07       	cpc	r31, r25
    1d8c:	31 f4       	brne	.+12     	; 0x1d9a <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1d8e:	84 81       	ldd	r24, Z+4	; 0x04
    1d90:	95 81       	ldd	r25, Z+5	; 0x05
    1d92:	11 96       	adiw	r26, 0x01	; 1
    1d94:	8d 93       	st	X+, r24
    1d96:	9c 93       	st	X, r25
    1d98:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1d9a:	10 86       	std	Z+8, r1	; 0x08
    1d9c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1d9e:	8c 91       	ld	r24, X
    1da0:	81 50       	subi	r24, 0x01	; 1
    1da2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    1db0:	71 e1       	ldi	r23, 0x11	; 17
    1db2:	fc 01       	movw	r30, r24
    1db4:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    1db6:	31 97       	sbiw	r30, 0x01	; 1
    1db8:	62 e2       	ldi	r22, 0x22	; 34
    1dba:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    1dbc:	31 97       	sbiw	r30, 0x01	; 1
    1dbe:	23 e3       	ldi	r18, 0x33	; 51
    1dc0:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    1dc2:	01 2e       	mov	r0, r17
    1dc4:	00 0c       	add	r0, r0
    1dc6:	22 0b       	sbc	r18, r18
    1dc8:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1dca:	31 97       	sbiw	r30, 0x01	; 1
    1dcc:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1dce:	31 97       	sbiw	r30, 0x01	; 1
    1dd0:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1dd2:	31 97       	sbiw	r30, 0x01	; 1
    1dd4:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    1dd6:	31 97       	sbiw	r30, 0x01	; 1
    1dd8:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    1dda:	31 97       	sbiw	r30, 0x01	; 1
    1ddc:	20 e8       	ldi	r18, 0x80	; 128
    1dde:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    1de0:	31 97       	sbiw	r30, 0x01	; 1
    1de2:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    1de4:	31 97       	sbiw	r30, 0x01	; 1
    1de6:	22 e0       	ldi	r18, 0x02	; 2
    1de8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    1dea:	31 97       	sbiw	r30, 0x01	; 1
    1dec:	23 e0       	ldi	r18, 0x03	; 3
    1dee:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    1df0:	31 97       	sbiw	r30, 0x01	; 1
    1df2:	24 e0       	ldi	r18, 0x04	; 4
    1df4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    1df6:	31 97       	sbiw	r30, 0x01	; 1
    1df8:	25 e0       	ldi	r18, 0x05	; 5
    1dfa:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    1dfc:	31 97       	sbiw	r30, 0x01	; 1
    1dfe:	26 e0       	ldi	r18, 0x06	; 6
    1e00:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    1e02:	31 97       	sbiw	r30, 0x01	; 1
    1e04:	27 e0       	ldi	r18, 0x07	; 7
    1e06:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    1e08:	31 97       	sbiw	r30, 0x01	; 1
    1e0a:	28 e0       	ldi	r18, 0x08	; 8
    1e0c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    1e0e:	31 97       	sbiw	r30, 0x01	; 1
    1e10:	29 e0       	ldi	r18, 0x09	; 9
    1e12:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    1e14:	31 97       	sbiw	r30, 0x01	; 1
    1e16:	20 e1       	ldi	r18, 0x10	; 16
    1e18:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    1e1a:	31 97       	sbiw	r30, 0x01	; 1
    1e1c:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    1e1e:	31 97       	sbiw	r30, 0x01	; 1
    1e20:	22 e1       	ldi	r18, 0x12	; 18
    1e22:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    1e24:	31 97       	sbiw	r30, 0x01	; 1
    1e26:	23 e1       	ldi	r18, 0x13	; 19
    1e28:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    1e2a:	31 97       	sbiw	r30, 0x01	; 1
    1e2c:	24 e1       	ldi	r18, 0x14	; 20
    1e2e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    1e30:	31 97       	sbiw	r30, 0x01	; 1
    1e32:	25 e1       	ldi	r18, 0x15	; 21
    1e34:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    1e36:	31 97       	sbiw	r30, 0x01	; 1
    1e38:	26 e1       	ldi	r18, 0x16	; 22
    1e3a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    1e3c:	31 97       	sbiw	r30, 0x01	; 1
    1e3e:	27 e1       	ldi	r18, 0x17	; 23
    1e40:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    1e42:	31 97       	sbiw	r30, 0x01	; 1
    1e44:	28 e1       	ldi	r18, 0x18	; 24
    1e46:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    1e48:	31 97       	sbiw	r30, 0x01	; 1
    1e4a:	29 e1       	ldi	r18, 0x19	; 25
    1e4c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    1e4e:	31 97       	sbiw	r30, 0x01	; 1
    1e50:	20 e2       	ldi	r18, 0x20	; 32
    1e52:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    1e54:	31 97       	sbiw	r30, 0x01	; 1
    1e56:	21 e2       	ldi	r18, 0x21	; 33
    1e58:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    1e5a:	31 97       	sbiw	r30, 0x01	; 1
    1e5c:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    1e5e:	31 97       	sbiw	r30, 0x01	; 1
    1e60:	23 e2       	ldi	r18, 0x23	; 35
    1e62:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    1e64:	31 97       	sbiw	r30, 0x01	; 1
    1e66:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    1e68:	31 97       	sbiw	r30, 0x01	; 1
    1e6a:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    1e6c:	31 97       	sbiw	r30, 0x01	; 1
    1e6e:	26 e2       	ldi	r18, 0x26	; 38
    1e70:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    1e72:	31 97       	sbiw	r30, 0x01	; 1
    1e74:	27 e2       	ldi	r18, 0x27	; 39
    1e76:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    1e78:	31 97       	sbiw	r30, 0x01	; 1
    1e7a:	28 e2       	ldi	r18, 0x28	; 40
    1e7c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    1e7e:	31 97       	sbiw	r30, 0x01	; 1
    1e80:	29 e2       	ldi	r18, 0x29	; 41
    1e82:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    1e84:	31 97       	sbiw	r30, 0x01	; 1
    1e86:	20 e3       	ldi	r18, 0x30	; 48
    1e88:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    1e8a:	31 97       	sbiw	r30, 0x01	; 1
    1e8c:	21 e3       	ldi	r18, 0x31	; 49
    1e8e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    1e90:	87 97       	sbiw	r24, 0x27	; 39
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	08 95       	ret

00001e98 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    1e98:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    1e9a:	e0 e7       	ldi	r30, 0x70	; 112
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	83 81       	ldd	r24, Z+3	; 0x03
    1ea0:	8a 7f       	andi	r24, 0xFA	; 250
    1ea2:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    1ea4:	e0 e0       	ldi	r30, 0x00	; 0
    1ea6:	f8 e0       	ldi	r31, 0x08	; 8
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	9a ef       	ldi	r25, 0xFA	; 250
    1eac:	86 a3       	std	Z+38, r24	; 0x26
    1eae:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1eb4:	a0 ea       	ldi	r26, 0xA0	; 160
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	8c 91       	ld	r24, X
    1ebc:	12 97       	sbiw	r26, 0x02	; 2
    1ebe:	81 60       	ori	r24, 0x01	; 1
    1ec0:	12 96       	adiw	r26, 0x02	; 2
    1ec2:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    1ec4:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    1ec6:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1ec8:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <pxCurrentTCB>
    1ecc:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    1ed0:	0d 90       	ld	r0, X+
    1ed2:	0d be       	out	0x3d, r0	; 61
    1ed4:	0d 90       	ld	r0, X+
    1ed6:	0e be       	out	0x3e, r0	; 62
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	cf 90       	pop	r12
    1f00:	bf 90       	pop	r11
    1f02:	af 90       	pop	r10
    1f04:	9f 90       	pop	r9
    1f06:	8f 90       	pop	r8
    1f08:	7f 90       	pop	r7
    1f0a:	6f 90       	pop	r6
    1f0c:	5f 90       	pop	r5
    1f0e:	4f 90       	pop	r4
    1f10:	3f 90       	pop	r3
    1f12:	2f 90       	pop	r2
    1f14:	1f 90       	pop	r1
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    1f1c:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	08 95       	ret

00001f22 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    1f22:	0f 92       	push	r0
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	0f 92       	push	r0
    1f2a:	1f 92       	push	r1
    1f2c:	11 24       	eor	r1, r1
    1f2e:	2f 92       	push	r2
    1f30:	3f 92       	push	r3
    1f32:	4f 92       	push	r4
    1f34:	5f 92       	push	r5
    1f36:	6f 92       	push	r6
    1f38:	7f 92       	push	r7
    1f3a:	8f 92       	push	r8
    1f3c:	9f 92       	push	r9
    1f3e:	af 92       	push	r10
    1f40:	bf 92       	push	r11
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	2f 93       	push	r18
    1f50:	3f 93       	push	r19
    1f52:	4f 93       	push	r20
    1f54:	5f 93       	push	r21
    1f56:	6f 93       	push	r22
    1f58:	7f 93       	push	r23
    1f5a:	8f 93       	push	r24
    1f5c:	9f 93       	push	r25
    1f5e:	af 93       	push	r26
    1f60:	bf 93       	push	r27
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	ef 93       	push	r30
    1f68:	ff 93       	push	r31
    1f6a:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <pxCurrentTCB>
    1f6e:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    1f72:	0d b6       	in	r0, 0x3d	; 61
    1f74:	0d 92       	st	X+, r0
    1f76:	0e b6       	in	r0, 0x3e	; 62
    vTaskSwitchContext();
    1f78:	0d 92       	st	X+, r0
    portRESTORE_CONTEXT();
    1f7a:	0e d6       	rcall	.+3100   	; 0x2b98 <vTaskSwitchContext>
    1f7c:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <pxCurrentTCB>
    1f80:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    1f84:	0d 90       	ld	r0, X+
    1f86:	0d be       	out	0x3d, r0	; 61
    1f88:	0d 90       	ld	r0, X+
    1f8a:	0e be       	out	0x3e, r0	; 62
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	bf 91       	pop	r27
    1f96:	af 91       	pop	r26
    1f98:	9f 91       	pop	r25
    1f9a:	8f 91       	pop	r24
    1f9c:	7f 91       	pop	r23
    1f9e:	6f 91       	pop	r22
    1fa0:	5f 91       	pop	r21
    1fa2:	4f 91       	pop	r20
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	ff 90       	pop	r15
    1fae:	ef 90       	pop	r14
    1fb0:	df 90       	pop	r13
    1fb2:	cf 90       	pop	r12
    1fb4:	bf 90       	pop	r11
    1fb6:	af 90       	pop	r10
    1fb8:	9f 90       	pop	r9
    1fba:	8f 90       	pop	r8
    1fbc:	7f 90       	pop	r7
    1fbe:	6f 90       	pop	r6
    1fc0:	5f 90       	pop	r5
    1fc2:	4f 90       	pop	r4
    1fc4:	3f 90       	pop	r3
    1fc6:	2f 90       	pop	r2
    1fc8:	1f 90       	pop	r1
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63

    asm volatile ( "ret" );
    1fce:	0f 90       	pop	r0
    1fd0:	08 95       	ret

00001fd2 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    1fd2:	0f 92       	push	r0
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	0f 92       	push	r0
    1fda:	1f 92       	push	r1
    1fdc:	11 24       	eor	r1, r1
    1fde:	2f 92       	push	r2
    1fe0:	3f 92       	push	r3
    1fe2:	4f 92       	push	r4
    1fe4:	5f 92       	push	r5
    1fe6:	6f 92       	push	r6
    1fe8:	7f 92       	push	r7
    1fea:	8f 92       	push	r8
    1fec:	9f 92       	push	r9
    1fee:	af 92       	push	r10
    1ff0:	bf 92       	push	r11
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	2f 93       	push	r18
    2000:	3f 93       	push	r19
    2002:	4f 93       	push	r20
    2004:	5f 93       	push	r21
    2006:	6f 93       	push	r22
    2008:	7f 93       	push	r23
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	ef 93       	push	r30
    2018:	ff 93       	push	r31
    201a:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <pxCurrentTCB>
    201e:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2022:	0d b6       	in	r0, 0x3d	; 61
    2024:	0d 92       	st	X+, r0
    2026:	0e b6       	in	r0, 0x3e	; 62
        if( xTaskIncrementTick() != pdFALSE )
    2028:	0d 92       	st	X+, r0
        {
            vTaskSwitchContext();
    202a:	4b d4       	rcall	.+2198   	; 0x28c2 <xTaskIncrementTick>
    202c:	81 11       	cpse	r24, r1
        }
        portRESTORE_CONTEXT();
    202e:	b4 d5       	rcall	.+2920   	; 0x2b98 <vTaskSwitchContext>
    2030:	a0 91 ac 22 	lds	r26, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2034:	b0 91 ad 22 	lds	r27, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2038:	0d 90       	ld	r0, X+
    203a:	0d be       	out	0x3d, r0	; 61
    203c:	0d 90       	ld	r0, X+
    203e:	0e be       	out	0x3e, r0	; 62
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	bf 91       	pop	r27
    204a:	af 91       	pop	r26
    204c:	9f 91       	pop	r25
    204e:	8f 91       	pop	r24
    2050:	7f 91       	pop	r23
    2052:	6f 91       	pop	r22
    2054:	5f 91       	pop	r21
    2056:	4f 91       	pop	r20
    2058:	3f 91       	pop	r19
    205a:	2f 91       	pop	r18
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	df 90       	pop	r13
    2066:	cf 90       	pop	r12
    2068:	bf 90       	pop	r11
    206a:	af 90       	pop	r10
    206c:	9f 90       	pop	r9
    206e:	8f 90       	pop	r8
    2070:	7f 90       	pop	r7
    2072:	6f 90       	pop	r6
    2074:	5f 90       	pop	r5
    2076:	4f 90       	pop	r4
    2078:	3f 90       	pop	r3
    207a:	2f 90       	pop	r2
    207c:	1f 90       	pop	r1
    207e:	0f 90       	pop	r0
    2080:	0f be       	out	0x3f, r0	; 63

        asm volatile ( "reti" );
    2082:	0f 90       	pop	r0
    2084:	18 95       	reti

00002086 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
void *pvReturn;

	vTaskSuspendAll();
    208a:	ec 01       	movw	r28, r24
	{
		pvReturn = malloc( xWantedSize );
    208c:	0a d4       	rcall	.+2068   	; 0x28a2 <vTaskSuspendAll>
    208e:	ce 01       	movw	r24, r28
    2090:	0e 94 a2 1c 	call	0x3944	; 0x3944 <malloc>
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2094:	ec 01       	movw	r28, r24
		}
	}
	#endif

	return pvReturn;
}
    2096:	e8 d4       	rcall	.+2512   	; 0x2a68 <xTaskResumeAll>
    2098:	ce 01       	movw	r24, r28
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	08 95       	ret

000020a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
	if( pv )
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	31 f0       	breq	.+12     	; 0x20b4 <vPortFree+0x14>
	{
		vTaskSuspendAll();
    20a8:	ec 01       	movw	r28, r24
		{
			free( pv );
    20aa:	fb d3       	rcall	.+2038   	; 0x28a2 <vTaskSuspendAll>
    20ac:	ce 01       	movw	r24, r28
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    20ae:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <free>
	}
}
    20b2:	da d4       	rcall	.+2484   	; 0x2a68 <xTaskResumeAll>
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <prvCopyDataToQueue>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    20c2:	14 2f       	mov	r17, r20
    20c4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    20c6:	44 23       	and	r20, r20
    20c8:	d9 f1       	breq	.+118    	; 0x2140 <prvCopyDataToQueue+0x86>
    20ca:	11 11       	cpse	r17, r1
    20cc:	16 c0       	rjmp	.+44     	; 0x20fa <prvCopyDataToQueue+0x40>
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <memcpy>
    20d8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	9d 81       	ldd	r25, Y+5	; 0x05
    20de:	82 0f       	add	r24, r18
    20e0:	91 1d       	adc	r25, r1
    20e2:	8c 83       	std	Y+4, r24	; 0x04
    20e4:	9d 83       	std	Y+5, r25	; 0x05
    20e6:	2a 81       	ldd	r18, Y+2	; 0x02
    20e8:	3b 81       	ldd	r19, Y+3	; 0x03
    20ea:	82 17       	cp	r24, r18
    20ec:	93 07       	cpc	r25, r19
    20ee:	40 f1       	brcs	.+80     	; 0x2140 <prvCopyDataToQueue+0x86>
    20f0:	88 81       	ld	r24, Y
    20f2:	99 81       	ldd	r25, Y+1	; 0x01
    20f4:	8c 83       	std	Y+4, r24	; 0x04
    20f6:	9d 83       	std	Y+5, r25	; 0x05
    20f8:	23 c0       	rjmp	.+70     	; 0x2140 <prvCopyDataToQueue+0x86>
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	8e 81       	ldd	r24, Y+6	; 0x06
    20fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2100:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <memcpy>
    2104:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	91 95       	neg	r25
    210a:	81 95       	neg	r24
    210c:	91 09       	sbc	r25, r1
    210e:	2e 81       	ldd	r18, Y+6	; 0x06
    2110:	3f 81       	ldd	r19, Y+7	; 0x07
    2112:	28 0f       	add	r18, r24
    2114:	39 1f       	adc	r19, r25
    2116:	2e 83       	std	Y+6, r18	; 0x06
    2118:	3f 83       	std	Y+7, r19	; 0x07
    211a:	48 81       	ld	r20, Y
    211c:	59 81       	ldd	r21, Y+1	; 0x01
    211e:	24 17       	cp	r18, r20
    2120:	35 07       	cpc	r19, r21
    2122:	30 f4       	brcc	.+12     	; 0x2130 <prvCopyDataToQueue+0x76>
    2124:	2a 81       	ldd	r18, Y+2	; 0x02
    2126:	3b 81       	ldd	r19, Y+3	; 0x03
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	8e 83       	std	Y+6, r24	; 0x06
    212e:	9f 83       	std	Y+7, r25	; 0x07
    2130:	12 30       	cpi	r17, 0x02	; 2
    2132:	31 f4       	brne	.+12     	; 0x2140 <prvCopyDataToQueue+0x86>
    2134:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2136:	88 23       	and	r24, r24
    2138:	19 f0       	breq	.+6      	; 0x2140 <prvCopyDataToQueue+0x86>
    213a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    213c:	81 50       	subi	r24, 0x01	; 1
    213e:	8a 8f       	std	Y+26, r24	; 0x1a
    2140:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	8a 8f       	std	Y+26, r24	; 0x1a
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	08 95       	ret

00002150 <prvCopyDataFromQueue>:
    2150:	fc 01       	movw	r30, r24
    2152:	44 8d       	ldd	r20, Z+28	; 0x1c
    2154:	44 23       	and	r20, r20
    2156:	a9 f0       	breq	.+42     	; 0x2182 <prvCopyDataFromQueue+0x32>
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	26 81       	ldd	r18, Z+6	; 0x06
    215c:	37 81       	ldd	r19, Z+7	; 0x07
    215e:	24 0f       	add	r18, r20
    2160:	35 1f       	adc	r19, r21
    2162:	26 83       	std	Z+6, r18	; 0x06
    2164:	37 83       	std	Z+7, r19	; 0x07
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	20 f0       	brcs	.+8      	; 0x2178 <prvCopyDataFromQueue+0x28>
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	86 83       	std	Z+6, r24	; 0x06
    2176:	97 83       	std	Z+7, r25	; 0x07
    2178:	cb 01       	movw	r24, r22
    217a:	66 81       	ldd	r22, Z+6	; 0x06
    217c:	77 81       	ldd	r23, Z+7	; 0x07
    217e:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <memcpy>
    2182:	08 95       	ret

00002184 <prvUnlockQueue>:
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	0f 92       	push	r0
    2194:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2196:	18 16       	cp	r1, r24
    2198:	ac f4       	brge	.+42     	; 0x21c4 <prvUnlockQueue+0x40>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	81 11       	cpse	r24, r1
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <prvUnlockQueue+0x26>
    21a0:	11 c0       	rjmp	.+34     	; 0x21c4 <prvUnlockQueue+0x40>
    21a2:	89 89       	ldd	r24, Y+17	; 0x11
    21a4:	81 11       	cpse	r24, r1
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <prvUnlockQueue+0x2c>
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <prvUnlockQueue+0x40>
    21aa:	8e 01       	movw	r16, r28
    21ac:	0f 5e       	subi	r16, 0xEF	; 239
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	c8 01       	movw	r24, r16
    21b2:	93 d5       	rcall	.+2854   	; 0x2cda <xTaskRemoveFromEventList>
    21b4:	81 11       	cpse	r24, r1
    21b6:	13 d6       	rcall	.+3110   	; 0x2dde <vTaskMissedYield>
    21b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ba:	81 50       	subi	r24, 0x01	; 1
    21bc:	8e 8f       	std	Y+30, r24	; 0x1e
    21be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21c0:	18 16       	cp	r1, r24
    21c2:	7c f3       	brlt	.-34     	; 0x21a2 <prvUnlockQueue+0x1e>
    21c4:	8f ef       	ldi	r24, 0xFF	; 255
    21c6:	8e 8f       	std	Y+30, r24	; 0x1e
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	0f 92       	push	r0
    21d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d4:	18 16       	cp	r1, r24
    21d6:	ac f4       	brge	.+42     	; 0x2202 <prvUnlockQueue+0x7e>
    21d8:	88 85       	ldd	r24, Y+8	; 0x08
    21da:	81 11       	cpse	r24, r1
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <prvUnlockQueue+0x64>
    21de:	11 c0       	rjmp	.+34     	; 0x2202 <prvUnlockQueue+0x7e>
    21e0:	88 85       	ldd	r24, Y+8	; 0x08
    21e2:	81 11       	cpse	r24, r1
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <prvUnlockQueue+0x6a>
    21e6:	0d c0       	rjmp	.+26     	; 0x2202 <prvUnlockQueue+0x7e>
    21e8:	8e 01       	movw	r16, r28
    21ea:	08 5f       	subi	r16, 0xF8	; 248
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	c8 01       	movw	r24, r16
    21f0:	74 d5       	rcall	.+2792   	; 0x2cda <xTaskRemoveFromEventList>
    21f2:	81 11       	cpse	r24, r1
    21f4:	f4 d5       	rcall	.+3048   	; 0x2dde <vTaskMissedYield>
    21f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f8:	81 50       	subi	r24, 0x01	; 1
    21fa:	8d 8f       	std	Y+29, r24	; 0x1d
    21fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fe:	18 16       	cp	r1, r24
    2200:	7c f3       	brlt	.-34     	; 0x21e0 <prvUnlockQueue+0x5c>
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	8d 8f       	std	Y+29, r24	; 0x1d
    2206:	0f 90       	pop	r0
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	08 95       	ret

00002214 <xQueueGenericReset>:
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	0f 92       	push	r0
    2220:	48 81       	ld	r20, Y
    2222:	59 81       	ldd	r21, Y+1	; 0x01
    2224:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	7b 8d       	ldd	r23, Y+27	; 0x1b
    222a:	72 9f       	mul	r23, r18
    222c:	c0 01       	movw	r24, r0
    222e:	73 9f       	mul	r23, r19
    2230:	90 0d       	add	r25, r0
    2232:	11 24       	eor	r1, r1
    2234:	fa 01       	movw	r30, r20
    2236:	e8 0f       	add	r30, r24
    2238:	f9 1f       	adc	r31, r25
    223a:	ea 83       	std	Y+2, r30	; 0x02
    223c:	fb 83       	std	Y+3, r31	; 0x03
    223e:	1a 8e       	std	Y+26, r1	; 0x1a
    2240:	4c 83       	std	Y+4, r20	; 0x04
    2242:	5d 83       	std	Y+5, r21	; 0x05
    2244:	82 1b       	sub	r24, r18
    2246:	93 0b       	sbc	r25, r19
    2248:	84 0f       	add	r24, r20
    224a:	95 1f       	adc	r25, r21
    224c:	8e 83       	std	Y+6, r24	; 0x06
    224e:	9f 83       	std	Y+7, r25	; 0x07
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	8d 8f       	std	Y+29, r24	; 0x1d
    2254:	8e 8f       	std	Y+30, r24	; 0x1e
    2256:	61 11       	cpse	r22, r1
    2258:	0a c0       	rjmp	.+20     	; 0x226e <xQueueGenericReset+0x5a>
    225a:	88 85       	ldd	r24, Y+8	; 0x08
    225c:	88 23       	and	r24, r24
    225e:	69 f0       	breq	.+26     	; 0x227a <xQueueGenericReset+0x66>
    2260:	ce 01       	movw	r24, r28
    2262:	08 96       	adiw	r24, 0x08	; 8
    2264:	3a d5       	rcall	.+2676   	; 0x2cda <xTaskRemoveFromEventList>
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	41 f4       	brne	.+16     	; 0x227a <xQueueGenericReset+0x66>
    226a:	5b de       	rcall	.-842    	; 0x1f22 <vPortYield>
    226c:	06 c0       	rjmp	.+12     	; 0x227a <xQueueGenericReset+0x66>
    226e:	ce 01       	movw	r24, r28
    2270:	08 96       	adiw	r24, 0x08	; 8
    2272:	11 dd       	rcall	.-1502   	; 0x1c96 <vListInitialise>
    2274:	ce 01       	movw	r24, r28
    2276:	41 96       	adiw	r24, 0x11	; 17
    2278:	0e dd       	rcall	.-1508   	; 0x1c96 <vListInitialise>
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <xQueueGenericCreate>:
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	08 2f       	mov	r16, r24
    2290:	16 2f       	mov	r17, r22
    2292:	66 23       	and	r22, r22
    2294:	a9 f0       	breq	.+42     	; 0x22c0 <xQueueGenericCreate+0x3a>
    2296:	86 9f       	mul	r24, r22
    2298:	c0 01       	movw	r24, r0
    229a:	11 24       	eor	r1, r1
    229c:	80 96       	adiw	r24, 0x20	; 32
    229e:	f3 de       	rcall	.-538    	; 0x2086 <pvPortMalloc>
    22a0:	ec 01       	movw	r28, r24
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	21 f4       	brne	.+8      	; 0x22ae <xQueueGenericCreate+0x28>
    22a6:	12 c0       	rjmp	.+36     	; 0x22cc <xQueueGenericCreate+0x46>
    22a8:	c8 83       	st	Y, r28
    22aa:	d9 83       	std	Y+1, r29	; 0x01
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <xQueueGenericCreate+0x2e>
    22ae:	4f 96       	adiw	r24, 0x1f	; 31
    22b0:	88 83       	st	Y, r24
    22b2:	99 83       	std	Y+1, r25	; 0x01
    22b4:	0b 8f       	std	Y+27, r16	; 0x1b
    22b6:	1c 8f       	std	Y+28, r17	; 0x1c
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	ce 01       	movw	r24, r28
    22bc:	ab df       	rcall	.-170    	; 0x2214 <xQueueGenericReset>
    22be:	06 c0       	rjmp	.+12     	; 0x22cc <xQueueGenericCreate+0x46>
    22c0:	8f e1       	ldi	r24, 0x1F	; 31
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	e0 de       	rcall	.-576    	; 0x2086 <pvPortMalloc>
    22c6:	ec 01       	movw	r28, r24
    22c8:	89 2b       	or	r24, r25
    22ca:	71 f7       	brne	.-36     	; 0x22a8 <xQueueGenericCreate+0x22>
    22cc:	ce 01       	movw	r24, r28
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <xQueueGenericSend>:
    22d8:	af 92       	push	r10
    22da:	bf 92       	push	r11
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	25 97       	sbiw	r28, 0x05	; 5
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	8c 01       	movw	r16, r24
    22f8:	6b 01       	movw	r12, r22
    22fa:	4c 83       	std	Y+4, r20	; 0x04
    22fc:	5d 83       	std	Y+5, r21	; 0x05
    22fe:	a2 2e       	mov	r10, r18
    2300:	b1 2c       	mov	r11, r1
    2302:	7c 01       	movw	r14, r24
    2304:	88 e0       	ldi	r24, 0x08	; 8
    2306:	e8 0e       	add	r14, r24
    2308:	f1 1c       	adc	r15, r1
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	0f 92       	push	r0
    2310:	f8 01       	movw	r30, r16
    2312:	92 8d       	ldd	r25, Z+26	; 0x1a
    2314:	83 8d       	ldd	r24, Z+27	; 0x1b
    2316:	98 17       	cp	r25, r24
    2318:	18 f0       	brcs	.+6      	; 0x2320 <xQueueGenericSend+0x48>
    231a:	f2 e0       	ldi	r31, 0x02	; 2
    231c:	af 12       	cpse	r10, r31
    231e:	15 c0       	rjmp	.+42     	; 0x234a <xQueueGenericSend+0x72>
    2320:	4a 2d       	mov	r20, r10
    2322:	b6 01       	movw	r22, r12
    2324:	c8 01       	movw	r24, r16
    2326:	c9 de       	rcall	.-622    	; 0x20ba <prvCopyDataToQueue>
    2328:	f8 01       	movw	r30, r16
    232a:	91 89       	ldd	r25, Z+17	; 0x11
    232c:	99 23       	and	r25, r25
    232e:	39 f0       	breq	.+14     	; 0x233e <xQueueGenericSend+0x66>
    2330:	c8 01       	movw	r24, r16
    2332:	41 96       	adiw	r24, 0x11	; 17
    2334:	d2 d4       	rcall	.+2468   	; 0x2cda <xTaskRemoveFromEventList>
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	21 f4       	brne	.+8      	; 0x2342 <xQueueGenericSend+0x6a>
    233a:	f3 dd       	rcall	.-1050   	; 0x1f22 <vPortYield>
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <xQueueGenericSend+0x6a>
    233e:	81 11       	cpse	r24, r1
    2340:	f0 dd       	rcall	.-1056   	; 0x1f22 <vPortYield>
    2342:	0f 90       	pop	r0
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	46 c0       	rjmp	.+140    	; 0x23d6 <xQueueGenericSend+0xfe>
    234a:	8c 81       	ldd	r24, Y+4	; 0x04
    234c:	9d 81       	ldd	r25, Y+5	; 0x05
    234e:	89 2b       	or	r24, r25
    2350:	21 f4       	brne	.+8      	; 0x235a <xQueueGenericSend+0x82>
    2352:	0f 90       	pop	r0
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	3e c0       	rjmp	.+124    	; 0x23d6 <xQueueGenericSend+0xfe>
    235a:	b1 10       	cpse	r11, r1
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <xQueueGenericSend+0x90>
    235e:	ce 01       	movw	r24, r28
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	01 d5       	rcall	.+2562   	; 0x2d66 <vTaskSetTimeOutState>
    2364:	bb 24       	eor	r11, r11
    2366:	b3 94       	inc	r11
    2368:	0f 90       	pop	r0
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	9a d2       	rcall	.+1332   	; 0x28a2 <vTaskSuspendAll>
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	0f 92       	push	r0
    2374:	f8 01       	movw	r30, r16
    2376:	85 8d       	ldd	r24, Z+29	; 0x1d
    2378:	8f 3f       	cpi	r24, 0xFF	; 255
    237a:	09 f4       	brne	.+2      	; 0x237e <xQueueGenericSend+0xa6>
    237c:	15 8e       	std	Z+29, r1	; 0x1d
    237e:	f8 01       	movw	r30, r16
    2380:	86 8d       	ldd	r24, Z+30	; 0x1e
    2382:	8f 3f       	cpi	r24, 0xFF	; 255
    2384:	09 f4       	brne	.+2      	; 0x2388 <xQueueGenericSend+0xb0>
    2386:	16 8e       	std	Z+30, r1	; 0x1e
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	be 01       	movw	r22, r28
    238e:	6c 5f       	subi	r22, 0xFC	; 252
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	f2 d4       	rcall	.+2532   	; 0x2d7c <xTaskCheckForTimeOut>
    2398:	81 11       	cpse	r24, r1
    239a:	19 c0       	rjmp	.+50     	; 0x23ce <xQueueGenericSend+0xf6>
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	0f 92       	push	r0
    23a2:	f8 01       	movw	r30, r16
    23a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    23a6:	0f 90       	pop	r0
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    23ac:	98 13       	cpse	r25, r24
    23ae:	0b c0       	rjmp	.+22     	; 0x23c6 <xQueueGenericSend+0xee>
    23b0:	6c 81       	ldd	r22, Y+4	; 0x04
    23b2:	7d 81       	ldd	r23, Y+5	; 0x05
    23b4:	c7 01       	movw	r24, r14
    23b6:	5d d4       	rcall	.+2234   	; 0x2c72 <vTaskPlaceOnEventList>
    23b8:	c8 01       	movw	r24, r16
    23ba:	e4 de       	rcall	.-568    	; 0x2184 <prvUnlockQueue>
    23bc:	55 d3       	rcall	.+1706   	; 0x2a68 <xTaskResumeAll>
    23be:	81 11       	cpse	r24, r1
    23c0:	a4 cf       	rjmp	.-184    	; 0x230a <xQueueGenericSend+0x32>
    23c2:	af dd       	rcall	.-1186   	; 0x1f22 <vPortYield>
    23c4:	a2 cf       	rjmp	.-188    	; 0x230a <xQueueGenericSend+0x32>
    23c6:	c8 01       	movw	r24, r16
    23c8:	dd de       	rcall	.-582    	; 0x2184 <prvUnlockQueue>
    23ca:	4e d3       	rcall	.+1692   	; 0x2a68 <xTaskResumeAll>
    23cc:	9e cf       	rjmp	.-196    	; 0x230a <xQueueGenericSend+0x32>
    23ce:	c8 01       	movw	r24, r16
    23d0:	d9 de       	rcall	.-590    	; 0x2184 <prvUnlockQueue>
    23d2:	4a d3       	rcall	.+1684   	; 0x2a68 <xTaskResumeAll>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	25 96       	adiw	r28, 0x05	; 5
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	bf 90       	pop	r11
    23ee:	af 90       	pop	r10
    23f0:	08 95       	ret

000023f2 <xQueueGenericSendFromISR>:
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	fa 01       	movw	r30, r20
    23fc:	dc 01       	movw	r26, r24
    23fe:	5a 96       	adiw	r26, 0x1a	; 26
    2400:	5c 91       	ld	r21, X
    2402:	5a 97       	sbiw	r26, 0x1a	; 26
    2404:	5b 96       	adiw	r26, 0x1b	; 27
    2406:	3c 91       	ld	r19, X
    2408:	53 17       	cp	r21, r19
    240a:	10 f0       	brcs	.+4      	; 0x2410 <xQueueGenericSendFromISR+0x1e>
    240c:	22 30       	cpi	r18, 0x02	; 2
    240e:	d9 f4       	brne	.+54     	; 0x2446 <xQueueGenericSendFromISR+0x54>
    2410:	42 2f       	mov	r20, r18
    2412:	8f 01       	movw	r16, r30
    2414:	ec 01       	movw	r28, r24
    2416:	51 de       	rcall	.-862    	; 0x20ba <prvCopyDataToQueue>
    2418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241a:	8f 3f       	cpi	r24, 0xFF	; 255
    241c:	79 f4       	brne	.+30     	; 0x243c <xQueueGenericSendFromISR+0x4a>
    241e:	89 89       	ldd	r24, Y+17	; 0x11
    2420:	88 23       	and	r24, r24
    2422:	99 f0       	breq	.+38     	; 0x244a <xQueueGenericSendFromISR+0x58>
    2424:	ce 01       	movw	r24, r28
    2426:	41 96       	adiw	r24, 0x11	; 17
    2428:	58 d4       	rcall	.+2224   	; 0x2cda <xTaskRemoveFromEventList>
    242a:	88 23       	and	r24, r24
    242c:	81 f0       	breq	.+32     	; 0x244e <xQueueGenericSendFromISR+0x5c>
    242e:	01 15       	cp	r16, r1
    2430:	11 05       	cpc	r17, r1
    2432:	79 f0       	breq	.+30     	; 0x2452 <xQueueGenericSendFromISR+0x60>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	f8 01       	movw	r30, r16
    2438:	80 83       	st	Z, r24
    243a:	0c c0       	rjmp	.+24     	; 0x2454 <xQueueGenericSendFromISR+0x62>
    243c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	8e 8f       	std	Y+30, r24	; 0x1e
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <xQueueGenericSendFromISR+0x62>
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	05 c0       	rjmp	.+10     	; 0x2454 <xQueueGenericSendFromISR+0x62>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <xQueueGenericSendFromISR+0x62>
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <xQueueGenericSendFromISR+0x62>
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <xQueueGenericReceive>:
    245e:	af 92       	push	r10
    2460:	bf 92       	push	r11
    2462:	cf 92       	push	r12
    2464:	df 92       	push	r13
    2466:	ef 92       	push	r14
    2468:	ff 92       	push	r15
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	25 97       	sbiw	r28, 0x05	; 5
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	8c 01       	movw	r16, r24
    247e:	6b 01       	movw	r12, r22
    2480:	4c 83       	std	Y+4, r20	; 0x04
    2482:	5d 83       	std	Y+5, r21	; 0x05
    2484:	a2 2e       	mov	r10, r18
    2486:	b1 2c       	mov	r11, r1
    2488:	7c 01       	movw	r14, r24
    248a:	81 e1       	ldi	r24, 0x11	; 17
    248c:	e8 0e       	add	r14, r24
    248e:	f1 1c       	adc	r15, r1
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	0f 92       	push	r0
    2496:	f8 01       	movw	r30, r16
    2498:	82 8d       	ldd	r24, Z+26	; 0x1a
    249a:	88 23       	and	r24, r24
    249c:	21 f1       	breq	.+72     	; 0x24e6 <xQueueGenericReceive+0x88>
    249e:	e6 80       	ldd	r14, Z+6	; 0x06
    24a0:	f7 80       	ldd	r15, Z+7	; 0x07
    24a2:	b6 01       	movw	r22, r12
    24a4:	c8 01       	movw	r24, r16
    24a6:	54 de       	rcall	.-856    	; 0x2150 <prvCopyDataFromQueue>
    24a8:	a1 10       	cpse	r10, r1
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <xQueueGenericReceive+0x6a>
    24ac:	f8 01       	movw	r30, r16
    24ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    24b0:	81 50       	subi	r24, 0x01	; 1
    24b2:	82 8f       	std	Z+26, r24	; 0x1a
    24b4:	80 85       	ldd	r24, Z+8	; 0x08
    24b6:	88 23       	and	r24, r24
    24b8:	91 f0       	breq	.+36     	; 0x24de <xQueueGenericReceive+0x80>
    24ba:	c8 01       	movw	r24, r16
    24bc:	08 96       	adiw	r24, 0x08	; 8
    24be:	0d d4       	rcall	.+2074   	; 0x2cda <xTaskRemoveFromEventList>
    24c0:	81 30       	cpi	r24, 0x01	; 1
    24c2:	69 f4       	brne	.+26     	; 0x24de <xQueueGenericReceive+0x80>
    24c4:	2e dd       	rcall	.-1444   	; 0x1f22 <vPortYield>
    24c6:	0b c0       	rjmp	.+22     	; 0x24de <xQueueGenericReceive+0x80>
    24c8:	f8 01       	movw	r30, r16
    24ca:	e6 82       	std	Z+6, r14	; 0x06
    24cc:	f7 82       	std	Z+7, r15	; 0x07
    24ce:	81 89       	ldd	r24, Z+17	; 0x11
    24d0:	88 23       	and	r24, r24
    24d2:	29 f0       	breq	.+10     	; 0x24de <xQueueGenericReceive+0x80>
    24d4:	c8 01       	movw	r24, r16
    24d6:	41 96       	adiw	r24, 0x11	; 17
    24d8:	00 d4       	rcall	.+2048   	; 0x2cda <xTaskRemoveFromEventList>
    24da:	81 11       	cpse	r24, r1
    24dc:	22 dd       	rcall	.-1468   	; 0x1f22 <vPortYield>
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	45 c0       	rjmp	.+138    	; 0x2570 <xQueueGenericReceive+0x112>
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
    24e8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ea:	89 2b       	or	r24, r25
    24ec:	21 f4       	brne	.+8      	; 0x24f6 <xQueueGenericReceive+0x98>
    24ee:	0f 90       	pop	r0
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	3d c0       	rjmp	.+122    	; 0x2570 <xQueueGenericReceive+0x112>
    24f6:	b1 10       	cpse	r11, r1
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <xQueueGenericReceive+0xa6>
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	33 d4       	rcall	.+2150   	; 0x2d66 <vTaskSetTimeOutState>
    2500:	bb 24       	eor	r11, r11
    2502:	b3 94       	inc	r11
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cc d1       	rcall	.+920    	; 0x28a2 <vTaskSuspendAll>
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	0f 92       	push	r0
    2510:	f8 01       	movw	r30, r16
    2512:	85 8d       	ldd	r24, Z+29	; 0x1d
    2514:	8f 3f       	cpi	r24, 0xFF	; 255
    2516:	09 f4       	brne	.+2      	; 0x251a <xQueueGenericReceive+0xbc>
    2518:	15 8e       	std	Z+29, r1	; 0x1d
    251a:	f8 01       	movw	r30, r16
    251c:	86 8d       	ldd	r24, Z+30	; 0x1e
    251e:	8f 3f       	cpi	r24, 0xFF	; 255
    2520:	09 f4       	brne	.+2      	; 0x2524 <xQueueGenericReceive+0xc6>
    2522:	16 8e       	std	Z+30, r1	; 0x1e
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	be 01       	movw	r22, r28
    252a:	6c 5f       	subi	r22, 0xFC	; 252
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	ce 01       	movw	r24, r28
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	24 d4       	rcall	.+2120   	; 0x2d7c <xTaskCheckForTimeOut>
    2534:	81 11       	cpse	r24, r1
    2536:	18 c0       	rjmp	.+48     	; 0x2568 <xQueueGenericReceive+0x10a>
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	0f 92       	push	r0
    253e:	f8 01       	movw	r30, r16
    2540:	82 8d       	ldd	r24, Z+26	; 0x1a
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	81 11       	cpse	r24, r1
    2548:	0b c0       	rjmp	.+22     	; 0x2560 <xQueueGenericReceive+0x102>
    254a:	6c 81       	ldd	r22, Y+4	; 0x04
    254c:	7d 81       	ldd	r23, Y+5	; 0x05
    254e:	c7 01       	movw	r24, r14
    2550:	90 d3       	rcall	.+1824   	; 0x2c72 <vTaskPlaceOnEventList>
    2552:	c8 01       	movw	r24, r16
    2554:	17 de       	rcall	.-978    	; 0x2184 <prvUnlockQueue>
    2556:	88 d2       	rcall	.+1296   	; 0x2a68 <xTaskResumeAll>
    2558:	81 11       	cpse	r24, r1
    255a:	9a cf       	rjmp	.-204    	; 0x2490 <xQueueGenericReceive+0x32>
    255c:	e2 dc       	rcall	.-1596   	; 0x1f22 <vPortYield>
    255e:	98 cf       	rjmp	.-208    	; 0x2490 <xQueueGenericReceive+0x32>
    2560:	c8 01       	movw	r24, r16
    2562:	10 de       	rcall	.-992    	; 0x2184 <prvUnlockQueue>
    2564:	81 d2       	rcall	.+1282   	; 0x2a68 <xTaskResumeAll>
    2566:	94 cf       	rjmp	.-216    	; 0x2490 <xQueueGenericReceive+0x32>
    2568:	c8 01       	movw	r24, r16
    256a:	0c de       	rcall	.-1000   	; 0x2184 <prvUnlockQueue>
    256c:	7d d2       	rcall	.+1274   	; 0x2a68 <xTaskResumeAll>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	25 96       	adiw	r28, 0x05	; 5
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	08 95       	ret

0000258c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	0f 92       	push	r0
    2598:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259a:	8f 3f       	cpi	r24, 0xFF	; 255
    259c:	09 f4       	brne	.+2      	; 0x25a0 <vQueueWaitForMessageRestricted+0x14>
    259e:	1d 8e       	std	Y+29, r1	; 0x1d
    25a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25a2:	8f 3f       	cpi	r24, 0xFF	; 255
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <vQueueWaitForMessageRestricted+0x1c>
    25a6:	1e 8e       	std	Y+30, r1	; 0x1e
    25a8:	0f 90       	pop	r0
    25aa:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    25ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25ae:	81 11       	cpse	r24, r1
    25b0:	03 c0       	rjmp	.+6      	; 0x25b8 <vQueueWaitForMessageRestricted+0x2c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    25b2:	ce 01       	movw	r24, r28
    25b4:	41 96       	adiw	r24, 0x11	; 17
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    25b6:	77 d3       	rcall	.+1774   	; 0x2ca6 <vTaskPlaceOnEventListRestricted>
    25b8:	ce 01       	movw	r24, r28
	}
    25ba:	e4 dd       	rcall	.-1080   	; 0x2184 <prvUnlockQueue>
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	08 95       	ret

000025c2 <prvIdleTask>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    25c2:	cf e7       	ldi	r28, 0x7F	; 127
    25c4:	d2 e2       	ldi	r29, 0x22	; 34
    25c6:	88 81       	ld	r24, Y
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	f0 f3       	brcs	.-4      	; 0x25c8 <prvIdleTask+0x6>
    25cc:	aa dc       	rcall	.-1708   	; 0x1f22 <vPortYield>
    25ce:	fb cf       	rjmp	.-10     	; 0x25c6 <prvIdleTask+0x4>

000025d0 <prvAddCurrentTaskToDelayedList>:
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	ec 01       	movw	r28, r24
    25d6:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    25da:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    25de:	82 83       	std	Z+2, r24	; 0x02
    25e0:	93 83       	std	Z+3, r25	; 0x03
    25e2:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xTickCount>
    25e6:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xTickCount+0x1>
    25ea:	c8 17       	cp	r28, r24
    25ec:	d9 07       	cpc	r29, r25
    25ee:	60 f4       	brcc	.+24     	; 0x2608 <prvAddCurrentTaskToDelayedList+0x38>
    25f0:	60 91 ac 22 	lds	r22, 0x22AC	; 0x8022ac <pxCurrentTCB>
    25f4:	70 91 ad 22 	lds	r23, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    25f8:	80 91 69 22 	lds	r24, 0x2269	; 0x802269 <pxOverflowDelayedTaskList>
    25fc:	90 91 6a 22 	lds	r25, 0x226A	; 0x80226a <pxOverflowDelayedTaskList+0x1>
    2600:	6e 5f       	subi	r22, 0xFE	; 254
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	7b db       	rcall	.-2314   	; 0x1cfc <vListInsert>
    2606:	16 c0       	rjmp	.+44     	; 0x2634 <prvAddCurrentTaskToDelayedList+0x64>
    2608:	60 91 ac 22 	lds	r22, 0x22AC	; 0x8022ac <pxCurrentTCB>
    260c:	70 91 ad 22 	lds	r23, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2610:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <pxDelayedTaskList>
    2614:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <pxDelayedTaskList+0x1>
    2618:	6e 5f       	subi	r22, 0xFE	; 254
    261a:	7f 4f       	sbci	r23, 0xFF	; 255
    261c:	6f db       	rcall	.-2338   	; 0x1cfc <vListInsert>
    261e:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <xNextTaskUnblockTime>
    2622:	90 91 56 22 	lds	r25, 0x2256	; 0x802256 <xNextTaskUnblockTime+0x1>
    2626:	c8 17       	cp	r28, r24
    2628:	d9 07       	cpc	r29, r25
    262a:	20 f4       	brcc	.+8      	; 0x2634 <prvAddCurrentTaskToDelayedList+0x64>
    262c:	c0 93 55 22 	sts	0x2255, r28	; 0x802255 <xNextTaskUnblockTime>
    2630:	d0 93 56 22 	sts	0x2256, r29	; 0x802256 <xNextTaskUnblockTime+0x1>
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	08 95       	ret

0000263a <xTaskGenericCreate>:
    263a:	4f 92       	push	r4
    263c:	5f 92       	push	r5
    263e:	6f 92       	push	r6
    2640:	7f 92       	push	r7
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	4c 01       	movw	r8, r24
    265c:	eb 01       	movw	r28, r22
    265e:	5a 01       	movw	r10, r20
    2660:	29 01       	movw	r4, r18
    2662:	c1 14       	cp	r12, r1
    2664:	d1 04       	cpc	r13, r1
    2666:	31 f4       	brne	.+12     	; 0x2674 <xTaskGenericCreate+0x3a>
    2668:	ca 01       	movw	r24, r20
    266a:	0d dd       	rcall	.-1510   	; 0x2086 <pvPortMalloc>
    266c:	6c 01       	movw	r12, r24
    266e:	89 2b       	or	r24, r25
    2670:	09 f4       	brne	.+2      	; 0x2674 <xTaskGenericCreate+0x3a>
    2672:	d2 c0       	rjmp	.+420    	; 0x2818 <xTaskGenericCreate+0x1de>
    2674:	86 e2       	ldi	r24, 0x26	; 38
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	06 dd       	rcall	.-1524   	; 0x2086 <pvPortMalloc>
    267a:	3c 01       	movw	r6, r24
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	79 f0       	breq	.+30     	; 0x269e <xTaskGenericCreate+0x64>
    2680:	fc 01       	movw	r30, r24
    2682:	c7 8a       	std	Z+23, r12	; 0x17
    2684:	d0 8e       	std	Z+24, r13	; 0x18
    2686:	f1 e0       	ldi	r31, 0x01	; 1
    2688:	af 1a       	sub	r10, r31
    268a:	b1 08       	sbc	r11, r1
    268c:	ca 0c       	add	r12, r10
    268e:	db 1c       	adc	r13, r11
    2690:	88 81       	ld	r24, Y
    2692:	f3 01       	movw	r30, r6
    2694:	81 8f       	std	Z+25, r24	; 0x19
    2696:	88 81       	ld	r24, Y
    2698:	81 11       	cpse	r24, r1
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <xTaskGenericCreate+0x6a>
    269c:	13 c0       	rjmp	.+38     	; 0x26c4 <xTaskGenericCreate+0x8a>
    269e:	c6 01       	movw	r24, r12
    26a0:	ff dc       	rcall	.-1538   	; 0x20a0 <vPortFree>
    26a2:	ba c0       	rjmp	.+372    	; 0x2818 <xTaskGenericCreate+0x1de>
    26a4:	d3 01       	movw	r26, r6
    26a6:	5a 96       	adiw	r26, 0x1a	; 26
    26a8:	fe 01       	movw	r30, r28
    26aa:	31 96       	adiw	r30, 0x01	; 1
    26ac:	9e 01       	movw	r18, r28
    26ae:	28 5f       	subi	r18, 0xF8	; 248
    26b0:	3f 4f       	sbci	r19, 0xFF	; 255
    26b2:	ef 01       	movw	r28, r30
    26b4:	81 91       	ld	r24, Z+
    26b6:	8d 93       	st	X+, r24
    26b8:	88 81       	ld	r24, Y
    26ba:	88 23       	and	r24, r24
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <xTaskGenericCreate+0x8a>
    26be:	2e 17       	cp	r18, r30
    26c0:	3f 07       	cpc	r19, r31
    26c2:	b9 f7       	brne	.-18     	; 0x26b2 <xTaskGenericCreate+0x78>
    26c4:	f3 01       	movw	r30, r6
    26c6:	10 a2       	std	Z+32, r1	; 0x20
    26c8:	10 2f       	mov	r17, r16
    26ca:	05 30       	cpi	r16, 0x05	; 5
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <xTaskGenericCreate+0x96>
    26ce:	14 e0       	ldi	r17, 0x04	; 4
    26d0:	f3 01       	movw	r30, r6
    26d2:	16 8b       	std	Z+22, r17	; 0x16
    26d4:	e3 01       	movw	r28, r6
    26d6:	22 96       	adiw	r28, 0x02	; 2
    26d8:	ce 01       	movw	r24, r28
    26da:	eb da       	rcall	.-2602   	; 0x1cb2 <vListInitialiseItem>
    26dc:	c3 01       	movw	r24, r6
    26de:	0c 96       	adiw	r24, 0x0c	; 12
    26e0:	e8 da       	rcall	.-2608   	; 0x1cb2 <vListInitialiseItem>
    26e2:	f3 01       	movw	r30, r6
    26e4:	60 86       	std	Z+8, r6	; 0x08
    26e6:	71 86       	std	Z+9, r7	; 0x09
    26e8:	85 e0       	ldi	r24, 0x05	; 5
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	81 1b       	sub	r24, r17
    26ee:	91 09       	sbc	r25, r1
    26f0:	84 87       	std	Z+12, r24	; 0x0c
    26f2:	95 87       	std	Z+13, r25	; 0x0d
    26f4:	62 8a       	std	Z+18, r6	; 0x12
    26f6:	73 8a       	std	Z+19, r7	; 0x13
    26f8:	11 a2       	std	Z+33, r1	; 0x21
    26fa:	12 a2       	std	Z+34, r1	; 0x22
    26fc:	13 a2       	std	Z+35, r1	; 0x23
    26fe:	14 a2       	std	Z+36, r1	; 0x24
    2700:	15 a2       	std	Z+37, r1	; 0x25
    2702:	a2 01       	movw	r20, r4
    2704:	b4 01       	movw	r22, r8
    2706:	c6 01       	movw	r24, r12
    2708:	50 db       	rcall	.-2400   	; 0x1daa <pxPortInitialiseStack>
    270a:	f3 01       	movw	r30, r6
    270c:	80 83       	st	Z, r24
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	e1 14       	cp	r14, r1
    2712:	f1 04       	cpc	r15, r1
    2714:	19 f0       	breq	.+6      	; 0x271c <xTaskGenericCreate+0xe2>
    2716:	f7 01       	movw	r30, r14
    2718:	60 82       	st	Z, r6
    271a:	71 82       	std	Z+1, r7	; 0x01
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	0f 92       	push	r0
    2722:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <uxCurrentNumberOfTasks>
    2726:	8f 5f       	subi	r24, 0xFF	; 255
    2728:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <uxCurrentNumberOfTasks>
    272c:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2730:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2734:	89 2b       	or	r24, r25
    2736:	91 f5       	brne	.+100    	; 0x279c <xTaskGenericCreate+0x162>
    2738:	60 92 ac 22 	sts	0x22AC, r6	; 0x8022ac <pxCurrentTCB>
    273c:	70 92 ad 22 	sts	0x22AD, r7	; 0x8022ad <pxCurrentTCB+0x1>
    2740:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <uxCurrentNumberOfTasks>
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	c9 f5       	brne	.+114    	; 0x27ba <xTaskGenericCreate+0x180>
    2748:	0f 2e       	mov	r0, r31
    274a:	ff e7       	ldi	r31, 0x7F	; 127
    274c:	ef 2e       	mov	r14, r31
    274e:	f2 e2       	ldi	r31, 0x22	; 34
    2750:	ff 2e       	mov	r15, r31
    2752:	f0 2d       	mov	r31, r0
    2754:	0f 2e       	mov	r0, r31
    2756:	fc ea       	ldi	r31, 0xAC	; 172
    2758:	cf 2e       	mov	r12, r31
    275a:	f2 e2       	ldi	r31, 0x22	; 34
    275c:	df 2e       	mov	r13, r31
    275e:	f0 2d       	mov	r31, r0
    2760:	c7 01       	movw	r24, r14
    2762:	99 da       	rcall	.-2766   	; 0x1c96 <vListInitialise>
    2764:	f9 e0       	ldi	r31, 0x09	; 9
    2766:	ef 0e       	add	r14, r31
    2768:	f1 1c       	adc	r15, r1
    276a:	ec 14       	cp	r14, r12
    276c:	fd 04       	cpc	r15, r13
    276e:	c1 f7       	brne	.-16     	; 0x2760 <xTaskGenericCreate+0x126>
    2770:	86 e7       	ldi	r24, 0x76	; 118
    2772:	92 e2       	ldi	r25, 0x22	; 34
    2774:	90 da       	rcall	.-2784   	; 0x1c96 <vListInitialise>
    2776:	8d e6       	ldi	r24, 0x6D	; 109
    2778:	92 e2       	ldi	r25, 0x22	; 34
    277a:	8d da       	rcall	.-2790   	; 0x1c96 <vListInitialise>
    277c:	80 e6       	ldi	r24, 0x60	; 96
    277e:	92 e2       	ldi	r25, 0x22	; 34
    2780:	8a da       	rcall	.-2796   	; 0x1c96 <vListInitialise>
    2782:	86 e7       	ldi	r24, 0x76	; 118
    2784:	92 e2       	ldi	r25, 0x22	; 34
    2786:	80 93 6b 22 	sts	0x226B, r24	; 0x80226b <pxDelayedTaskList>
    278a:	90 93 6c 22 	sts	0x226C, r25	; 0x80226c <pxDelayedTaskList+0x1>
    278e:	8d e6       	ldi	r24, 0x6D	; 109
    2790:	92 e2       	ldi	r25, 0x22	; 34
    2792:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <pxOverflowDelayedTaskList>
    2796:	90 93 6a 22 	sts	0x226A, r25	; 0x80226a <pxOverflowDelayedTaskList+0x1>
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <xTaskGenericCreate+0x180>
    279c:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <xSchedulerRunning>
    27a0:	81 11       	cpse	r24, r1
    27a2:	0b c0       	rjmp	.+22     	; 0x27ba <xTaskGenericCreate+0x180>
    27a4:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    27a8:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    27ac:	86 89       	ldd	r24, Z+22	; 0x16
    27ae:	08 17       	cp	r16, r24
    27b0:	20 f0       	brcs	.+8      	; 0x27ba <xTaskGenericCreate+0x180>
    27b2:	60 92 ac 22 	sts	0x22AC, r6	; 0x8022ac <pxCurrentTCB>
    27b6:	70 92 ad 22 	sts	0x22AD, r7	; 0x8022ad <pxCurrentTCB+0x1>
    27ba:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <uxTaskNumber>
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <uxTaskNumber>
    27c4:	f3 01       	movw	r30, r6
    27c6:	86 89       	ldd	r24, Z+22	; 0x16
    27c8:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <uxTopReadyPriority>
    27cc:	98 17       	cp	r25, r24
    27ce:	10 f4       	brcc	.+4      	; 0x27d4 <xTaskGenericCreate+0x19a>
    27d0:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <uxTopReadyPriority>
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9c 01       	movw	r18, r24
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	22 0f       	add	r18, r18
    27e2:	33 1f       	adc	r19, r19
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	be 01       	movw	r22, r28
    27ea:	81 58       	subi	r24, 0x81	; 129
    27ec:	9d 4d       	sbci	r25, 0xDD	; 221
    27ee:	65 da       	rcall	.-2870   	; 0x1cba <vListInsertEnd>
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <xSchedulerRunning>
    27f8:	88 23       	and	r24, r24
    27fa:	51 f0       	breq	.+20     	; 0x2810 <xTaskGenericCreate+0x1d6>
    27fc:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2800:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2804:	86 89       	ldd	r24, Z+22	; 0x16
    2806:	80 17       	cp	r24, r16
    2808:	28 f4       	brcc	.+10     	; 0x2814 <xTaskGenericCreate+0x1da>
    280a:	8b db       	rcall	.-2282   	; 0x1f22 <vPortYield>
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	05 c0       	rjmp	.+10     	; 0x281a <xTaskGenericCreate+0x1e0>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	03 c0       	rjmp	.+6      	; 0x281a <xTaskGenericCreate+0x1e0>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	01 c0       	rjmp	.+2      	; 0x281a <xTaskGenericCreate+0x1e0>
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	df 90       	pop	r13
    2828:	cf 90       	pop	r12
    282a:	bf 90       	pop	r11
    282c:	af 90       	pop	r10
    282e:	9f 90       	pop	r9
    2830:	8f 90       	pop	r8
    2832:	7f 90       	pop	r7
    2834:	6f 90       	pop	r6
    2836:	5f 90       	pop	r5
    2838:	4f 90       	pop	r4
    283a:	08 95       	ret

0000283c <vTaskStartScheduler>:
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	a1 2c       	mov	r10, r1
    284c:	b1 2c       	mov	r11, r1
    284e:	c1 2c       	mov	r12, r1
    2850:	d1 2c       	mov	r13, r1
    2852:	e1 2c       	mov	r14, r1
    2854:	f1 2c       	mov	r15, r1
    2856:	00 e0       	ldi	r16, 0x00	; 0
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	45 e5       	ldi	r20, 0x55	; 85
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	66 e1       	ldi	r22, 0x16	; 22
    2862:	70 e2       	ldi	r23, 0x20	; 32
    2864:	81 ee       	ldi	r24, 0xE1	; 225
    2866:	92 e1       	ldi	r25, 0x12	; 18
    2868:	e8 de       	rcall	.-560    	; 0x263a <xTaskGenericCreate>
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	91 f4       	brne	.+36     	; 0x2892 <vTaskStartScheduler+0x56>
    286e:	20 d3       	rcall	.+1600   	; 0x2eb0 <xTimerCreateTimerTask>
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	79 f4       	brne	.+30     	; 0x2892 <vTaskStartScheduler+0x56>
    2874:	f8 94       	cli
    2876:	8f ef       	ldi	r24, 0xFF	; 255
    2878:	9f ef       	ldi	r25, 0xFF	; 255
    287a:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xNextTaskUnblockTime>
    287e:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <xNextTaskUnblockTime+0x1>
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	80 93 5b 22 	sts	0x225B, r24	; 0x80225b <xSchedulerRunning>
    2888:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <xTickCount>
    288c:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <xTickCount+0x1>
    2890:	03 db       	rcall	.-2554   	; 0x1e98 <xPortStartScheduler>
    2892:	0f 91       	pop	r16
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
    289c:	bf 90       	pop	r11
    289e:	af 90       	pop	r10
    28a0:	08 95       	ret

000028a2 <vTaskSuspendAll>:
    28a2:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	80 93 54 22 	sts	0x2254, r24	; 0x802254 <uxSchedulerSuspended>
    28ac:	08 95       	ret

000028ae <xTaskGetTickCount>:
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	0f 92       	push	r0
    28b4:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xTickCount>
    28b8:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xTickCount+0x1>
    28bc:	0f 90       	pop	r0
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	08 95       	ret

000028c2 <xTaskIncrementTick>:
    28c2:	df 92       	push	r13
    28c4:	ef 92       	push	r14
    28c6:	ff 92       	push	r15
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    28d4:	81 11       	cpse	r24, r1
    28d6:	b3 c0       	rjmp	.+358    	; 0x2a3e <xTaskIncrementTick+0x17c>
    28d8:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xTickCount>
    28dc:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xTickCount+0x1>
    28e0:	01 96       	adiw	r24, 0x01	; 1
    28e2:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <xTickCount>
    28e6:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <xTickCount+0x1>
    28ea:	e0 90 5d 22 	lds	r14, 0x225D	; 0x80225d <xTickCount>
    28ee:	f0 90 5e 22 	lds	r15, 0x225E	; 0x80225e <xTickCount+0x1>
    28f2:	e1 14       	cp	r14, r1
    28f4:	f1 04       	cpc	r15, r1
    28f6:	99 f5       	brne	.+102    	; 0x295e <xTaskIncrementTick+0x9c>
    28f8:	80 91 6b 22 	lds	r24, 0x226B	; 0x80226b <pxDelayedTaskList>
    28fc:	90 91 6c 22 	lds	r25, 0x226C	; 0x80226c <pxDelayedTaskList+0x1>
    2900:	20 91 69 22 	lds	r18, 0x2269	; 0x802269 <pxOverflowDelayedTaskList>
    2904:	30 91 6a 22 	lds	r19, 0x226A	; 0x80226a <pxOverflowDelayedTaskList+0x1>
    2908:	20 93 6b 22 	sts	0x226B, r18	; 0x80226b <pxDelayedTaskList>
    290c:	30 93 6c 22 	sts	0x226C, r19	; 0x80226c <pxDelayedTaskList+0x1>
    2910:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <pxOverflowDelayedTaskList>
    2914:	90 93 6a 22 	sts	0x226A, r25	; 0x80226a <pxOverflowDelayedTaskList+0x1>
    2918:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <xNumOfOverflows>
    291c:	8f 5f       	subi	r24, 0xFF	; 255
    291e:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <xNumOfOverflows>
    2922:	e0 91 6b 22 	lds	r30, 0x226B	; 0x80226b <pxDelayedTaskList>
    2926:	f0 91 6c 22 	lds	r31, 0x226C	; 0x80226c <pxDelayedTaskList+0x1>
    292a:	80 81       	ld	r24, Z
    292c:	81 11       	cpse	r24, r1
    292e:	07 c0       	rjmp	.+14     	; 0x293e <xTaskIncrementTick+0x7c>
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	9f ef       	ldi	r25, 0xFF	; 255
    2934:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xNextTaskUnblockTime>
    2938:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <xNextTaskUnblockTime+0x1>
    293c:	10 c0       	rjmp	.+32     	; 0x295e <xTaskIncrementTick+0x9c>
    293e:	e0 91 6b 22 	lds	r30, 0x226B	; 0x80226b <pxDelayedTaskList>
    2942:	f0 91 6c 22 	lds	r31, 0x226C	; 0x80226c <pxDelayedTaskList+0x1>
    2946:	05 80       	ldd	r0, Z+5	; 0x05
    2948:	f6 81       	ldd	r31, Z+6	; 0x06
    294a:	e0 2d       	mov	r30, r0
    294c:	06 80       	ldd	r0, Z+6	; 0x06
    294e:	f7 81       	ldd	r31, Z+7	; 0x07
    2950:	e0 2d       	mov	r30, r0
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xNextTaskUnblockTime>
    295a:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <xNextTaskUnblockTime+0x1>
    295e:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <xNextTaskUnblockTime>
    2962:	90 91 56 22 	lds	r25, 0x2256	; 0x802256 <xNextTaskUnblockTime+0x1>
    2966:	e8 16       	cp	r14, r24
    2968:	f9 06       	cpc	r15, r25
    296a:	10 f4       	brcc	.+4      	; 0x2970 <xTaskIncrementTick+0xae>
    296c:	d1 2c       	mov	r13, r1
    296e:	4f c0       	rjmp	.+158    	; 0x2a0e <xTaskIncrementTick+0x14c>
    2970:	d1 2c       	mov	r13, r1
    2972:	e0 91 6b 22 	lds	r30, 0x226B	; 0x80226b <pxDelayedTaskList>
    2976:	f0 91 6c 22 	lds	r31, 0x226C	; 0x80226c <pxDelayedTaskList+0x1>
    297a:	80 81       	ld	r24, Z
    297c:	81 11       	cpse	r24, r1
    297e:	07 c0       	rjmp	.+14     	; 0x298e <xTaskIncrementTick+0xcc>
    2980:	8f ef       	ldi	r24, 0xFF	; 255
    2982:	9f ef       	ldi	r25, 0xFF	; 255
    2984:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xNextTaskUnblockTime>
    2988:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <xNextTaskUnblockTime+0x1>
    298c:	40 c0       	rjmp	.+128    	; 0x2a0e <xTaskIncrementTick+0x14c>
    298e:	e0 91 6b 22 	lds	r30, 0x226B	; 0x80226b <pxDelayedTaskList>
    2992:	f0 91 6c 22 	lds	r31, 0x226C	; 0x80226c <pxDelayedTaskList+0x1>
    2996:	05 80       	ldd	r0, Z+5	; 0x05
    2998:	f6 81       	ldd	r31, Z+6	; 0x06
    299a:	e0 2d       	mov	r30, r0
    299c:	c6 81       	ldd	r28, Z+6	; 0x06
    299e:	d7 81       	ldd	r29, Z+7	; 0x07
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	e8 16       	cp	r14, r24
    29a6:	f9 06       	cpc	r15, r25
    29a8:	28 f4       	brcc	.+10     	; 0x29b4 <xTaskIncrementTick+0xf2>
    29aa:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <xNextTaskUnblockTime>
    29ae:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <xNextTaskUnblockTime+0x1>
    29b2:	2d c0       	rjmp	.+90     	; 0x2a0e <xTaskIncrementTick+0x14c>
    29b4:	8e 01       	movw	r16, r28
    29b6:	0e 5f       	subi	r16, 0xFE	; 254
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	c8 01       	movw	r24, r16
    29bc:	d0 d9       	rcall	.-3168   	; 0x1d5e <uxListRemove>
    29be:	8c 89       	ldd	r24, Y+20	; 0x14
    29c0:	9d 89       	ldd	r25, Y+21	; 0x15
    29c2:	89 2b       	or	r24, r25
    29c4:	19 f0       	breq	.+6      	; 0x29cc <xTaskIncrementTick+0x10a>
    29c6:	ce 01       	movw	r24, r28
    29c8:	0c 96       	adiw	r24, 0x0c	; 12
    29ca:	c9 d9       	rcall	.-3182   	; 0x1d5e <uxListRemove>
    29cc:	8e 89       	ldd	r24, Y+22	; 0x16
    29ce:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <uxTopReadyPriority>
    29d2:	98 17       	cp	r25, r24
    29d4:	10 f4       	brcc	.+4      	; 0x29da <xTaskIncrementTick+0x118>
    29d6:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <uxTopReadyPriority>
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 01       	movw	r18, r24
    29de:	22 0f       	add	r18, r18
    29e0:	33 1f       	adc	r19, r19
    29e2:	22 0f       	add	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	82 0f       	add	r24, r18
    29ec:	93 1f       	adc	r25, r19
    29ee:	b8 01       	movw	r22, r16
    29f0:	81 58       	subi	r24, 0x81	; 129
    29f2:	9d 4d       	sbci	r25, 0xDD	; 221
    29f4:	62 d9       	rcall	.-3388   	; 0x1cba <vListInsertEnd>
    29f6:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    29fa:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    29fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2a00:	86 89       	ldd	r24, Z+22	; 0x16
    2a02:	98 17       	cp	r25, r24
    2a04:	08 f4       	brcc	.+2      	; 0x2a08 <xTaskIncrementTick+0x146>
    2a06:	b5 cf       	rjmp	.-150    	; 0x2972 <xTaskIncrementTick+0xb0>
    2a08:	dd 24       	eor	r13, r13
    2a0a:	d3 94       	inc	r13
    2a0c:	b2 cf       	rjmp	.-156    	; 0x2972 <xTaskIncrementTick+0xb0>
    2a0e:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2a12:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2a16:	86 89       	ldd	r24, Z+22	; 0x16
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	ee 0f       	add	r30, r30
    2a1e:	ff 1f       	adc	r31, r31
    2a20:	ee 0f       	add	r30, r30
    2a22:	ff 1f       	adc	r31, r31
    2a24:	ee 0f       	add	r30, r30
    2a26:	ff 1f       	adc	r31, r31
    2a28:	8e 0f       	add	r24, r30
    2a2a:	9f 1f       	adc	r25, r31
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e1 58       	subi	r30, 0x81	; 129
    2a30:	fd 4d       	sbci	r31, 0xDD	; 221
    2a32:	80 81       	ld	r24, Z
    2a34:	82 30       	cpi	r24, 0x02	; 2
    2a36:	48 f0       	brcs	.+18     	; 0x2a4a <xTaskIncrementTick+0x188>
    2a38:	dd 24       	eor	r13, r13
    2a3a:	d3 94       	inc	r13
    2a3c:	06 c0       	rjmp	.+12     	; 0x2a4a <xTaskIncrementTick+0x188>
    2a3e:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxPendedTicks>
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <uxPendedTicks>
    2a48:	d1 2c       	mov	r13, r1
    2a4a:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <xYieldPending>
    2a4e:	88 23       	and	r24, r24
    2a50:	11 f0       	breq	.+4      	; 0x2a56 <xTaskIncrementTick+0x194>
    2a52:	dd 24       	eor	r13, r13
    2a54:	d3 94       	inc	r13
    2a56:	8d 2d       	mov	r24, r13
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	08 95       	ret

00002a68 <xTaskResumeAll>:
    2a68:	df 92       	push	r13
    2a6a:	ef 92       	push	r14
    2a6c:	ff 92       	push	r15
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	0f 92       	push	r0
    2a7c:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    2a80:	81 50       	subi	r24, 0x01	; 1
    2a82:	80 93 54 22 	sts	0x2254, r24	; 0x802254 <uxSchedulerSuspended>
    2a86:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	5d c0       	rjmp	.+186    	; 0x2b48 <xTaskResumeAll+0xe0>
    2a8e:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <uxCurrentNumberOfTasks>
    2a92:	81 11       	cpse	r24, r1
    2a94:	30 c0       	rjmp	.+96     	; 0x2af6 <xTaskResumeAll+0x8e>
    2a96:	5b c0       	rjmp	.+182    	; 0x2b4e <xTaskResumeAll+0xe6>
    2a98:	d7 01       	movw	r26, r14
    2a9a:	15 96       	adiw	r26, 0x05	; 5
    2a9c:	ed 91       	ld	r30, X+
    2a9e:	fc 91       	ld	r31, X
    2aa0:	16 97       	sbiw	r26, 0x06	; 6
    2aa2:	c6 81       	ldd	r28, Z+6	; 0x06
    2aa4:	d7 81       	ldd	r29, Z+7	; 0x07
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	0c 96       	adiw	r24, 0x0c	; 12
    2aaa:	59 d9       	rcall	.-3406   	; 0x1d5e <uxListRemove>
    2aac:	8e 01       	movw	r16, r28
    2aae:	0e 5f       	subi	r16, 0xFE	; 254
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	54 d9       	rcall	.-3416   	; 0x1d5e <uxListRemove>
    2ab6:	8e 89       	ldd	r24, Y+22	; 0x16
    2ab8:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <uxTopReadyPriority>
    2abc:	98 17       	cp	r25, r24
    2abe:	10 f4       	brcc	.+4      	; 0x2ac4 <xTaskResumeAll+0x5c>
    2ac0:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <uxTopReadyPriority>
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9c 01       	movw	r18, r24
    2ac8:	22 0f       	add	r18, r18
    2aca:	33 1f       	adc	r19, r19
    2acc:	22 0f       	add	r18, r18
    2ace:	33 1f       	adc	r19, r19
    2ad0:	22 0f       	add	r18, r18
    2ad2:	33 1f       	adc	r19, r19
    2ad4:	82 0f       	add	r24, r18
    2ad6:	93 1f       	adc	r25, r19
    2ad8:	b8 01       	movw	r22, r16
    2ada:	81 58       	subi	r24, 0x81	; 129
    2adc:	9d 4d       	sbci	r25, 0xDD	; 221
    2ade:	ed d8       	rcall	.-3622   	; 0x1cba <vListInsertEnd>
    2ae0:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2ae4:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2ae8:	9e 89       	ldd	r25, Y+22	; 0x16
    2aea:	86 89       	ldd	r24, Z+22	; 0x16
    2aec:	98 17       	cp	r25, r24
    2aee:	58 f0       	brcs	.+22     	; 0x2b06 <xTaskResumeAll+0x9e>
    2af0:	d0 92 59 22 	sts	0x2259, r13	; 0x802259 <xYieldPending>
    2af4:	08 c0       	rjmp	.+16     	; 0x2b06 <xTaskResumeAll+0x9e>
    2af6:	0f 2e       	mov	r0, r31
    2af8:	f0 e6       	ldi	r31, 0x60	; 96
    2afa:	ef 2e       	mov	r14, r31
    2afc:	f2 e2       	ldi	r31, 0x22	; 34
    2afe:	ff 2e       	mov	r15, r31
    2b00:	f0 2d       	mov	r31, r0
    2b02:	dd 24       	eor	r13, r13
    2b04:	d3 94       	inc	r13
    2b06:	f7 01       	movw	r30, r14
    2b08:	80 81       	ld	r24, Z
    2b0a:	81 11       	cpse	r24, r1
    2b0c:	c5 cf       	rjmp	.-118    	; 0x2a98 <xTaskResumeAll+0x30>
    2b0e:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxPendedTicks>
    2b12:	88 23       	and	r24, r24
    2b14:	91 f0       	breq	.+36     	; 0x2b3a <xTaskResumeAll+0xd2>
    2b16:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxPendedTicks>
    2b1a:	88 23       	and	r24, r24
    2b1c:	71 f0       	breq	.+28     	; 0x2b3a <xTaskResumeAll+0xd2>
    2b1e:	c1 e0       	ldi	r28, 0x01	; 1
    2b20:	d0 de       	rcall	.-608    	; 0x28c2 <xTaskIncrementTick>
    2b22:	81 11       	cpse	r24, r1
    2b24:	c0 93 59 22 	sts	0x2259, r28	; 0x802259 <xYieldPending>
    2b28:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxPendedTicks>
    2b2c:	81 50       	subi	r24, 0x01	; 1
    2b2e:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <uxPendedTicks>
    2b32:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <uxPendedTicks>
    2b36:	81 11       	cpse	r24, r1
    2b38:	f3 cf       	rjmp	.-26     	; 0x2b20 <xTaskResumeAll+0xb8>
    2b3a:	80 91 59 22 	lds	r24, 0x2259	; 0x802259 <xYieldPending>
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	29 f4       	brne	.+10     	; 0x2b4c <xTaskResumeAll+0xe4>
    2b42:	ef d9       	rcall	.-3106   	; 0x1f22 <vPortYield>
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	03 c0       	rjmp	.+6      	; 0x2b4e <xTaskResumeAll+0xe6>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	01 c0       	rjmp	.+2      	; 0x2b4e <xTaskResumeAll+0xe6>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	0f 90       	pop	r0
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	ef 90       	pop	r14
    2b5e:	df 90       	pop	r13
    2b60:	08 95       	ret

00002b62 <vTaskDelay>:
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	ec 01       	movw	r28, r24
    2b68:	89 2b       	or	r24, r25
    2b6a:	91 f0       	breq	.+36     	; 0x2b90 <vTaskDelay+0x2e>
    2b6c:	9a de       	rcall	.-716    	; 0x28a2 <vTaskSuspendAll>
    2b6e:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xTickCount>
    2b72:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xTickCount+0x1>
    2b76:	c8 0f       	add	r28, r24
    2b78:	d9 1f       	adc	r29, r25
    2b7a:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2b7e:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2b82:	02 96       	adiw	r24, 0x02	; 2
    2b84:	ec d8       	rcall	.-3624   	; 0x1d5e <uxListRemove>
    2b86:	ce 01       	movw	r24, r28
    2b88:	23 dd       	rcall	.-1466   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2b8a:	6e df       	rcall	.-292    	; 0x2a68 <xTaskResumeAll>
    2b8c:	81 11       	cpse	r24, r1
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <vTaskDelay+0x30>
    2b90:	c8 d9       	rcall	.-3184   	; 0x1f22 <vPortYield>
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <vTaskSwitchContext>:
    2b98:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    2b9c:	88 23       	and	r24, r24
    2b9e:	21 f0       	breq	.+8      	; 0x2ba8 <vTaskSwitchContext+0x10>
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <xYieldPending>
    2ba6:	08 95       	ret
    2ba8:	10 92 59 22 	sts	0x2259, r1	; 0x802259 <xYieldPending>
    2bac:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxTopReadyPriority>
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	ee 0f       	add	r30, r30
    2bb6:	ff 1f       	adc	r31, r31
    2bb8:	ee 0f       	add	r30, r30
    2bba:	ff 1f       	adc	r31, r31
    2bbc:	ee 0f       	add	r30, r30
    2bbe:	ff 1f       	adc	r31, r31
    2bc0:	8e 0f       	add	r24, r30
    2bc2:	9f 1f       	adc	r25, r31
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e1 58       	subi	r30, 0x81	; 129
    2bc8:	fd 4d       	sbci	r31, 0xDD	; 221
    2bca:	80 81       	ld	r24, Z
    2bcc:	81 11       	cpse	r24, r1
    2bce:	17 c0       	rjmp	.+46     	; 0x2bfe <vTaskSwitchContext+0x66>
    2bd0:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxTopReadyPriority>
    2bd4:	81 50       	subi	r24, 0x01	; 1
    2bd6:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <uxTopReadyPriority>
    2bda:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxTopReadyPriority>
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	fc 01       	movw	r30, r24
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	ee 0f       	add	r30, r30
    2be8:	ff 1f       	adc	r31, r31
    2bea:	ee 0f       	add	r30, r30
    2bec:	ff 1f       	adc	r31, r31
    2bee:	8e 0f       	add	r24, r30
    2bf0:	9f 1f       	adc	r25, r31
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e1 58       	subi	r30, 0x81	; 129
    2bf6:	fd 4d       	sbci	r31, 0xDD	; 221
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 23       	and	r24, r24
    2bfc:	49 f3       	breq	.-46     	; 0x2bd0 <vTaskSwitchContext+0x38>
    2bfe:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <uxTopReadyPriority>
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9c 01       	movw	r18, r24
    2c06:	22 0f       	add	r18, r18
    2c08:	33 1f       	adc	r19, r19
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	22 0f       	add	r18, r18
    2c10:	33 1f       	adc	r19, r19
    2c12:	28 0f       	add	r18, r24
    2c14:	39 1f       	adc	r19, r25
    2c16:	d9 01       	movw	r26, r18
    2c18:	a1 58       	subi	r26, 0x81	; 129
    2c1a:	bd 4d       	sbci	r27, 0xDD	; 221
    2c1c:	11 96       	adiw	r26, 0x01	; 1
    2c1e:	ed 91       	ld	r30, X+
    2c20:	fc 91       	ld	r31, X
    2c22:	12 97       	sbiw	r26, 0x02	; 2
    2c24:	02 80       	ldd	r0, Z+2	; 0x02
    2c26:	f3 81       	ldd	r31, Z+3	; 0x03
    2c28:	e0 2d       	mov	r30, r0
    2c2a:	11 96       	adiw	r26, 0x01	; 1
    2c2c:	ed 93       	st	X+, r30
    2c2e:	fc 93       	st	X, r31
    2c30:	12 97       	sbiw	r26, 0x02	; 2
    2c32:	2e 57       	subi	r18, 0x7E	; 126
    2c34:	3d 4d       	sbci	r19, 0xDD	; 221
    2c36:	e2 17       	cp	r30, r18
    2c38:	f3 07       	cpc	r31, r19
    2c3a:	29 f4       	brne	.+10     	; 0x2c46 <vTaskSwitchContext+0xae>
    2c3c:	22 81       	ldd	r18, Z+2	; 0x02
    2c3e:	33 81       	ldd	r19, Z+3	; 0x03
    2c40:	fd 01       	movw	r30, r26
    2c42:	21 83       	std	Z+1, r18	; 0x01
    2c44:	32 83       	std	Z+2, r19	; 0x02
    2c46:	fc 01       	movw	r30, r24
    2c48:	ee 0f       	add	r30, r30
    2c4a:	ff 1f       	adc	r31, r31
    2c4c:	ee 0f       	add	r30, r30
    2c4e:	ff 1f       	adc	r31, r31
    2c50:	ee 0f       	add	r30, r30
    2c52:	ff 1f       	adc	r31, r31
    2c54:	8e 0f       	add	r24, r30
    2c56:	9f 1f       	adc	r25, r31
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e1 58       	subi	r30, 0x81	; 129
    2c5c:	fd 4d       	sbci	r31, 0xDD	; 221
    2c5e:	01 80       	ldd	r0, Z+1	; 0x01
    2c60:	f2 81       	ldd	r31, Z+2	; 0x02
    2c62:	e0 2d       	mov	r30, r0
    2c64:	86 81       	ldd	r24, Z+6	; 0x06
    2c66:	97 81       	ldd	r25, Z+7	; 0x07
    2c68:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <pxCurrentTCB>
    2c6c:	90 93 ad 22 	sts	0x22AD, r25	; 0x8022ad <pxCurrentTCB+0x1>
    2c70:	08 95       	ret

00002c72 <vTaskPlaceOnEventList>:
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	eb 01       	movw	r28, r22
    2c78:	60 91 ac 22 	lds	r22, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2c7c:	70 91 ad 22 	lds	r23, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2c80:	64 5f       	subi	r22, 0xF4	; 244
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255
    2c84:	3b d8       	rcall	.-3978   	; 0x1cfc <vListInsert>
    2c86:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2c8a:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2c8e:	02 96       	adiw	r24, 0x02	; 2
    2c90:	66 d8       	rcall	.-3892   	; 0x1d5e <uxListRemove>
    2c92:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xTickCount>
    2c96:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xTickCount+0x1>
    2c9a:	8c 0f       	add	r24, r28
    2c9c:	9d 1f       	adc	r25, r29
    2c9e:	98 dc       	rcall	.-1744   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	08 95       	ret

00002ca6 <vTaskPlaceOnEventListRestricted>:
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	eb 01       	movw	r28, r22
    2cac:	60 91 ac 22 	lds	r22, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2cb0:	70 91 ad 22 	lds	r23, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2cb4:	64 5f       	subi	r22, 0xF4	; 244
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	00 d8       	rcall	.-4096   	; 0x1cba <vListInsertEnd>
    2cba:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2cbe:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2cc2:	02 96       	adiw	r24, 0x02	; 2
    2cc4:	4c d8       	rcall	.-3944   	; 0x1d5e <uxListRemove>
    2cc6:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <xTickCount>
    2cca:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <xTickCount+0x1>
    2cce:	8c 0f       	add	r24, r28
    2cd0:	9d 1f       	adc	r25, r29
    2cd2:	7e dc       	rcall	.-1796   	; 0x25d0 <prvAddCurrentTaskToDelayedList>
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <xTaskRemoveFromEventList>:
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	15 96       	adiw	r26, 0x05	; 5
    2ce6:	ed 91       	ld	r30, X+
    2ce8:	fc 91       	ld	r31, X
    2cea:	16 97       	sbiw	r26, 0x06	; 6
    2cec:	c6 81       	ldd	r28, Z+6	; 0x06
    2cee:	d7 81       	ldd	r29, Z+7	; 0x07
    2cf0:	8e 01       	movw	r16, r28
    2cf2:	04 5f       	subi	r16, 0xF4	; 244
    2cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	32 d8       	rcall	.-3996   	; 0x1d5e <uxListRemove>
    2cfa:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    2cfe:	81 11       	cpse	r24, r1
    2d00:	1b c0       	rjmp	.+54     	; 0x2d38 <xTaskRemoveFromEventList+0x5e>
    2d02:	0a 50       	subi	r16, 0x0A	; 10
    2d04:	11 09       	sbc	r17, r1
    2d06:	c8 01       	movw	r24, r16
    2d08:	2a d8       	rcall	.-4012   	; 0x1d5e <uxListRemove>
    2d0a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d0c:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <uxTopReadyPriority>
    2d10:	98 17       	cp	r25, r24
    2d12:	10 f4       	brcc	.+4      	; 0x2d18 <xTaskRemoveFromEventList+0x3e>
    2d14:	80 93 5c 22 	sts	0x225C, r24	; 0x80225c <uxTopReadyPriority>
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9c 01       	movw	r18, r24
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	22 0f       	add	r18, r18
    2d22:	33 1f       	adc	r19, r19
    2d24:	22 0f       	add	r18, r18
    2d26:	33 1f       	adc	r19, r19
    2d28:	82 0f       	add	r24, r18
    2d2a:	93 1f       	adc	r25, r19
    2d2c:	b8 01       	movw	r22, r16
    2d2e:	81 58       	subi	r24, 0x81	; 129
    2d30:	9d 4d       	sbci	r25, 0xDD	; 221
    2d32:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <vListInsertEnd>
    2d36:	05 c0       	rjmp	.+10     	; 0x2d42 <xTaskRemoveFromEventList+0x68>
    2d38:	b8 01       	movw	r22, r16
    2d3a:	80 e6       	ldi	r24, 0x60	; 96
    2d3c:	92 e2       	ldi	r25, 0x22	; 34
    2d3e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <vListInsertEnd>
    2d42:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <pxCurrentTCB>
    2d46:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <pxCurrentTCB+0x1>
    2d4a:	9e 89       	ldd	r25, Y+22	; 0x16
    2d4c:	86 89       	ldd	r24, Z+22	; 0x16
    2d4e:	89 17       	cp	r24, r25
    2d50:	20 f4       	brcc	.+8      	; 0x2d5a <xTaskRemoveFromEventList+0x80>
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <xYieldPending>
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <xTaskRemoveFromEventList+0x82>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	08 95       	ret

00002d66 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2d66:	20 91 58 22 	lds	r18, 0x2258	; 0x802258 <xNumOfOverflows>
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    2d6e:	20 91 5d 22 	lds	r18, 0x225D	; 0x80225d <xTickCount>
    2d72:	30 91 5e 22 	lds	r19, 0x225E	; 0x80225e <xTickCount+0x1>
    2d76:	21 83       	std	Z+1, r18	; 0x01
    2d78:	32 83       	std	Z+2, r19	; 0x02
    2d7a:	08 95       	ret

00002d7c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2d88:	20 91 5d 22 	lds	r18, 0x225D	; 0x80225d <xTickCount>
    2d8c:	30 91 5e 22 	lds	r19, 0x225E	; 0x80225e <xTickCount+0x1>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2d90:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <xNumOfOverflows>
    2d94:	90 81       	ld	r25, Z
    2d96:	98 17       	cp	r25, r24
    2d98:	29 f0       	breq	.+10     	; 0x2da4 <xTaskCheckForTimeOut+0x28>
    2d9a:	81 81       	ldd	r24, Z+1	; 0x01
    2d9c:	92 81       	ldd	r25, Z+2	; 0x02
    2d9e:	28 17       	cp	r18, r24
    2da0:	39 07       	cpc	r19, r25
    2da2:	a8 f4       	brcc	.+42     	; 0x2dce <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2da4:	a1 81       	ldd	r26, Z+1	; 0x01
    2da6:	b2 81       	ldd	r27, Z+2	; 0x02
    2da8:	eb 01       	movw	r28, r22
    2daa:	48 81       	ld	r20, Y
    2dac:	59 81       	ldd	r21, Y+1	; 0x01
    2dae:	c9 01       	movw	r24, r18
    2db0:	8a 1b       	sub	r24, r26
    2db2:	9b 0b       	sbc	r25, r27
    2db4:	84 17       	cp	r24, r20
    2db6:	95 07       	cpc	r25, r21
    2db8:	60 f4       	brcc	.+24     	; 0x2dd2 <xTaskCheckForTimeOut+0x56>
    2dba:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    2dbc:	a2 1b       	sub	r26, r18
    2dbe:	b3 0b       	sbc	r27, r19
    2dc0:	4a 0f       	add	r20, r26
    2dc2:	5b 1f       	adc	r21, r27
    2dc4:	48 83       	st	Y, r20
			vTaskSetTimeOutState( pxTimeOut );
    2dc6:	59 83       	std	Y+1, r21	; 0x01
			xReturn = pdFALSE;
    2dc8:	ce df       	rcall	.-100    	; 0x2d66 <vTaskSetTimeOutState>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <xTaskCheckForTimeOut+0x58>
    2dce:	81 e0       	ldi	r24, 0x01	; 1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <xTaskCheckForTimeOut+0x58>
		}
	}
	taskEXIT_CRITICAL();
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	0f 90       	pop	r0

	return xReturn;
}
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	08 95       	ret

00002dde <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	80 93 59 22 	sts	0x2259, r24	; 0x802259 <xYieldPending>
    2de4:	08 95       	ret

00002de6 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2de6:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <xSchedulerRunning>
    2dea:	88 23       	and	r24, r24
    2dec:	31 f0       	breq	.+12     	; 0x2dfa <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2dee:	80 91 54 22 	lds	r24, 0x2254	; 0x802254 <uxSchedulerSuspended>
    2df2:	88 23       	and	r24, r24
    2df4:	21 f0       	breq	.+8      	; 0x2dfe <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	08 95       	ret
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
			{
				xReturn = taskSCHEDULER_RUNNING;
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    2e00:	08 95       	ret

00002e02 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2e02:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2e04:	62 83       	std	Z+2, r22	; 0x02
    2e06:	73 83       	std	Z+3, r23	; 0x03
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2e08:	80 87       	std	Z+8, r24	; 0x08
    2e0a:	91 87       	std	Z+9, r25	; 0x09

	if( xNextExpiryTime <= xTimeNow )
    2e0c:	46 17       	cp	r20, r22
    2e0e:	57 07       	cpc	r21, r23
    2e10:	90 f0       	brcs	.+36     	; 0x2e36 <prvInsertTimerInActiveList+0x34>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2e12:	42 1b       	sub	r20, r18
    2e14:	53 0b       	sbc	r21, r19
    2e16:	84 85       	ldd	r24, Z+12	; 0x0c
    2e18:	95 85       	ldd	r25, Z+13	; 0x0d
    2e1a:	48 17       	cp	r20, r24
    2e1c:	59 07       	cpc	r21, r25
    2e1e:	e0 f4       	brcc	.+56     	; 0x2e58 <prvInsertTimerInActiveList+0x56>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2e20:	bf 01       	movw	r22, r30
    2e22:	6e 5f       	subi	r22, 0xFE	; 254
    2e24:	7f 4f       	sbci	r23, 0xFF	; 255
    2e26:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <pxOverflowTimerList>
    2e2a:	90 91 b3 22 	lds	r25, 0x22B3	; 0x8022b3 <pxOverflowTimerList+0x1>
    2e2e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	08 95       	ret
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2e36:	42 17       	cp	r20, r18
    2e38:	53 07       	cpc	r21, r19
    2e3a:	18 f4       	brcc	.+6      	; 0x2e42 <prvInsertTimerInActiveList+0x40>
    2e3c:	62 17       	cp	r22, r18
    2e3e:	73 07       	cpc	r23, r19
    2e40:	68 f4       	brcc	.+26     	; 0x2e5c <prvInsertTimerInActiveList+0x5a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2e42:	bf 01       	movw	r22, r30
    2e44:	6e 5f       	subi	r22, 0xFE	; 254
    2e46:	7f 4f       	sbci	r23, 0xFF	; 255
    2e48:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <pxCurrentTimerList>
    2e4c:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <pxCurrentTimerList+0x1>
    2e50:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	08 95       	ret
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	08 95       	ret
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    2e5e:	08 95       	ret

00002e60 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	0f 92       	push	r0
	{
		if( xTimerQueue == NULL )
    2e66:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <xTimerQueue>
    2e6a:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
    2e6e:	89 2b       	or	r24, r25
    2e70:	e1 f4       	brne	.+56     	; 0x2eaa <prvCheckForValidListAndQueue+0x4a>
		{
			vListInitialise( &xActiveTimerList1 );
    2e72:	8f eb       	ldi	r24, 0xBF	; 191
    2e74:	92 e2       	ldi	r25, 0x22	; 34
    2e76:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    2e7a:	86 eb       	ldi	r24, 0xB6	; 182
    2e7c:	92 e2       	ldi	r25, 0x22	; 34
    2e7e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    2e82:	8f eb       	ldi	r24, 0xBF	; 191
    2e84:	92 e2       	ldi	r25, 0x22	; 34
    2e86:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <pxCurrentTimerList>
    2e8a:	90 93 b5 22 	sts	0x22B5, r25	; 0x8022b5 <pxCurrentTimerList+0x1>
			pxOverflowTimerList = &xActiveTimerList2;
    2e8e:	86 eb       	ldi	r24, 0xB6	; 182
    2e90:	92 e2       	ldi	r25, 0x22	; 34
    2e92:	80 93 b2 22 	sts	0x22B2, r24	; 0x8022b2 <pxOverflowTimerList>
    2e96:	90 93 b3 22 	sts	0x22B3, r25	; 0x8022b3 <pxOverflowTimerList+0x1>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	65 e0       	ldi	r22, 0x05	; 5
    2e9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ea0:	f2 d9       	rcall	.-3100   	; 0x2286 <xQueueGenericCreate>
    2ea2:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <xTimerQueue>
    2ea6:	90 93 b1 22 	sts	0x22B1, r25	; 0x8022b1 <xTimerQueue+0x1>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	08 95       	ret

00002eb0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2eb0:	af 92       	push	r10
    2eb2:	bf 92       	push	r11
    2eb4:	cf 92       	push	r12
    2eb6:	df 92       	push	r13
    2eb8:	ef 92       	push	r14
    2eba:	ff 92       	push	r15

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2ebc:	0f 93       	push	r16

	if( xTimerQueue != NULL )
    2ebe:	d0 df       	rcall	.-96     	; 0x2e60 <prvCheckForValidListAndQueue>
    2ec0:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <xTimerQueue>
    2ec4:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
    2ec8:	89 2b       	or	r24, r25
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    2eca:	89 f0       	breq	.+34     	; 0x2eee <xTimerCreateTimerTask+0x3e>
    2ecc:	a1 2c       	mov	r10, r1
    2ece:	b1 2c       	mov	r11, r1
    2ed0:	c1 2c       	mov	r12, r1
    2ed2:	d1 2c       	mov	r13, r1
    2ed4:	e1 2c       	mov	r14, r1
    2ed6:	f1 2c       	mov	r15, r1
    2ed8:	03 e0       	ldi	r16, 0x03	; 3
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	45 e5       	ldi	r20, 0x55	; 85
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	6b e1       	ldi	r22, 0x1B	; 27
    2ee4:	70 e2       	ldi	r23, 0x20	; 32
    2ee6:	86 e6       	ldi	r24, 0x66	; 102
    2ee8:	98 e1       	ldi	r25, 0x18	; 24
    2eea:	a7 db       	rcall	.-2226   	; 0x263a <xTaskGenericCreate>

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    2eec:	01 c0       	rjmp	.+2      	; 0x2ef0 <xTimerCreateTimerTask+0x40>
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
}
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	08 95       	ret

00002f00 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2f00:	8f 92       	push	r8
    2f02:	9f 92       	push	r9
    2f04:	bf 92       	push	r11
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
    2f16:	61 15       	cp	r22, r1
    2f18:	71 05       	cpc	r23, r1
    2f1a:	c9 f0       	breq	.+50     	; 0x2f4e <xTimerCreate+0x4e>
    2f1c:	69 01       	movw	r12, r18
    2f1e:	b4 2e       	mov	r11, r20
    2f20:	7b 01       	movw	r14, r22
    2f22:	4c 01       	movw	r8, r24
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    2f24:	83 e1       	ldi	r24, 0x13	; 19
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	ae d8       	rcall	.-3748   	; 0x2086 <pvPortMalloc>
    2f2a:	ec 01       	movw	r28, r24
		if( pxNewTimer != NULL )
    2f2c:	89 2b       	or	r24, r25
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    2f2e:	89 f0       	breq	.+34     	; 0x2f52 <xTimerCreate+0x52>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    2f30:	97 df       	rcall	.-210    	; 0x2e60 <prvCheckForValidListAndQueue>
    2f32:	88 82       	st	Y, r8
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2f34:	99 82       	std	Y+1, r9	; 0x01
    2f36:	ec 86       	std	Y+12, r14	; 0x0c
			pxNewTimer->uxAutoReload = uxAutoReload;
    2f38:	fd 86       	std	Y+13, r15	; 0x0d
			pxNewTimer->pvTimerID = pvTimerID;
    2f3a:	be 86       	std	Y+14, r11	; 0x0e
    2f3c:	cf 86       	std	Y+15, r12	; 0x0f
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2f3e:	d8 8a       	std	Y+16, r13	; 0x10
    2f40:	09 8b       	std	Y+17, r16	; 0x11
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2f42:	1a 8b       	std	Y+18, r17	; 0x12
    2f44:	ce 01       	movw	r24, r28
    2f46:	02 96       	adiw	r24, 0x02	; 2
    2f48:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <vListInitialiseItem>
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
	{
		pxNewTimer = NULL;
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <xTimerCreate+0x52>
    2f4e:	c0 e0       	ldi	r28, 0x00	; 0

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
}
    2f50:	d0 e0       	ldi	r29, 0x00	; 0
    2f52:	ce 01       	movw	r24, r28
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	ff 90       	pop	r15
    2f5e:	ef 90       	pop	r14
    2f60:	df 90       	pop	r13
    2f62:	cf 90       	pop	r12
    2f64:	bf 90       	pop	r11
    2f66:	9f 90       	pop	r9
    2f68:	8f 90       	pop	r8
    2f6a:	08 95       	ret

00002f6c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	25 97       	sbiw	r28, 0x05	; 5
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	de bf       	out	0x3e, r29	; 62

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2f7e:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <xTimerQueue>
    2f82:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
    2f86:	30 97       	sbiw	r30, 0x00	; 0
    2f88:	51 f1       	breq	.+84     	; 0x2fde <xTimerGenericCommand+0x72>
    2f8a:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2f8c:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2f8e:	4a 83       	std	Y+2, r20	; 0x02
    2f90:	5b 83       	std	Y+3, r21	; 0x03
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2f92:	8c 83       	std	Y+4, r24	; 0x04
    2f94:	9d 83       	std	Y+5, r25	; 0x05

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2f96:	66 30       	cpi	r22, 0x06	; 6
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2f98:	d4 f4       	brge	.+52     	; 0x2fce <xTimerGenericCommand+0x62>
    2f9a:	25 df       	rcall	.-438    	; 0x2de6 <xTaskGetSchedulerState>
    2f9c:	82 30       	cpi	r24, 0x02	; 2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2f9e:	59 f4       	brne	.+22     	; 0x2fb6 <xTimerGenericCommand+0x4a>
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	a8 01       	movw	r20, r16
    2fa4:	be 01       	movw	r22, r28
    2fa6:	6f 5f       	subi	r22, 0xFF	; 255
    2fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2faa:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <xTimerQueue>
    2fae:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
    2fb2:	92 d9       	rcall	.-3292   	; 0x22d8 <xQueueGenericSend>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2fb4:	15 c0       	rjmp	.+42     	; 0x2fe0 <xTimerGenericCommand+0x74>
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	50 e0       	ldi	r21, 0x00	; 0
    2fbc:	be 01       	movw	r22, r28
    2fbe:	6f 5f       	subi	r22, 0xFF	; 255
    2fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc2:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <xTimerQueue>
    2fc6:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
    2fca:	86 d9       	rcall	.-3316   	; 0x22d8 <xQueueGenericSend>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2fcc:	09 c0       	rjmp	.+18     	; 0x2fe0 <xTimerGenericCommand+0x74>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	ad 01       	movw	r20, r26
    2fd2:	be 01       	movw	r22, r28
    2fd4:	6f 5f       	subi	r22, 0xFF	; 255
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	cf 01       	movw	r24, r30
    2fda:	0b da       	rcall	.-3050   	; 0x23f2 <xQueueGenericSendFromISR>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <xTimerGenericCommand+0x74>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	25 96       	adiw	r28, 0x05	; 5
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	08 95       	ret

00002ff0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    3004:	6c 01       	movw	r12, r24
    3006:	53 dc       	rcall	.-1882   	; 0x28ae <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
    3008:	7c 01       	movw	r14, r24
    300a:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <xLastTime.4459>
    300e:	90 91 af 22 	lds	r25, 0x22AF	; 0x8022af <xLastTime.4459+0x1>
    3012:	e8 16       	cp	r14, r24
    3014:	f9 06       	cpc	r15, r25
    3016:	08 f0       	brcs	.+2      	; 0x301a <prvSampleTimeNow+0x2a>
    3018:	47 c0       	rjmp	.+142    	; 0x30a8 <prvSampleTimeNow+0xb8>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    301a:	2f c0       	rjmp	.+94     	; 0x307a <prvSampleTimeNow+0x8a>
    301c:	05 80       	ldd	r0, Z+5	; 0x05
    301e:	f6 81       	ldd	r31, Z+6	; 0x06
    3020:	e0 2d       	mov	r30, r0
    3022:	a0 80       	ld	r10, Z

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3024:	b1 80       	ldd	r11, Z+1	; 0x01
    3026:	c6 81       	ldd	r28, Z+6	; 0x06
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3028:	d7 81       	ldd	r29, Z+7	; 0x07
    302a:	8e 01       	movw	r16, r28
    302c:	0e 5f       	subi	r16, 0xFE	; 254
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	c8 01       	movw	r24, r16
    3032:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3036:	e9 89       	ldd	r30, Y+17	; 0x11
    3038:	fa 89       	ldd	r31, Y+18	; 0x12
    303a:	ce 01       	movw	r24, r28

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    303c:	19 95       	eicall
    303e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3040:	81 30       	cpi	r24, 0x01	; 1
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3042:	d9 f4       	brne	.+54     	; 0x307a <prvSampleTimeNow+0x8a>
    3044:	8c 85       	ldd	r24, Y+12	; 0x0c
    3046:	9d 85       	ldd	r25, Y+13	; 0x0d
    3048:	8a 0d       	add	r24, r10
			if( xReloadTime > xNextExpireTime )
    304a:	9b 1d       	adc	r25, r11
    304c:	a8 16       	cp	r10, r24
    304e:	b9 06       	cpc	r11, r25
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3050:	60 f4       	brcc	.+24     	; 0x306a <prvSampleTimeNow+0x7a>
    3052:	8a 83       	std	Y+2, r24	; 0x02
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3054:	9b 83       	std	Y+3, r25	; 0x03
    3056:	c8 87       	std	Y+8, r28	; 0x08
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3058:	d9 87       	std	Y+9, r29	; 0x09
    305a:	b8 01       	movw	r22, r16
    305c:	80 91 b4 22 	lds	r24, 0x22B4	; 0x8022b4 <pxCurrentTimerList>
    3060:	90 91 b5 22 	lds	r25, 0x22B5	; 0x8022b5 <pxCurrentTimerList+0x1>
    3064:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vListInsert>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3068:	08 c0       	rjmp	.+16     	; 0x307a <prvSampleTimeNow+0x8a>
    306a:	00 e0       	ldi	r16, 0x00	; 0
    306c:	10 e0       	ldi	r17, 0x00	; 0
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	a5 01       	movw	r20, r10
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	ce 01       	movw	r24, r28

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3078:	79 df       	rcall	.-270    	; 0x2f6c <xTimerGenericCommand>
    307a:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <pxCurrentTimerList>
    307e:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <pxCurrentTimerList+0x1>
    3082:	80 81       	ld	r24, Z
    3084:	81 11       	cpse	r24, r1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    3086:	ca cf       	rjmp	.-108    	; 0x301c <prvSampleTimeNow+0x2c>
    3088:	80 91 b2 22 	lds	r24, 0x22B2	; 0x8022b2 <pxOverflowTimerList>
    308c:	90 91 b3 22 	lds	r25, 0x22B3	; 0x8022b3 <pxOverflowTimerList+0x1>
    3090:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <pxCurrentTimerList>
    3094:	90 93 b5 22 	sts	0x22B5, r25	; 0x8022b5 <pxCurrentTimerList+0x1>
	pxOverflowTimerList = pxTemp;
    3098:	e0 93 b2 22 	sts	0x22B2, r30	; 0x8022b2 <pxOverflowTimerList>
    309c:	f0 93 b3 22 	sts	0x22B3, r31	; 0x8022b3 <pxOverflowTimerList+0x1>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	f6 01       	movw	r30, r12
    30a4:	80 83       	st	Z, r24
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <prvSampleTimeNow+0xbc>
    30a8:	f6 01       	movw	r30, r12
	}

	xLastTime = xTimeNow;
    30aa:	10 82       	st	Z, r1
    30ac:	e0 92 ae 22 	sts	0x22AE, r14	; 0x8022ae <xLastTime.4459>
    30b0:	f0 92 af 22 	sts	0x22AF, r15	; 0x8022af <xLastTime.4459+0x1>

	return xTimeNow;
}
    30b4:	c7 01       	movw	r24, r14
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	1f 91       	pop	r17
    30bc:	0f 91       	pop	r16
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	bf 90       	pop	r11
    30c8:	af 90       	pop	r10
    30ca:	08 95       	ret

000030cc <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <prvTimerTask+0x6>
    30d2:	00 d0       	rcall	.+0      	; 0x30d4 <prvTimerTask+0x8>
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30d8:	ce 01       	movw	r24, r28
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	5c 01       	movw	r10, r24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    30de:	e8 2e       	mov	r14, r24
    30e0:	fb 2c       	mov	r15, r11
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    30e2:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <pxCurrentTimerList>
    30e6:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    30ea:	80 81       	ld	r24, Z
    30ec:	88 23       	and	r24, r24
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <prvTimerTask+0x26>
    30f0:	b6 c0       	rjmp	.+364    	; 0x325e <prvTimerTask+0x192>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30f2:	05 80       	ldd	r0, Z+5	; 0x05
    30f4:	f6 81       	ldd	r31, Z+6	; 0x06
    30f6:	e0 2d       	mov	r30, r0
    30f8:	c0 80       	ld	r12, Z
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    30fa:	d1 80       	ldd	r13, Z+1	; 0x01
    30fc:	d2 db       	rcall	.-2140   	; 0x28a2 <vTaskSuspendAll>
    30fe:	c5 01       	movw	r24, r10
		if( xTimerListsWereSwitched == pdFALSE )
    3100:	77 df       	rcall	.-274    	; 0x2ff0 <prvSampleTimeNow>
    3102:	8c 01       	movw	r16, r24
    3104:	89 81       	ldd	r24, Y+1	; 0x01
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3106:	81 11       	cpse	r24, r1
    3108:	42 c0       	rjmp	.+132    	; 0x318e <prvTimerTask+0xc2>
			{
				( void ) xTaskResumeAll();
    310a:	0c 15       	cp	r16, r12
    310c:	1d 05       	cpc	r17, r13
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    310e:	80 f1       	brcs	.+96     	; 0x3170 <prvTimerTask+0xa4>
    3110:	ab dc       	rcall	.-1706   	; 0x2a68 <xTaskResumeAll>
    3112:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <pxCurrentTimerList>
    3116:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <pxCurrentTimerList+0x1>
    311a:	05 80       	ldd	r0, Z+5	; 0x05
    311c:	f6 81       	ldd	r31, Z+6	; 0x06
    311e:	e0 2d       	mov	r30, r0

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3120:	86 80       	ldd	r8, Z+6	; 0x06
    3122:	97 80       	ldd	r9, Z+7	; 0x07
    3124:	c4 01       	movw	r24, r8
    3126:	02 96       	adiw	r24, 0x02	; 2
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3128:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <uxListRemove>
    312c:	d4 01       	movw	r26, r8
    312e:	1e 96       	adiw	r26, 0x0e	; 14
    3130:	8c 91       	ld	r24, X
    3132:	1e 97       	sbiw	r26, 0x0e	; 14
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    3134:	81 30       	cpi	r24, 0x01	; 1
    3136:	a1 f4       	brne	.+40     	; 0x3160 <prvTimerTask+0x94>
    3138:	1c 96       	adiw	r26, 0x0c	; 12
    313a:	6d 91       	ld	r22, X+
    313c:	7c 91       	ld	r23, X
    313e:	1d 97       	sbiw	r26, 0x0d	; 13
    3140:	6c 0d       	add	r22, r12
    3142:	7d 1d       	adc	r23, r13
    3144:	96 01       	movw	r18, r12
    3146:	a8 01       	movw	r20, r16
    3148:	c4 01       	movw	r24, r8
    314a:	5b de       	rcall	.-842    	; 0x2e02 <prvInsertTimerInActiveList>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    314c:	81 30       	cpi	r24, 0x01	; 1
    314e:	41 f4       	brne	.+16     	; 0x3160 <prvTimerTask+0x94>
    3150:	00 e0       	ldi	r16, 0x00	; 0
    3152:	10 e0       	ldi	r17, 0x00	; 0
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	a6 01       	movw	r20, r12
    315a:	60 e0       	ldi	r22, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    315c:	c4 01       	movw	r24, r8
    315e:	06 df       	rcall	.-500    	; 0x2f6c <xTimerGenericCommand>
    3160:	d4 01       	movw	r26, r8
    3162:	51 96       	adiw	r26, 0x11	; 17
    3164:	ed 91       	ld	r30, X+
    3166:	fc 91       	ld	r31, X
    3168:	52 97       	sbiw	r26, 0x12	; 18
    316a:	c4 01       	movw	r24, r8
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    316c:	19 95       	eicall
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    316e:	6a c0       	rjmp	.+212    	; 0x3244 <prvTimerTask+0x178>
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	b6 01       	movw	r22, r12
    3174:	60 1b       	sub	r22, r16
    3176:	71 0b       	sbc	r23, r17
    3178:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <xTimerQueue>

				if( xTaskResumeAll() == pdFALSE )
    317c:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    3180:	05 da       	rcall	.-3062   	; 0x258c <vQueueWaitForMessageRestricted>
    3182:	72 dc       	rcall	.-1820   	; 0x2a68 <xTaskResumeAll>
    3184:	81 11       	cpse	r24, r1
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    3186:	5e c0       	rjmp	.+188    	; 0x3244 <prvTimerTask+0x178>
    3188:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <vPortYield>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    318c:	5b c0       	rjmp	.+182    	; 0x3244 <prvTimerTask+0x178>
    318e:	6c dc       	rcall	.-1832   	; 0x2a68 <xTaskResumeAll>
    3190:	59 c0       	rjmp	.+178    	; 0x3244 <prvTimerTask+0x178>
    3192:	89 81       	ldd	r24, Y+1	; 0x01
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3194:	88 23       	and	r24, r24
    3196:	0c f4       	brge	.+2      	; 0x319a <prvTimerTask+0xce>

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    3198:	55 c0       	rjmp	.+170    	; 0x3244 <prvTimerTask+0x178>
    319a:	cc 80       	ldd	r12, Y+4	; 0x04
    319c:	dd 80       	ldd	r13, Y+5	; 0x05
    319e:	f6 01       	movw	r30, r12
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    31a0:	82 85       	ldd	r24, Z+10	; 0x0a
    31a2:	93 85       	ldd	r25, Z+11	; 0x0b
    31a4:	89 2b       	or	r24, r25
    31a6:	21 f0       	breq	.+8      	; 0x31b0 <prvTimerTask+0xe4>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    31a8:	c6 01       	movw	r24, r12
    31aa:	02 96       	adiw	r24, 0x02	; 2
    31ac:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <uxListRemove>
    31b0:	ce 01       	movw	r24, r28

			switch( xMessage.xMessageID )
    31b2:	06 96       	adiw	r24, 0x06	; 6
    31b4:	1d df       	rcall	.-454    	; 0x2ff0 <prvSampleTimeNow>
    31b6:	ac 01       	movw	r20, r24
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	08 2e       	mov	r0, r24
    31bc:	00 0c       	add	r0, r0
    31be:	99 0b       	sbc	r25, r25
    31c0:	aa 0b       	sbc	r26, r26
    31c2:	bb 0b       	sbc	r27, r27
    31c4:	8a 30       	cpi	r24, 0x0A	; 10
    31c6:	91 05       	cpc	r25, r1
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <prvTimerTask+0x100>
    31ca:	3c c0       	rjmp	.+120    	; 0x3244 <prvTimerTask+0x178>
    31cc:	fc 01       	movw	r30, r24
    31ce:	88 27       	eor	r24, r24
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    31d0:	e2 50       	subi	r30, 0x02	; 2
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	8f 4f       	sbci	r24, 0xFF	; 255
    31d6:	ae c3       	rjmp	.+1884   	; 0x3934 <__tablejump2__>
    31d8:	2a 81       	ldd	r18, Y+2	; 0x02
    31da:	3b 81       	ldd	r19, Y+3	; 0x03
    31dc:	d6 01       	movw	r26, r12
    31de:	1c 96       	adiw	r26, 0x0c	; 12
    31e0:	6d 91       	ld	r22, X+
    31e2:	7c 91       	ld	r23, X
    31e4:	1d 97       	sbiw	r26, 0x0d	; 13
    31e6:	62 0f       	add	r22, r18
    31e8:	73 1f       	adc	r23, r19
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    31ea:	c6 01       	movw	r24, r12
    31ec:	0a de       	rcall	.-1004   	; 0x2e02 <prvInsertTimerInActiveList>
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	49 f5       	brne	.+82     	; 0x3244 <prvTimerTask+0x178>
    31f2:	d6 01       	movw	r26, r12
    31f4:	51 96       	adiw	r26, 0x11	; 17
    31f6:	ed 91       	ld	r30, X+
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    31f8:	fc 91       	ld	r31, X
    31fa:	52 97       	sbiw	r26, 0x12	; 18
    31fc:	c6 01       	movw	r24, r12
    31fe:	19 95       	eicall
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3200:	f6 01       	movw	r30, r12
    3202:	86 85       	ldd	r24, Z+14	; 0x0e
    3204:	81 30       	cpi	r24, 0x01	; 1
    3206:	f1 f4       	brne	.+60     	; 0x3244 <prvTimerTask+0x178>
    3208:	4a 81       	ldd	r20, Y+2	; 0x02
    320a:	5b 81       	ldd	r21, Y+3	; 0x03
    320c:	84 85       	ldd	r24, Z+12	; 0x0c
    320e:	95 85       	ldd	r25, Z+13	; 0x0d
    3210:	48 0f       	add	r20, r24
    3212:	59 1f       	adc	r21, r25
    3214:	00 e0       	ldi	r16, 0x00	; 0
    3216:	10 e0       	ldi	r17, 0x00	; 0
    3218:	20 e0       	ldi	r18, 0x00	; 0
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	c6 01       	movw	r24, r12
    3220:	a5 de       	rcall	.-694    	; 0x2f6c <xTimerGenericCommand>
    3222:	10 c0       	rjmp	.+32     	; 0x3244 <prvTimerTask+0x178>
    3224:	6a 81       	ldd	r22, Y+2	; 0x02
    3226:	7b 81       	ldd	r23, Y+3	; 0x03
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3228:	d6 01       	movw	r26, r12
    322a:	1c 96       	adiw	r26, 0x0c	; 12
    322c:	6d 93       	st	X+, r22
    322e:	7c 93       	st	X, r23
    3230:	1d 97       	sbiw	r26, 0x0d	; 13
    3232:	64 0f       	add	r22, r20
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    3234:	75 1f       	adc	r23, r21
    3236:	9a 01       	movw	r18, r20
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3238:	c6 01       	movw	r24, r12
    323a:	e3 dd       	rcall	.-1082   	; 0x2e02 <prvInsertTimerInActiveList>
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <prvTimerTask+0x178>
    323e:	c6 01       	movw	r24, r12
    3240:	0e 94 50 10 	call	0x20a0	; 0x20a0 <vPortFree>
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	6e 2d       	mov	r22, r14
    324c:	7f 2d       	mov	r23, r15
    324e:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <xTimerQueue>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3252:	90 91 b1 22 	lds	r25, 0x22B1	; 0x8022b1 <xTimerQueue+0x1>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3256:	03 d9       	rcall	.-3578   	; 0x245e <xQueueGenericReceive>
    3258:	81 11       	cpse	r24, r1
    325a:	9b cf       	rjmp	.-202    	; 0x3192 <prvTimerTask+0xc6>
		if( xTimerListsWereSwitched == pdFALSE )
    325c:	42 cf       	rjmp	.-380    	; 0x30e2 <prvTimerTask+0x16>
    325e:	21 db       	rcall	.-2494   	; 0x28a2 <vTaskSuspendAll>
    3260:	c5 01       	movw	r24, r10
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3262:	c6 de       	rcall	.-628    	; 0x2ff0 <prvSampleTimeNow>
    3264:	8c 01       	movw	r16, r24
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	81 11       	cpse	r24, r1
    326a:	91 cf       	rjmp	.-222    	; 0x318e <prvTimerTask+0xc2>
    326c:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <pxOverflowTimerList>
    3270:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <pxOverflowTimerList+0x1>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    3274:	41 e0       	ldi	r20, 0x01	; 1
    3276:	80 81       	ld	r24, Z
    3278:	81 11       	cpse	r24, r1
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	c1 2c       	mov	r12, r1
    327e:	d1 2c       	mov	r13, r1
    3280:	78 cf       	rjmp	.-272    	; 0x3172 <prvTimerTask+0xa6>

00003282 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    328c:	c6 2f       	mov	r28, r22
    328e:	d0 e0       	ldi	r29, 0x00	; 0
    3290:	de 01       	movw	r26, r28
    3292:	02 2e       	mov	r0, r18
    3294:	02 c0       	rjmp	.+4      	; 0x329a <ioport_configure_port_pin+0x18>
    3296:	b5 95       	asr	r27
    3298:	a7 95       	ror	r26
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <ioport_configure_port_pin+0x14>
    329e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    32a0:	50 8b       	std	Z+16, r21	; 0x10
    32a2:	2f 5f       	subi	r18, 0xFF	; 255
    32a4:	3f 4f       	sbci	r19, 0xFF	; 255
    32a6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    32a8:	28 30       	cpi	r18, 0x08	; 8
    32aa:	31 05       	cpc	r19, r1
    32ac:	89 f7       	brne	.-30     	; 0x3290 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    32ae:	40 ff       	sbrs	r20, 0
    32b0:	0a c0       	rjmp	.+20     	; 0x32c6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    32b2:	41 ff       	sbrs	r20, 1
    32b4:	03 c0       	rjmp	.+6      	; 0x32bc <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    32b6:	fc 01       	movw	r30, r24
    32b8:	65 83       	std	Z+5, r22	; 0x05
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    32bc:	fc 01       	movw	r30, r24
    32be:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    32c0:	fc 01       	movw	r30, r24
    32c2:	61 83       	std	Z+1, r22	; 0x01
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    32c6:	fc 01       	movw	r30, r24
    32c8:	62 83       	std	Z+2, r22	; 0x02
	}
}
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    32d0:	43 e0       	ldi	r20, 0x03	; 3
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	61 e0       	ldi	r22, 0x01	; 1
    32d6:	80 ee       	ldi	r24, 0xE0	; 224
    32d8:	97 e0       	ldi	r25, 0x07	; 7
    32da:	d3 df       	rcall	.-90     	; 0x3282 <ioport_configure_port_pin>
    32dc:	43 e0       	ldi	r20, 0x03	; 3
    32de:	50 e0       	ldi	r21, 0x00	; 0
    32e0:	62 e0       	ldi	r22, 0x02	; 2
    32e2:	80 ee       	ldi	r24, 0xE0	; 224
    32e4:	97 e0       	ldi	r25, 0x07	; 7
    32e6:	cd df       	rcall	.-102    	; 0x3282 <ioport_configure_port_pin>
    32e8:	43 e0       	ldi	r20, 0x03	; 3
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	60 e1       	ldi	r22, 0x10	; 16
    32ee:	80 e6       	ldi	r24, 0x60	; 96
    32f0:	96 e0       	ldi	r25, 0x06	; 6
    32f2:	c7 df       	rcall	.-114    	; 0x3282 <ioport_configure_port_pin>
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	50 e4       	ldi	r21, 0x40	; 64
    32f8:	60 e2       	ldi	r22, 0x20	; 32
    32fa:	80 e6       	ldi	r24, 0x60	; 96
    32fc:	96 e0       	ldi	r25, 0x06	; 6
    32fe:	c1 df       	rcall	.-126    	; 0x3282 <ioport_configure_port_pin>
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	5b e1       	ldi	r21, 0x1B	; 27
    3304:	60 e2       	ldi	r22, 0x20	; 32
    3306:	80 e8       	ldi	r24, 0x80	; 128
    3308:	96 e0       	ldi	r25, 0x06	; 6
    330a:	bb df       	rcall	.-138    	; 0x3282 <ioport_configure_port_pin>
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	5b e1       	ldi	r21, 0x1B	; 27
    3310:	62 e0       	ldi	r22, 0x02	; 2
    3312:	80 ea       	ldi	r24, 0xA0	; 160
    3314:	96 e0       	ldi	r25, 0x06	; 6
    3316:	b5 df       	rcall	.-150    	; 0x3282 <ioport_configure_port_pin>
    3318:	40 e0       	ldi	r20, 0x00	; 0
    331a:	5b e1       	ldi	r21, 0x1B	; 27
    331c:	64 e0       	ldi	r22, 0x04	; 4
    331e:	80 ea       	ldi	r24, 0xA0	; 160
    3320:	96 e0       	ldi	r25, 0x06	; 6
    3322:	af df       	rcall	.-162    	; 0x3282 <ioport_configure_port_pin>
    3324:	43 e0       	ldi	r20, 0x03	; 3
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	62 e0       	ldi	r22, 0x02	; 2
    332a:	80 e6       	ldi	r24, 0x60	; 96
    332c:	96 e0       	ldi	r25, 0x06	; 6
    332e:	a9 df       	rcall	.-174    	; 0x3282 <ioport_configure_port_pin>
    3330:	43 e0       	ldi	r20, 0x03	; 3
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	68 e0       	ldi	r22, 0x08	; 8
    3336:	80 e6       	ldi	r24, 0x60	; 96
    3338:	96 e0       	ldi	r25, 0x06	; 6
    333a:	a3 df       	rcall	.-186    	; 0x3282 <ioport_configure_port_pin>
    333c:	43 e0       	ldi	r20, 0x03	; 3
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	68 e0       	ldi	r22, 0x08	; 8
    3342:	80 ea       	ldi	r24, 0xA0	; 160
    3344:	96 e0       	ldi	r25, 0x06	; 6
    3346:	9d df       	rcall	.-198    	; 0x3282 <ioport_configure_port_pin>
    3348:	43 e0       	ldi	r20, 0x03	; 3
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	61 e0       	ldi	r22, 0x01	; 1
    334e:	80 e6       	ldi	r24, 0x60	; 96
    3350:	96 e0       	ldi	r25, 0x06	; 6
    3352:	97 df       	rcall	.-210    	; 0x3282 <ioport_configure_port_pin>
    3354:	43 e0       	ldi	r20, 0x03	; 3
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	68 e0       	ldi	r22, 0x08	; 8
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	96 e0       	ldi	r25, 0x06	; 6
    335e:	91 df       	rcall	.-222    	; 0x3282 <ioport_configure_port_pin>
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	60 e1       	ldi	r22, 0x10	; 16
    3366:	80 e8       	ldi	r24, 0x80	; 128
    3368:	96 e0       	ldi	r25, 0x06	; 6
    336a:	8b df       	rcall	.-234    	; 0x3282 <ioport_configure_port_pin>
    336c:	43 e0       	ldi	r20, 0x03	; 3
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	62 e0       	ldi	r22, 0x02	; 2
    3372:	80 e6       	ldi	r24, 0x60	; 96
    3374:	96 e0       	ldi	r25, 0x06	; 6
    3376:	85 df       	rcall	.-246    	; 0x3282 <ioport_configure_port_pin>
    3378:	43 e0       	ldi	r20, 0x03	; 3
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	68 e0       	ldi	r22, 0x08	; 8
    337e:	80 e6       	ldi	r24, 0x60	; 96
    3380:	96 e0       	ldi	r25, 0x06	; 6
    3382:	7f df       	rcall	.-258    	; 0x3282 <ioport_configure_port_pin>
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	64 e0       	ldi	r22, 0x04	; 4
    338a:	80 e6       	ldi	r24, 0x60	; 96
    338c:	96 e0       	ldi	r25, 0x06	; 6
    338e:	79 df       	rcall	.-270    	; 0x3282 <ioport_configure_port_pin>
    3390:	43 e0       	ldi	r20, 0x03	; 3
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	60 e1       	ldi	r22, 0x10	; 16
    3396:	80 ea       	ldi	r24, 0xA0	; 160
    3398:	96 e0       	ldi	r25, 0x06	; 6
    339a:	73 df       	rcall	.-282    	; 0x3282 <ioport_configure_port_pin>
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	61 e0       	ldi	r22, 0x01	; 1
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	96 e0       	ldi	r25, 0x06	; 6
    33a6:	6d df       	rcall	.-294    	; 0x3282 <ioport_configure_port_pin>
    33a8:	40 e0       	ldi	r20, 0x00	; 0
    33aa:	50 e0       	ldi	r21, 0x00	; 0
    33ac:	64 e0       	ldi	r22, 0x04	; 4
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	96 e0       	ldi	r25, 0x06	; 6
    33b2:	67 df       	rcall	.-306    	; 0x3282 <ioport_configure_port_pin>
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	62 e0       	ldi	r22, 0x02	; 2
    33ba:	80 e2       	ldi	r24, 0x20	; 32
    33bc:	96 e0       	ldi	r25, 0x06	; 6
    33be:	61 df       	rcall	.-318    	; 0x3282 <ioport_configure_port_pin>
    33c0:	43 e0       	ldi	r20, 0x03	; 3
    33c2:	50 e0       	ldi	r21, 0x00	; 0
    33c4:	68 e0       	ldi	r22, 0x08	; 8
    33c6:	80 e4       	ldi	r24, 0x40	; 64
    33c8:	96 e0       	ldi	r25, 0x06	; 6
    33ca:	5b df       	rcall	.-330    	; 0x3282 <ioport_configure_port_pin>
    33cc:	40 e0       	ldi	r20, 0x00	; 0
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	64 e0       	ldi	r22, 0x04	; 4
    33d2:	80 e4       	ldi	r24, 0x40	; 64
    33d4:	96 e0       	ldi	r25, 0x06	; 6
    33d6:	55 df       	rcall	.-342    	; 0x3282 <ioport_configure_port_pin>
    33d8:	43 e0       	ldi	r20, 0x03	; 3
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	68 e0       	ldi	r22, 0x08	; 8
    33de:	80 e6       	ldi	r24, 0x60	; 96
    33e0:	96 e0       	ldi	r25, 0x06	; 6
    33e2:	4f df       	rcall	.-354    	; 0x3282 <ioport_configure_port_pin>
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	50 e0       	ldi	r21, 0x00	; 0
    33e8:	64 e0       	ldi	r22, 0x04	; 4
    33ea:	80 e6       	ldi	r24, 0x60	; 96
    33ec:	96 e0       	ldi	r25, 0x06	; 6
    33ee:	49 df       	rcall	.-366    	; 0x3282 <ioport_configure_port_pin>
    33f0:	43 e0       	ldi	r20, 0x03	; 3
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	68 e0       	ldi	r22, 0x08	; 8
    33f6:	80 e8       	ldi	r24, 0x80	; 128
    33f8:	96 e0       	ldi	r25, 0x06	; 6
    33fa:	43 df       	rcall	.-378    	; 0x3282 <ioport_configure_port_pin>
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	64 e0       	ldi	r22, 0x04	; 4
    3402:	80 e8       	ldi	r24, 0x80	; 128
    3404:	96 e0       	ldi	r25, 0x06	; 6
    3406:	3d cf       	rjmp	.-390    	; 0x3282 <ioport_configure_port_pin>
    3408:	08 95       	ret

0000340a <vTimerCallback>:

char receiveChar()
{
	while( !(USARTC0_STATUS & USART_RXCIF_bm) ); //Wait until receive finish
	return USARTC0_DATA;
}
    340a:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <increment>
    340e:	90 91 f8 23 	lds	r25, 0x23F8	; 0x8023f8 <increment+0x1>
    3412:	a0 91 f9 23 	lds	r26, 0x23F9	; 0x8023f9 <increment+0x2>
    3416:	b0 91 fa 23 	lds	r27, 0x23FA	; 0x8023fa <increment+0x3>
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	a1 1d       	adc	r26, r1
    341e:	b1 1d       	adc	r27, r1
    3420:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <increment>
    3424:	90 93 f8 23 	sts	0x23F8, r25	; 0x8023f8 <increment+0x1>
    3428:	a0 93 f9 23 	sts	0x23F9, r26	; 0x8023f9 <increment+0x2>
    342c:	b0 93 fa 23 	sts	0x23FA, r27	; 0x8023fa <increment+0x3>
    3430:	08 95       	ret

00003432 <testLamp>:
    3432:	00 ee       	ldi	r16, 0xE0	; 224
    3434:	17 e0       	ldi	r17, 0x07	; 7
    3436:	c1 e0       	ldi	r28, 0x01	; 1
    3438:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <orang>
    343c:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <orang+0x1>
    3440:	0a 97       	sbiw	r24, 0x0a	; 10
    3442:	5c f0       	brlt	.+22     	; 0x345a <testLamp+0x28>
    3444:	f8 01       	movw	r30, r16
    3446:	c6 83       	std	Z+6, r28	; 0x06
    3448:	8a ef       	ldi	r24, 0xFA	; 250
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	8a db       	rcall	.-2284   	; 0x2b62 <vTaskDelay>
    344e:	f8 01       	movw	r30, r16
    3450:	c5 83       	std	Z+5, r28	; 0x05
    3452:	10 92 2c 23 	sts	0x232C, r1	; 0x80232c <orang>
    3456:	10 92 2d 23 	sts	0x232D, r1	; 0x80232d <orang+0x1>
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	81 db       	rcall	.-2302   	; 0x2b62 <vTaskDelay>
    3460:	eb cf       	rjmp	.-42     	; 0x3438 <testLamp+0x6>

00003462 <testPot>:
    3462:	c0 e0       	ldi	r28, 0x00	; 0
    3464:	d2 e0       	ldi	r29, 0x02	; 2
    3466:	68 94       	set
    3468:	ff 24       	eor	r15, r15
    346a:	f2 f8       	bld	r15, 2
    346c:	00 e3       	ldi	r16, 0x30	; 48
    346e:	12 e0       	ldi	r17, 0x02	; 2
    3470:	ce 01       	movw	r24, r28
    3472:	0e 94 59 07 	call	0xeb2	; 0xeb2 <adc_enable>
    3476:	9f b7       	in	r25, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	88 81       	ld	r24, Y
    347c:	80 61       	ori	r24, 0x10	; 16
    347e:	88 83       	st	Y, r24
    3480:	9f bf       	out	0x3f, r25	; 63
    3482:	8e 81       	ldd	r24, Y+6	; 0x06
    3484:	82 ff       	sbrs	r24, 2
    3486:	fd cf       	rjmp	.-6      	; 0x3482 <testPot+0x20>
    3488:	fe 82       	std	Y+6, r15	; 0x06
    348a:	f8 01       	movw	r30, r16
    348c:	84 81       	ldd	r24, Z+4	; 0x04
    348e:	95 81       	ldd	r25, Z+5	; 0x05
    3490:	80 93 fb 23 	sts	0x23FB, r24	; 0x8023fb <result3>
    3494:	90 93 fc 23 	sts	0x23FC, r25	; 0x8023fc <result3+0x1>
    3498:	85 e0       	ldi	r24, 0x05	; 5
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	62 db       	rcall	.-2364   	; 0x2b62 <vTaskDelay>
    349e:	e8 cf       	rjmp	.-48     	; 0x3470 <testPot+0xe>

000034a0 <testTempS>:
    34a0:	c0 e0       	ldi	r28, 0x00	; 0
    34a2:	d2 e0       	ldi	r29, 0x02	; 2
    34a4:	68 94       	set
    34a6:	ff 24       	eor	r15, r15
    34a8:	f1 f8       	bld	r15, 1
    34aa:	08 e2       	ldi	r16, 0x28	; 40
    34ac:	12 e0       	ldi	r17, 0x02	; 2
    34ae:	ce 01       	movw	r24, r28
    34b0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <adc_enable>
    34b4:	9f b7       	in	r25, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	88 81       	ld	r24, Y
    34ba:	88 60       	ori	r24, 0x08	; 8
    34bc:	88 83       	st	Y, r24
    34be:	9f bf       	out	0x3f, r25	; 63
    34c0:	8e 81       	ldd	r24, Y+6	; 0x06
    34c2:	81 ff       	sbrs	r24, 1
    34c4:	fd cf       	rjmp	.-6      	; 0x34c0 <testTempS+0x20>
    34c6:	fe 82       	std	Y+6, r15	; 0x06
    34c8:	f8 01       	movw	r30, r16
    34ca:	84 81       	ldd	r24, Z+4	; 0x04
    34cc:	95 81       	ldd	r25, Z+5	; 0x05
    34ce:	80 93 fd 23 	sts	0x23FD, r24	; 0x8023fd <result2>
    34d2:	90 93 fe 23 	sts	0x23FE, r25	; 0x8023fe <result2+0x1>
    34d6:	85 e0       	ldi	r24, 0x05	; 5
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	43 db       	rcall	.-2426   	; 0x2b62 <vTaskDelay>
    34dc:	e8 cf       	rjmp	.-48     	; 0x34ae <testTempS+0xe>

000034de <testLightS>:
    34de:	c0 e0       	ldi	r28, 0x00	; 0
    34e0:	d2 e0       	ldi	r29, 0x02	; 2
    34e2:	11 e0       	ldi	r17, 0x01	; 1
    34e4:	ce 01       	movw	r24, r28
    34e6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <adc_enable>
    34ea:	9f b7       	in	r25, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	88 81       	ld	r24, Y
    34f0:	84 60       	ori	r24, 0x04	; 4
    34f2:	88 83       	st	Y, r24
    34f4:	9f bf       	out	0x3f, r25	; 63
    34f6:	8e 81       	ldd	r24, Y+6	; 0x06
    34f8:	80 ff       	sbrs	r24, 0
    34fa:	fd cf       	rjmp	.-6      	; 0x34f6 <testLightS+0x18>
    34fc:	1e 83       	std	Y+6, r17	; 0x06
    34fe:	8c a1       	ldd	r24, Y+36	; 0x24
    3500:	9d a1       	ldd	r25, Y+37	; 0x25
    3502:	80 93 ff 23 	sts	0x23FF, r24	; 0x8023ff <result>
    3506:	90 93 00 24 	sts	0x2400, r25	; 0x802400 <result+0x1>
    350a:	85 e0       	ldi	r24, 0x05	; 5
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	29 db       	rcall	.-2478   	; 0x2b62 <vTaskDelay>
    3510:	e9 cf       	rjmp	.-46     	; 0x34e4 <testLightS+0x6>

00003512 <testLCD>:
    3512:	80 e1       	ldi	r24, 0x10	; 16
    3514:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3518:	0f 2e       	mov	r0, r31
    351a:	f3 e2       	ldi	r31, 0x23	; 35
    351c:	cf 2e       	mov	r12, r31
    351e:	f0 e2       	ldi	r31, 0x20	; 32
    3520:	df 2e       	mov	r13, r31
    3522:	f0 2d       	mov	r31, r0
    3524:	0f 2e       	mov	r0, r31
    3526:	f9 ec       	ldi	r31, 0xC9	; 201
    3528:	ff 2e       	mov	r15, r31
    352a:	f0 2d       	mov	r31, r0
    352c:	ce e2       	ldi	r28, 0x2E	; 46
    352e:	d3 e2       	ldi	r29, 0x23	; 35
    3530:	03 e3       	ldi	r16, 0x33	; 51
    3532:	10 e2       	ldi	r17, 0x20	; 32
    3534:	80 91 fe 23 	lds	r24, 0x23FE	; 0x8023fe <result2+0x1>
    3538:	8f 93       	push	r24
    353a:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <result2>
    353e:	8f 93       	push	r24
    3540:	df 92       	push	r13
    3542:	cf 92       	push	r12
    3544:	1f 92       	push	r1
    3546:	ff 92       	push	r15
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	2e d3       	rcall	.+1628   	; 0x3baa <snprintf>
    354e:	26 e0       	ldi	r18, 0x06	; 6
    3550:	30 e2       	ldi	r19, 0x20	; 32
    3552:	44 e1       	ldi	r20, 0x14	; 20
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	ce 01       	movw	r24, r28
    3558:	0e 94 7f 06 	call	0xcfe	; 0xcfe <gfx_mono_draw_string>
    355c:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <orang+0x1>
    3560:	8f 93       	push	r24
    3562:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <orang>
    3566:	8f 93       	push	r24
    3568:	1f 93       	push	r17
    356a:	0f 93       	push	r16
    356c:	1f 92       	push	r1
    356e:	ff 92       	push	r15
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	1a d3       	rcall	.+1588   	; 0x3baa <snprintf>
    3576:	26 e0       	ldi	r18, 0x06	; 6
    3578:	30 e2       	ldi	r19, 0x20	; 32
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	ce 01       	movw	r24, r28
    3580:	0e 94 7f 06 	call	0xcfe	; 0xcfe <gfx_mono_draw_string>
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	ec da       	rcall	.-2600   	; 0x2b62 <vTaskDelay>
    358a:	8d b7       	in	r24, 0x3d	; 61
    358c:	9e b7       	in	r25, 0x3e	; 62
    358e:	40 96       	adiw	r24, 0x10	; 16
    3590:	8d bf       	out	0x3d, r24	; 61
    3592:	9e bf       	out	0x3e, r25	; 62
    3594:	cf cf       	rjmp	.-98     	; 0x3534 <testLCD+0x22>

00003596 <PWM_Init>:
    3596:	e0 e4       	ldi	r30, 0x40	; 64
    3598:	f6 e0       	ldi	r31, 0x06	; 6
    359a:	80 81       	ld	r24, Z
    359c:	81 60       	ori	r24, 0x01	; 1
    359e:	80 83       	st	Z, r24
    35a0:	e0 e0       	ldi	r30, 0x00	; 0
    35a2:	f8 e0       	ldi	r31, 0x08	; 8
    35a4:	85 e0       	ldi	r24, 0x05	; 5
    35a6:	80 83       	st	Z, r24
    35a8:	86 e1       	ldi	r24, 0x16	; 22
    35aa:	81 83       	std	Z+1, r24	; 0x01
    35ac:	88 ee       	ldi	r24, 0xE8	; 232
    35ae:	93 e0       	ldi	r25, 0x03	; 3
    35b0:	86 a3       	std	Z+38, r24	; 0x26
    35b2:	97 a3       	std	Z+39, r25	; 0x27
    35b4:	87 e7       	ldi	r24, 0x77	; 119
    35b6:	91 e0       	ldi	r25, 0x01	; 1
    35b8:	80 a7       	std	Z+40, r24	; 0x28
    35ba:	91 a7       	std	Z+41, r25	; 0x29
    35bc:	08 95       	ret

000035be <testServo>:
    35be:	eb df       	rcall	.-42     	; 0x3596 <PWM_Init>
    35c0:	e0 ea       	ldi	r30, 0xA0	; 160
    35c2:	f6 e0       	ldi	r31, 0x06	; 6
    35c4:	c0 e0       	ldi	r28, 0x00	; 0
    35c6:	d8 e0       	ldi	r29, 0x08	; 8
    35c8:	6e e5       	ldi	r22, 0x5E	; 94
    35ca:	71 e0       	ldi	r23, 0x01	; 1
    35cc:	a0 e6       	ldi	r26, 0x60	; 96
    35ce:	b6 e0       	ldi	r27, 0x06	; 6
    35d0:	10 e2       	ldi	r17, 0x20	; 32
    35d2:	90 e1       	ldi	r25, 0x10	; 16
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	22 e8       	ldi	r18, 0x82	; 130
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	80 85       	ldd	r24, Z+8	; 0x08
    35de:	81 fd       	sbrc	r24, 1
    35e0:	0c c0       	rjmp	.+24     	; 0x35fa <testServo+0x3c>
    35e2:	80 85       	ldd	r24, Z+8	; 0x08
    35e4:	82 ff       	sbrs	r24, 2
    35e6:	09 c0       	rjmp	.+18     	; 0x35fa <testServo+0x3c>
    35e8:	28 a7       	std	Y+40, r18	; 0x28
    35ea:	39 a7       	std	Y+41, r19	; 0x29
    35ec:	16 96       	adiw	r26, 0x06	; 6
    35ee:	9c 93       	st	X, r25
    35f0:	16 97       	sbiw	r26, 0x06	; 6
    35f2:	15 96       	adiw	r26, 0x05	; 5
    35f4:	1c 93       	st	X, r17
    35f6:	15 97       	sbiw	r26, 0x05	; 5
    35f8:	f1 cf       	rjmp	.-30     	; 0x35dc <testServo+0x1e>
    35fa:	80 85       	ldd	r24, Z+8	; 0x08
    35fc:	82 fd       	sbrc	r24, 2
    35fe:	0c c0       	rjmp	.+24     	; 0x3618 <testServo+0x5a>
    3600:	80 85       	ldd	r24, Z+8	; 0x08
    3602:	81 ff       	sbrs	r24, 1
    3604:	09 c0       	rjmp	.+18     	; 0x3618 <testServo+0x5a>
    3606:	48 a7       	std	Y+40, r20	; 0x28
    3608:	59 a7       	std	Y+41, r21	; 0x29
    360a:	16 96       	adiw	r26, 0x06	; 6
    360c:	1c 93       	st	X, r17
    360e:	16 97       	sbiw	r26, 0x06	; 6
    3610:	15 96       	adiw	r26, 0x05	; 5
    3612:	9c 93       	st	X, r25
    3614:	15 97       	sbiw	r26, 0x05	; 5
    3616:	e2 cf       	rjmp	.-60     	; 0x35dc <testServo+0x1e>
    3618:	80 85       	ldd	r24, Z+8	; 0x08
    361a:	81 ff       	sbrs	r24, 1
    361c:	df cf       	rjmp	.-66     	; 0x35dc <testServo+0x1e>
    361e:	80 85       	ldd	r24, Z+8	; 0x08
    3620:	82 ff       	sbrs	r24, 2
    3622:	dc cf       	rjmp	.-72     	; 0x35dc <testServo+0x1e>
    3624:	68 a7       	std	Y+40, r22	; 0x28
    3626:	79 a7       	std	Y+41, r23	; 0x29
    3628:	15 96       	adiw	r26, 0x05	; 5
    362a:	1c 93       	st	X, r17
    362c:	15 97       	sbiw	r26, 0x05	; 5
    362e:	15 96       	adiw	r26, 0x05	; 5
    3630:	9c 93       	st	X, r25
    3632:	15 97       	sbiw	r26, 0x05	; 5
    3634:	d3 cf       	rjmp	.-90     	; 0x35dc <testServo+0x1e>

00003636 <setUpSerial>:
    3636:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
    363a:	8c e0       	ldi	r24, 0x0C	; 12
    363c:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7008a6>
    3640:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    3644:	83 e0       	ldi	r24, 0x03	; 3
    3646:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
    364a:	88 e1       	ldi	r24, 0x18	; 24
    364c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    3650:	08 95       	ret

00003652 <receiveString>:

void receiveString()
{
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	c8 ec       	ldi	r28, 0xC8	; 200
    3658:	d2 e2       	ldi	r29, 0x22	; 34
	int i = 0;
	while(1){
		//char inp = receiveChar();
		char inp = usart_getchar(USART_SERIAL_EXAMPLE);
    365a:	80 ea       	ldi	r24, 0xA0	; 160
    365c:	98 e0       	ldi	r25, 0x08	; 8
    365e:	0e 94 35 0a 	call	0x146a	; 0x146a <usart_getchar>
		if(inp=='\n') break;
    3662:	8a 30       	cpi	r24, 0x0A	; 10
    3664:	11 f0       	breq	.+4      	; 0x366a <receiveString+0x18>
		else reads[i++] = inp;
    3666:	89 93       	st	Y+, r24
	}
    3668:	f8 cf       	rjmp	.-16     	; 0x365a <receiveString+0x8>
	if(strcmp(str1,reads) == 0){
    366a:	68 ec       	ldi	r22, 0xC8	; 200
    366c:	72 e2       	ldi	r23, 0x22	; 34
    366e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <str1>
    3672:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <str1+0x1>
    3676:	90 d2       	rcall	.+1312   	; 0x3b98 <strcmp>
    3678:	89 2b       	or	r24, r25
    367a:	49 f4       	brne	.+18     	; 0x368e <receiveString+0x3c>
		//gpio_set_pin_high(J2_PIN0);
		orang++;
    367c:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <orang>
    3680:	90 91 2d 23 	lds	r25, 0x232D	; 0x80232d <orang+0x1>
    3684:	01 96       	adiw	r24, 0x01	; 1
    3686:	80 93 2c 23 	sts	0x232C, r24	; 0x80232c <orang>
    368a:	90 93 2d 23 	sts	0x232D, r25	; 0x80232d <orang+0x1>
		//}else{
		//gpio_set_pin_low(J2_PIN0);
	}
}
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	08 95       	ret

00003694 <receivePing>:
		vTaskDelay(10/portTICK_PERIOD_MS);
	}
}


static portTASK_FUNCTION(testServo, p_){
    3694:	de df       	rcall	.-68     	; 0x3652 <receiveString>
    3696:	85 e0       	ldi	r24, 0x05	; 5
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	63 da       	rcall	.-2874   	; 0x2b62 <vTaskDelay>
    369c:	fb cf       	rjmp	.-10     	; 0x3694 <receivePing>

0000369e <main>:
    369e:	8f 92       	push	r8
    36a0:	9f 92       	push	r9
    36a2:	af 92       	push	r10
    36a4:	bf 92       	push	r11
    36a6:	cf 92       	push	r12
    36a8:	df 92       	push	r13
    36aa:	ef 92       	push	r14
    36ac:	ff 92       	push	r15
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	2b 97       	sbiw	r28, 0x0b	; 11
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	07 de       	rcall	.-1010   	; 0x32d0 <board_init>
    36c2:	87 e0       	ldi	r24, 0x07	; 7
    36c4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    36c8:	0e 94 3d 04 	call	0x87a	; 0x87a <sysclk_init>
    36cc:	68 94       	set
    36ce:	ee 24       	eor	r14, r14
    36d0:	e4 f8       	bld	r14, 4
    36d2:	e0 92 85 06 	sts	0x0685, r14	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    36d6:	68 94       	set
    36d8:	ff 24       	eor	r15, r15
    36da:	f3 f8       	bld	r15, 3
    36dc:	f0 92 45 06 	sts	0x0645, r15	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    36e0:	f0 92 41 06 	sts	0x0641, r15	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    36e4:	84 e0       	ldi	r24, 0x04	; 4
    36e6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    36ea:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    36ee:	a3 df       	rcall	.-186    	; 0x3636 <setUpSerial>
    36f0:	6d e0       	ldi	r22, 0x0D	; 13
    36f2:	70 e2       	ldi	r23, 0x20	; 32
    36f4:	80 ea       	ldi	r24, 0xA0	; 160
    36f6:	98 e0       	ldi	r25, 0x08	; 8
    36f8:	0e 94 4e 0b 	call	0x169c	; 0x169c <usart_init_rs232>
    36fc:	11 e0       	ldi	r17, 0x01	; 1
    36fe:	10 93 21 06 	sts	0x0621, r17	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
    3702:	be 01       	movw	r22, r28
    3704:	6f 5f       	subi	r22, 0xFF	; 255
    3706:	7f 4f       	sbci	r23, 0xFF	; 255
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	92 e0       	ldi	r25, 0x02	; 2
    370c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <adc_read_configuration>
    3710:	ae 01       	movw	r20, r28
    3712:	48 5f       	subi	r20, 0xF8	; 248
    3714:	5f 4f       	sbci	r21, 0xFF	; 255
    3716:	61 e0       	ldi	r22, 0x01	; 1
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	0e 94 ac 09 	call	0x1358	; 0x1358 <adcch_read_configuration>
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	8b 81       	ldd	r24, Y+3	; 0x03
    3724:	8f 78       	andi	r24, 0x8F	; 143
    3726:	80 61       	ori	r24, 0x10	; 16
    3728:	8b 83       	std	Y+3, r24	; 0x03
    372a:	89 2f       	mov	r24, r25
    372c:	81 7e       	andi	r24, 0xE1	; 225
    372e:	8a 83       	std	Y+2, r24	; 0x02
    3730:	1c 82       	std	Y+4, r1	; 0x04
    3732:	02 e0       	ldi	r16, 0x02	; 2
    3734:	0d 83       	std	Y+5, r16	; 0x05
    3736:	18 87       	std	Y+8, r17	; 0x08
    3738:	19 86       	std	Y+9, r1	; 0x09
    373a:	be 01       	movw	r22, r28
    373c:	6f 5f       	subi	r22, 0xFF	; 255
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	92 e0       	ldi	r25, 0x02	; 2
    3744:	0e 94 00 09 	call	0x1200	; 0x1200 <adc_write_configuration>
    3748:	ae 01       	movw	r20, r28
    374a:	48 5f       	subi	r20, 0xF8	; 248
    374c:	5f 4f       	sbci	r21, 0xFF	; 255
    374e:	61 e0       	ldi	r22, 0x01	; 1
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	92 e0       	ldi	r25, 0x02	; 2
    3754:	0e 94 73 09 	call	0x12e6	; 0x12e6 <adcch_write_configuration>
    3758:	be 01       	movw	r22, r28
    375a:	6f 5f       	subi	r22, 0xFF	; 255
    375c:	7f 4f       	sbci	r23, 0xFF	; 255
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	92 e0       	ldi	r25, 0x02	; 2
    3762:	0e 94 50 09 	call	0x12a0	; 0x12a0 <adc_read_configuration>
    3766:	ae 01       	movw	r20, r28
    3768:	48 5f       	subi	r20, 0xF8	; 248
    376a:	5f 4f       	sbci	r21, 0xFF	; 255
    376c:	62 e0       	ldi	r22, 0x02	; 2
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	92 e0       	ldi	r25, 0x02	; 2
    3772:	0e 94 ac 09 	call	0x1358	; 0x1358 <adcch_read_configuration>
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	8f 78       	andi	r24, 0x8F	; 143
    377c:	80 61       	ori	r24, 0x10	; 16
    377e:	8b 83       	std	Y+3, r24	; 0x03
    3780:	89 2f       	mov	r24, r25
    3782:	81 7e       	andi	r24, 0xE1	; 225
    3784:	8a 83       	std	Y+2, r24	; 0x02
    3786:	1c 82       	std	Y+4, r1	; 0x04
    3788:	0d 83       	std	Y+5, r16	; 0x05
    378a:	18 87       	std	Y+8, r17	; 0x08
    378c:	f9 86       	std	Y+9, r15	; 0x09
    378e:	be 01       	movw	r22, r28
    3790:	6f 5f       	subi	r22, 0xFF	; 255
    3792:	7f 4f       	sbci	r23, 0xFF	; 255
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	92 e0       	ldi	r25, 0x02	; 2
    3798:	0e 94 00 09 	call	0x1200	; 0x1200 <adc_write_configuration>
    379c:	ae 01       	movw	r20, r28
    379e:	48 5f       	subi	r20, 0xF8	; 248
    37a0:	5f 4f       	sbci	r21, 0xFF	; 255
    37a2:	62 e0       	ldi	r22, 0x02	; 2
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	92 e0       	ldi	r25, 0x02	; 2
    37a8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <adcch_write_configuration>
    37ac:	be 01       	movw	r22, r28
    37ae:	6f 5f       	subi	r22, 0xFF	; 255
    37b0:	7f 4f       	sbci	r23, 0xFF	; 255
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	92 e0       	ldi	r25, 0x02	; 2
    37b6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <adc_read_configuration>
    37ba:	ae 01       	movw	r20, r28
    37bc:	48 5f       	subi	r20, 0xF8	; 248
    37be:	5f 4f       	sbci	r21, 0xFF	; 255
    37c0:	64 e0       	ldi	r22, 0x04	; 4
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	92 e0       	ldi	r25, 0x02	; 2
    37c6:	0e 94 ac 09 	call	0x1358	; 0x1358 <adcch_read_configuration>
    37ca:	9a 81       	ldd	r25, Y+2	; 0x02
    37cc:	8b 81       	ldd	r24, Y+3	; 0x03
    37ce:	8f 78       	andi	r24, 0x8F	; 143
    37d0:	80 61       	ori	r24, 0x10	; 16
    37d2:	8b 83       	std	Y+3, r24	; 0x03
    37d4:	89 2f       	mov	r24, r25
    37d6:	81 7e       	andi	r24, 0xE1	; 225
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	1c 82       	std	Y+4, r1	; 0x04
    37dc:	0d 83       	std	Y+5, r16	; 0x05
    37de:	18 87       	std	Y+8, r17	; 0x08
    37e0:	e9 86       	std	Y+9, r14	; 0x09
    37e2:	be 01       	movw	r22, r28
    37e4:	6f 5f       	subi	r22, 0xFF	; 255
    37e6:	7f 4f       	sbci	r23, 0xFF	; 255
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	92 e0       	ldi	r25, 0x02	; 2
    37ec:	0e 94 00 09 	call	0x1200	; 0x1200 <adc_write_configuration>
    37f0:	ae 01       	movw	r20, r28
    37f2:	48 5f       	subi	r20, 0xF8	; 248
    37f4:	5f 4f       	sbci	r21, 0xFF	; 255
    37f6:	64 e0       	ldi	r22, 0x04	; 4
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	92 e0       	ldi	r25, 0x02	; 2
    37fc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <adcch_write_configuration>
    3800:	0e 94 0b 05 	call	0xa16	; 0xa16 <gfx_mono_st7565r_init>
    3804:	05 e0       	ldi	r16, 0x05	; 5
    3806:	1a e1       	ldi	r17, 0x1A	; 26
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	41 e0       	ldi	r20, 0x01	; 1
    380e:	61 e0       	ldi	r22, 0x01	; 1
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	86 e4       	ldi	r24, 0x46	; 70
    3814:	90 e2       	ldi	r25, 0x20	; 32
    3816:	74 db       	rcall	.-2328   	; 0x2f00 <xTimerCreate>
    3818:	4c 01       	movw	r8, r24
    381a:	a1 2c       	mov	r10, r1
    381c:	b1 2c       	mov	r11, r1
    381e:	c1 2c       	mov	r12, r1
    3820:	d1 2c       	mov	r13, r1
    3822:	e1 2c       	mov	r14, r1
    3824:	f1 2c       	mov	r15, r1
    3826:	01 e0       	ldi	r16, 0x01	; 1
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	44 ef       	ldi	r20, 0xF4	; 244
    382e:	51 e0       	ldi	r21, 0x01	; 1
    3830:	6f e4       	ldi	r22, 0x4F	; 79
    3832:	70 e2       	ldi	r23, 0x20	; 32
    3834:	89 e1       	ldi	r24, 0x19	; 25
    3836:	9a e1       	ldi	r25, 0x1A	; 26
    3838:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	44 ef       	ldi	r20, 0xF4	; 244
    3842:	51 e0       	ldi	r21, 0x01	; 1
    3844:	6f e4       	ldi	r22, 0x4F	; 79
    3846:	70 e2       	ldi	r23, 0x20	; 32
    3848:	89 e8       	ldi	r24, 0x89	; 137
    384a:	9a e1       	ldi	r25, 0x1A	; 26
    384c:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	44 ef       	ldi	r20, 0xF4	; 244
    3856:	51 e0       	ldi	r21, 0x01	; 1
    3858:	6f e4       	ldi	r22, 0x4F	; 79
    385a:	70 e2       	ldi	r23, 0x20	; 32
    385c:	8a e4       	ldi	r24, 0x4A	; 74
    385e:	9b e1       	ldi	r25, 0x1B	; 27
    3860:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	44 ef       	ldi	r20, 0xF4	; 244
    386a:	51 e0       	ldi	r21, 0x01	; 1
    386c:	6f e4       	ldi	r22, 0x4F	; 79
    386e:	70 e2       	ldi	r23, 0x20	; 32
    3870:	8f e6       	ldi	r24, 0x6F	; 111
    3872:	9a e1       	ldi	r25, 0x1A	; 26
    3874:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	44 ef       	ldi	r20, 0xF4	; 244
    387e:	51 e0       	ldi	r21, 0x01	; 1
    3880:	6f e4       	ldi	r22, 0x4F	; 79
    3882:	70 e2       	ldi	r23, 0x20	; 32
    3884:	80 e5       	ldi	r24, 0x50	; 80
    3886:	9a e1       	ldi	r25, 0x1A	; 26
    3888:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	44 ef       	ldi	r20, 0xF4	; 244
    3892:	51 e0       	ldi	r21, 0x01	; 1
    3894:	6f e4       	ldi	r22, 0x4F	; 79
    3896:	70 e2       	ldi	r23, 0x20	; 32
    3898:	8f ed       	ldi	r24, 0xDF	; 223
    389a:	9a e1       	ldi	r25, 0x1A	; 26
    389c:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	44 ef       	ldi	r20, 0xF4	; 244
    38a6:	51 e0       	ldi	r21, 0x01	; 1
    38a8:	6f e4       	ldi	r22, 0x4F	; 79
    38aa:	70 e2       	ldi	r23, 0x20	; 32
    38ac:	81 e3       	ldi	r24, 0x31	; 49
    38ae:	9a e1       	ldi	r25, 0x1A	; 26
    38b0:	0e 94 1d 13 	call	0x263a	; 0x263a <xTaskGenericCreate>
    38b4:	0e 94 57 14 	call	0x28ae	; 0x28ae <xTaskGetTickCount>
    38b8:	00 e0       	ldi	r16, 0x00	; 0
    38ba:	10 e0       	ldi	r17, 0x00	; 0
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	ac 01       	movw	r20, r24
    38c2:	61 e0       	ldi	r22, 0x01	; 1
    38c4:	c4 01       	movw	r24, r8
    38c6:	52 db       	rcall	.-2396   	; 0x2f6c <xTimerGenericCommand>
    38c8:	0e 94 1e 14 	call	0x283c	; 0x283c <vTaskStartScheduler>
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	2b 96       	adiw	r28, 0x0b	; 11
    38d2:	cd bf       	out	0x3d, r28	; 61
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	1f 91       	pop	r17
    38dc:	0f 91       	pop	r16
    38de:	ff 90       	pop	r15
    38e0:	ef 90       	pop	r14
    38e2:	df 90       	pop	r13
    38e4:	cf 90       	pop	r12
    38e6:	bf 90       	pop	r11
    38e8:	af 90       	pop	r10
    38ea:	9f 90       	pop	r9
    38ec:	8f 90       	pop	r8
    38ee:	08 95       	ret

000038f0 <__udivmodsi4>:
    38f0:	a1 e2       	ldi	r26, 0x21	; 33
    38f2:	1a 2e       	mov	r1, r26
    38f4:	aa 1b       	sub	r26, r26
    38f6:	bb 1b       	sub	r27, r27
    38f8:	fd 01       	movw	r30, r26
    38fa:	0d c0       	rjmp	.+26     	; 0x3916 <__udivmodsi4_ep>

000038fc <__udivmodsi4_loop>:
    38fc:	aa 1f       	adc	r26, r26
    38fe:	bb 1f       	adc	r27, r27
    3900:	ee 1f       	adc	r30, r30
    3902:	ff 1f       	adc	r31, r31
    3904:	a2 17       	cp	r26, r18
    3906:	b3 07       	cpc	r27, r19
    3908:	e4 07       	cpc	r30, r20
    390a:	f5 07       	cpc	r31, r21
    390c:	20 f0       	brcs	.+8      	; 0x3916 <__udivmodsi4_ep>
    390e:	a2 1b       	sub	r26, r18
    3910:	b3 0b       	sbc	r27, r19
    3912:	e4 0b       	sbc	r30, r20
    3914:	f5 0b       	sbc	r31, r21

00003916 <__udivmodsi4_ep>:
    3916:	66 1f       	adc	r22, r22
    3918:	77 1f       	adc	r23, r23
    391a:	88 1f       	adc	r24, r24
    391c:	99 1f       	adc	r25, r25
    391e:	1a 94       	dec	r1
    3920:	69 f7       	brne	.-38     	; 0x38fc <__udivmodsi4_loop>
    3922:	60 95       	com	r22
    3924:	70 95       	com	r23
    3926:	80 95       	com	r24
    3928:	90 95       	com	r25
    392a:	9b 01       	movw	r18, r22
    392c:	ac 01       	movw	r20, r24
    392e:	bd 01       	movw	r22, r26
    3930:	cf 01       	movw	r24, r30
    3932:	08 95       	ret

00003934 <__tablejump2__>:
    3934:	ee 0f       	add	r30, r30
    3936:	ff 1f       	adc	r31, r31
    3938:	88 1f       	adc	r24, r24
    393a:	8b bf       	out	0x3b, r24	; 59
    393c:	07 90       	elpm	r0, Z+
    393e:	f6 91       	elpm	r31, Z
    3940:	e0 2d       	mov	r30, r0
    3942:	19 94       	eijmp

00003944 <malloc>:
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	82 30       	cpi	r24, 0x02	; 2
    394e:	91 05       	cpc	r25, r1
    3950:	10 f4       	brcc	.+4      	; 0x3956 <malloc+0x12>
    3952:	82 e0       	ldi	r24, 0x02	; 2
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	e0 91 0f 24 	lds	r30, 0x240F	; 0x80240f <__flp>
    395a:	f0 91 10 24 	lds	r31, 0x2410	; 0x802410 <__flp+0x1>
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	a0 e0       	ldi	r26, 0x00	; 0
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	30 97       	sbiw	r30, 0x00	; 0
    3968:	19 f1       	breq	.+70     	; 0x39b0 <malloc+0x6c>
    396a:	40 81       	ld	r20, Z
    396c:	51 81       	ldd	r21, Z+1	; 0x01
    396e:	02 81       	ldd	r16, Z+2	; 0x02
    3970:	13 81       	ldd	r17, Z+3	; 0x03
    3972:	48 17       	cp	r20, r24
    3974:	59 07       	cpc	r21, r25
    3976:	c8 f0       	brcs	.+50     	; 0x39aa <malloc+0x66>
    3978:	84 17       	cp	r24, r20
    397a:	95 07       	cpc	r25, r21
    397c:	69 f4       	brne	.+26     	; 0x3998 <malloc+0x54>
    397e:	10 97       	sbiw	r26, 0x00	; 0
    3980:	31 f0       	breq	.+12     	; 0x398e <malloc+0x4a>
    3982:	12 96       	adiw	r26, 0x02	; 2
    3984:	0c 93       	st	X, r16
    3986:	12 97       	sbiw	r26, 0x02	; 2
    3988:	13 96       	adiw	r26, 0x03	; 3
    398a:	1c 93       	st	X, r17
    398c:	27 c0       	rjmp	.+78     	; 0x39dc <malloc+0x98>
    398e:	00 93 0f 24 	sts	0x240F, r16	; 0x80240f <__flp>
    3992:	10 93 10 24 	sts	0x2410, r17	; 0x802410 <__flp+0x1>
    3996:	22 c0       	rjmp	.+68     	; 0x39dc <malloc+0x98>
    3998:	21 15       	cp	r18, r1
    399a:	31 05       	cpc	r19, r1
    399c:	19 f0       	breq	.+6      	; 0x39a4 <malloc+0x60>
    399e:	42 17       	cp	r20, r18
    39a0:	53 07       	cpc	r21, r19
    39a2:	18 f4       	brcc	.+6      	; 0x39aa <malloc+0x66>
    39a4:	9a 01       	movw	r18, r20
    39a6:	bd 01       	movw	r22, r26
    39a8:	ef 01       	movw	r28, r30
    39aa:	df 01       	movw	r26, r30
    39ac:	f8 01       	movw	r30, r16
    39ae:	db cf       	rjmp	.-74     	; 0x3966 <malloc+0x22>
    39b0:	21 15       	cp	r18, r1
    39b2:	31 05       	cpc	r19, r1
    39b4:	f9 f0       	breq	.+62     	; 0x39f4 <malloc+0xb0>
    39b6:	28 1b       	sub	r18, r24
    39b8:	39 0b       	sbc	r19, r25
    39ba:	24 30       	cpi	r18, 0x04	; 4
    39bc:	31 05       	cpc	r19, r1
    39be:	80 f4       	brcc	.+32     	; 0x39e0 <malloc+0x9c>
    39c0:	8a 81       	ldd	r24, Y+2	; 0x02
    39c2:	9b 81       	ldd	r25, Y+3	; 0x03
    39c4:	61 15       	cp	r22, r1
    39c6:	71 05       	cpc	r23, r1
    39c8:	21 f0       	breq	.+8      	; 0x39d2 <malloc+0x8e>
    39ca:	fb 01       	movw	r30, r22
    39cc:	82 83       	std	Z+2, r24	; 0x02
    39ce:	93 83       	std	Z+3, r25	; 0x03
    39d0:	04 c0       	rjmp	.+8      	; 0x39da <malloc+0x96>
    39d2:	80 93 0f 24 	sts	0x240F, r24	; 0x80240f <__flp>
    39d6:	90 93 10 24 	sts	0x2410, r25	; 0x802410 <__flp+0x1>
    39da:	fe 01       	movw	r30, r28
    39dc:	32 96       	adiw	r30, 0x02	; 2
    39de:	44 c0       	rjmp	.+136    	; 0x3a68 <malloc+0x124>
    39e0:	fe 01       	movw	r30, r28
    39e2:	e2 0f       	add	r30, r18
    39e4:	f3 1f       	adc	r31, r19
    39e6:	81 93       	st	Z+, r24
    39e8:	91 93       	st	Z+, r25
    39ea:	22 50       	subi	r18, 0x02	; 2
    39ec:	31 09       	sbc	r19, r1
    39ee:	28 83       	st	Y, r18
    39f0:	39 83       	std	Y+1, r19	; 0x01
    39f2:	3a c0       	rjmp	.+116    	; 0x3a68 <malloc+0x124>
    39f4:	20 91 0d 24 	lds	r18, 0x240D	; 0x80240d <__brkval>
    39f8:	30 91 0e 24 	lds	r19, 0x240E	; 0x80240e <__brkval+0x1>
    39fc:	23 2b       	or	r18, r19
    39fe:	41 f4       	brne	.+16     	; 0x3a10 <malloc+0xcc>
    3a00:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3a04:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3a08:	20 93 0d 24 	sts	0x240D, r18	; 0x80240d <__brkval>
    3a0c:	30 93 0e 24 	sts	0x240E, r19	; 0x80240e <__brkval+0x1>
    3a10:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3a14:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3a18:	21 15       	cp	r18, r1
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	41 f4       	brne	.+16     	; 0x3a2e <malloc+0xea>
    3a1e:	2d b7       	in	r18, 0x3d	; 61
    3a20:	3e b7       	in	r19, 0x3e	; 62
    3a22:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3a26:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3a2a:	24 1b       	sub	r18, r20
    3a2c:	35 0b       	sbc	r19, r21
    3a2e:	e0 91 0d 24 	lds	r30, 0x240D	; 0x80240d <__brkval>
    3a32:	f0 91 0e 24 	lds	r31, 0x240E	; 0x80240e <__brkval+0x1>
    3a36:	e2 17       	cp	r30, r18
    3a38:	f3 07       	cpc	r31, r19
    3a3a:	a0 f4       	brcc	.+40     	; 0x3a64 <malloc+0x120>
    3a3c:	2e 1b       	sub	r18, r30
    3a3e:	3f 0b       	sbc	r19, r31
    3a40:	28 17       	cp	r18, r24
    3a42:	39 07       	cpc	r19, r25
    3a44:	78 f0       	brcs	.+30     	; 0x3a64 <malloc+0x120>
    3a46:	ac 01       	movw	r20, r24
    3a48:	4e 5f       	subi	r20, 0xFE	; 254
    3a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4c:	24 17       	cp	r18, r20
    3a4e:	35 07       	cpc	r19, r21
    3a50:	48 f0       	brcs	.+18     	; 0x3a64 <malloc+0x120>
    3a52:	4e 0f       	add	r20, r30
    3a54:	5f 1f       	adc	r21, r31
    3a56:	40 93 0d 24 	sts	0x240D, r20	; 0x80240d <__brkval>
    3a5a:	50 93 0e 24 	sts	0x240E, r21	; 0x80240e <__brkval+0x1>
    3a5e:	81 93       	st	Z+, r24
    3a60:	91 93       	st	Z+, r25
    3a62:	02 c0       	rjmp	.+4      	; 0x3a68 <malloc+0x124>
    3a64:	e0 e0       	ldi	r30, 0x00	; 0
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	cf 01       	movw	r24, r30
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	08 95       	ret

00003a74 <free>:
    3a74:	cf 93       	push	r28
    3a76:	df 93       	push	r29
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <free+0xa>
    3a7c:	81 c0       	rjmp	.+258    	; 0x3b80 <free+0x10c>
    3a7e:	fc 01       	movw	r30, r24
    3a80:	32 97       	sbiw	r30, 0x02	; 2
    3a82:	12 82       	std	Z+2, r1	; 0x02
    3a84:	13 82       	std	Z+3, r1	; 0x03
    3a86:	a0 91 0f 24 	lds	r26, 0x240F	; 0x80240f <__flp>
    3a8a:	b0 91 10 24 	lds	r27, 0x2410	; 0x802410 <__flp+0x1>
    3a8e:	10 97       	sbiw	r26, 0x00	; 0
    3a90:	81 f4       	brne	.+32     	; 0x3ab2 <free+0x3e>
    3a92:	20 81       	ld	r18, Z
    3a94:	31 81       	ldd	r19, Z+1	; 0x01
    3a96:	82 0f       	add	r24, r18
    3a98:	93 1f       	adc	r25, r19
    3a9a:	20 91 0d 24 	lds	r18, 0x240D	; 0x80240d <__brkval>
    3a9e:	30 91 0e 24 	lds	r19, 0x240E	; 0x80240e <__brkval+0x1>
    3aa2:	28 17       	cp	r18, r24
    3aa4:	39 07       	cpc	r19, r25
    3aa6:	51 f5       	brne	.+84     	; 0x3afc <free+0x88>
    3aa8:	e0 93 0d 24 	sts	0x240D, r30	; 0x80240d <__brkval>
    3aac:	f0 93 0e 24 	sts	0x240E, r31	; 0x80240e <__brkval+0x1>
    3ab0:	67 c0       	rjmp	.+206    	; 0x3b80 <free+0x10c>
    3ab2:	ed 01       	movw	r28, r26
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	ce 17       	cp	r28, r30
    3aba:	df 07       	cpc	r29, r31
    3abc:	40 f4       	brcc	.+16     	; 0x3ace <free+0x5a>
    3abe:	4a 81       	ldd	r20, Y+2	; 0x02
    3ac0:	5b 81       	ldd	r21, Y+3	; 0x03
    3ac2:	9e 01       	movw	r18, r28
    3ac4:	41 15       	cp	r20, r1
    3ac6:	51 05       	cpc	r21, r1
    3ac8:	f1 f0       	breq	.+60     	; 0x3b06 <free+0x92>
    3aca:	ea 01       	movw	r28, r20
    3acc:	f5 cf       	rjmp	.-22     	; 0x3ab8 <free+0x44>
    3ace:	c2 83       	std	Z+2, r28	; 0x02
    3ad0:	d3 83       	std	Z+3, r29	; 0x03
    3ad2:	40 81       	ld	r20, Z
    3ad4:	51 81       	ldd	r21, Z+1	; 0x01
    3ad6:	84 0f       	add	r24, r20
    3ad8:	95 1f       	adc	r25, r21
    3ada:	c8 17       	cp	r28, r24
    3adc:	d9 07       	cpc	r29, r25
    3ade:	59 f4       	brne	.+22     	; 0x3af6 <free+0x82>
    3ae0:	88 81       	ld	r24, Y
    3ae2:	99 81       	ldd	r25, Y+1	; 0x01
    3ae4:	84 0f       	add	r24, r20
    3ae6:	95 1f       	adc	r25, r21
    3ae8:	02 96       	adiw	r24, 0x02	; 2
    3aea:	80 83       	st	Z, r24
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	9b 81       	ldd	r25, Y+3	; 0x03
    3af2:	82 83       	std	Z+2, r24	; 0x02
    3af4:	93 83       	std	Z+3, r25	; 0x03
    3af6:	21 15       	cp	r18, r1
    3af8:	31 05       	cpc	r19, r1
    3afa:	29 f4       	brne	.+10     	; 0x3b06 <free+0x92>
    3afc:	e0 93 0f 24 	sts	0x240F, r30	; 0x80240f <__flp>
    3b00:	f0 93 10 24 	sts	0x2410, r31	; 0x802410 <__flp+0x1>
    3b04:	3d c0       	rjmp	.+122    	; 0x3b80 <free+0x10c>
    3b06:	e9 01       	movw	r28, r18
    3b08:	ea 83       	std	Y+2, r30	; 0x02
    3b0a:	fb 83       	std	Y+3, r31	; 0x03
    3b0c:	49 91       	ld	r20, Y+
    3b0e:	59 91       	ld	r21, Y+
    3b10:	c4 0f       	add	r28, r20
    3b12:	d5 1f       	adc	r29, r21
    3b14:	ec 17       	cp	r30, r28
    3b16:	fd 07       	cpc	r31, r29
    3b18:	61 f4       	brne	.+24     	; 0x3b32 <free+0xbe>
    3b1a:	80 81       	ld	r24, Z
    3b1c:	91 81       	ldd	r25, Z+1	; 0x01
    3b1e:	84 0f       	add	r24, r20
    3b20:	95 1f       	adc	r25, r21
    3b22:	02 96       	adiw	r24, 0x02	; 2
    3b24:	e9 01       	movw	r28, r18
    3b26:	88 83       	st	Y, r24
    3b28:	99 83       	std	Y+1, r25	; 0x01
    3b2a:	82 81       	ldd	r24, Z+2	; 0x02
    3b2c:	93 81       	ldd	r25, Z+3	; 0x03
    3b2e:	8a 83       	std	Y+2, r24	; 0x02
    3b30:	9b 83       	std	Y+3, r25	; 0x03
    3b32:	e0 e0       	ldi	r30, 0x00	; 0
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	12 96       	adiw	r26, 0x02	; 2
    3b38:	8d 91       	ld	r24, X+
    3b3a:	9c 91       	ld	r25, X
    3b3c:	13 97       	sbiw	r26, 0x03	; 3
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	19 f0       	breq	.+6      	; 0x3b48 <free+0xd4>
    3b42:	fd 01       	movw	r30, r26
    3b44:	dc 01       	movw	r26, r24
    3b46:	f7 cf       	rjmp	.-18     	; 0x3b36 <free+0xc2>
    3b48:	8d 91       	ld	r24, X+
    3b4a:	9c 91       	ld	r25, X
    3b4c:	11 97       	sbiw	r26, 0x01	; 1
    3b4e:	9d 01       	movw	r18, r26
    3b50:	2e 5f       	subi	r18, 0xFE	; 254
    3b52:	3f 4f       	sbci	r19, 0xFF	; 255
    3b54:	82 0f       	add	r24, r18
    3b56:	93 1f       	adc	r25, r19
    3b58:	20 91 0d 24 	lds	r18, 0x240D	; 0x80240d <__brkval>
    3b5c:	30 91 0e 24 	lds	r19, 0x240E	; 0x80240e <__brkval+0x1>
    3b60:	28 17       	cp	r18, r24
    3b62:	39 07       	cpc	r19, r25
    3b64:	69 f4       	brne	.+26     	; 0x3b80 <free+0x10c>
    3b66:	30 97       	sbiw	r30, 0x00	; 0
    3b68:	29 f4       	brne	.+10     	; 0x3b74 <free+0x100>
    3b6a:	10 92 0f 24 	sts	0x240F, r1	; 0x80240f <__flp>
    3b6e:	10 92 10 24 	sts	0x2410, r1	; 0x802410 <__flp+0x1>
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <free+0x104>
    3b74:	12 82       	std	Z+2, r1	; 0x02
    3b76:	13 82       	std	Z+3, r1	; 0x03
    3b78:	a0 93 0d 24 	sts	0x240D, r26	; 0x80240d <__brkval>
    3b7c:	b0 93 0e 24 	sts	0x240E, r27	; 0x80240e <__brkval+0x1>
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	08 95       	ret

00003b86 <memcpy>:
    3b86:	fb 01       	movw	r30, r22
    3b88:	dc 01       	movw	r26, r24
    3b8a:	02 c0       	rjmp	.+4      	; 0x3b90 <memcpy+0xa>
    3b8c:	01 90       	ld	r0, Z+
    3b8e:	0d 92       	st	X+, r0
    3b90:	41 50       	subi	r20, 0x01	; 1
    3b92:	50 40       	sbci	r21, 0x00	; 0
    3b94:	d8 f7       	brcc	.-10     	; 0x3b8c <memcpy+0x6>
    3b96:	08 95       	ret

00003b98 <strcmp>:
    3b98:	fb 01       	movw	r30, r22
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	8d 91       	ld	r24, X+
    3b9e:	01 90       	ld	r0, Z+
    3ba0:	80 19       	sub	r24, r0
    3ba2:	01 10       	cpse	r0, r1
    3ba4:	d9 f3       	breq	.-10     	; 0x3b9c <strcmp+0x4>
    3ba6:	99 0b       	sbc	r25, r25
    3ba8:	08 95       	ret

00003baa <snprintf>:
    3baa:	0f 93       	push	r16
    3bac:	1f 93       	push	r17
    3bae:	cf 93       	push	r28
    3bb0:	df 93       	push	r29
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	2e 97       	sbiw	r28, 0x0e	; 14
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0e 89       	ldd	r16, Y+22	; 0x16
    3bbe:	1f 89       	ldd	r17, Y+23	; 0x17
    3bc0:	88 8d       	ldd	r24, Y+24	; 0x18
    3bc2:	99 8d       	ldd	r25, Y+25	; 0x19
    3bc4:	26 e0       	ldi	r18, 0x06	; 6
    3bc6:	2c 83       	std	Y+4, r18	; 0x04
    3bc8:	09 83       	std	Y+1, r16	; 0x01
    3bca:	1a 83       	std	Y+2, r17	; 0x02
    3bcc:	97 ff       	sbrs	r25, 7
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <snprintf+0x2a>
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	90 e8       	ldi	r25, 0x80	; 128
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
    3bd8:	9e 83       	std	Y+6, r25	; 0x06
    3bda:	ae 01       	movw	r20, r28
    3bdc:	44 5e       	subi	r20, 0xE4	; 228
    3bde:	5f 4f       	sbci	r21, 0xFF	; 255
    3be0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3be2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3be4:	ce 01       	movw	r24, r28
    3be6:	01 96       	adiw	r24, 0x01	; 1
    3be8:	16 d0       	rcall	.+44     	; 0x3c16 <vfprintf>
    3bea:	4d 81       	ldd	r20, Y+5	; 0x05
    3bec:	5e 81       	ldd	r21, Y+6	; 0x06
    3bee:	57 fd       	sbrc	r21, 7
    3bf0:	0a c0       	rjmp	.+20     	; 0x3c06 <snprintf+0x5c>
    3bf2:	2f 81       	ldd	r18, Y+7	; 0x07
    3bf4:	38 85       	ldd	r19, Y+8	; 0x08
    3bf6:	42 17       	cp	r20, r18
    3bf8:	53 07       	cpc	r21, r19
    3bfa:	0c f4       	brge	.+2      	; 0x3bfe <snprintf+0x54>
    3bfc:	9a 01       	movw	r18, r20
    3bfe:	f8 01       	movw	r30, r16
    3c00:	e2 0f       	add	r30, r18
    3c02:	f3 1f       	adc	r31, r19
    3c04:	10 82       	st	Z, r1
    3c06:	2e 96       	adiw	r28, 0x0e	; 14
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	08 95       	ret

00003c16 <vfprintf>:
    3c16:	2f 92       	push	r2
    3c18:	3f 92       	push	r3
    3c1a:	4f 92       	push	r4
    3c1c:	5f 92       	push	r5
    3c1e:	6f 92       	push	r6
    3c20:	7f 92       	push	r7
    3c22:	8f 92       	push	r8
    3c24:	9f 92       	push	r9
    3c26:	af 92       	push	r10
    3c28:	bf 92       	push	r11
    3c2a:	cf 92       	push	r12
    3c2c:	df 92       	push	r13
    3c2e:	ef 92       	push	r14
    3c30:	ff 92       	push	r15
    3c32:	0f 93       	push	r16
    3c34:	1f 93       	push	r17
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
    3c3e:	2b 97       	sbiw	r28, 0x0b	; 11
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	6c 01       	movw	r12, r24
    3c46:	7b 01       	movw	r14, r22
    3c48:	8a 01       	movw	r16, r20
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	16 82       	std	Z+6, r1	; 0x06
    3c4e:	17 82       	std	Z+7, r1	; 0x07
    3c50:	83 81       	ldd	r24, Z+3	; 0x03
    3c52:	81 ff       	sbrs	r24, 1
    3c54:	bf c1       	rjmp	.+894    	; 0x3fd4 <vfprintf+0x3be>
    3c56:	ce 01       	movw	r24, r28
    3c58:	01 96       	adiw	r24, 0x01	; 1
    3c5a:	3c 01       	movw	r6, r24
    3c5c:	f6 01       	movw	r30, r12
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	f7 01       	movw	r30, r14
    3c62:	93 fd       	sbrc	r25, 3
    3c64:	85 91       	lpm	r24, Z+
    3c66:	93 ff       	sbrs	r25, 3
    3c68:	81 91       	ld	r24, Z+
    3c6a:	7f 01       	movw	r14, r30
    3c6c:	88 23       	and	r24, r24
    3c6e:	09 f4       	brne	.+2      	; 0x3c72 <vfprintf+0x5c>
    3c70:	ad c1       	rjmp	.+858    	; 0x3fcc <vfprintf+0x3b6>
    3c72:	85 32       	cpi	r24, 0x25	; 37
    3c74:	39 f4       	brne	.+14     	; 0x3c84 <vfprintf+0x6e>
    3c76:	93 fd       	sbrc	r25, 3
    3c78:	85 91       	lpm	r24, Z+
    3c7a:	93 ff       	sbrs	r25, 3
    3c7c:	81 91       	ld	r24, Z+
    3c7e:	7f 01       	movw	r14, r30
    3c80:	85 32       	cpi	r24, 0x25	; 37
    3c82:	21 f4       	brne	.+8      	; 0x3c8c <vfprintf+0x76>
    3c84:	b6 01       	movw	r22, r12
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	d3 d1       	rcall	.+934    	; 0x4030 <fputc>
    3c8a:	e8 cf       	rjmp	.-48     	; 0x3c5c <vfprintf+0x46>
    3c8c:	91 2c       	mov	r9, r1
    3c8e:	21 2c       	mov	r2, r1
    3c90:	31 2c       	mov	r3, r1
    3c92:	ff e1       	ldi	r31, 0x1F	; 31
    3c94:	f3 15       	cp	r31, r3
    3c96:	d8 f0       	brcs	.+54     	; 0x3cce <vfprintf+0xb8>
    3c98:	8b 32       	cpi	r24, 0x2B	; 43
    3c9a:	79 f0       	breq	.+30     	; 0x3cba <vfprintf+0xa4>
    3c9c:	38 f4       	brcc	.+14     	; 0x3cac <vfprintf+0x96>
    3c9e:	80 32       	cpi	r24, 0x20	; 32
    3ca0:	79 f0       	breq	.+30     	; 0x3cc0 <vfprintf+0xaa>
    3ca2:	83 32       	cpi	r24, 0x23	; 35
    3ca4:	a1 f4       	brne	.+40     	; 0x3cce <vfprintf+0xb8>
    3ca6:	23 2d       	mov	r18, r3
    3ca8:	20 61       	ori	r18, 0x10	; 16
    3caa:	1d c0       	rjmp	.+58     	; 0x3ce6 <vfprintf+0xd0>
    3cac:	8d 32       	cpi	r24, 0x2D	; 45
    3cae:	61 f0       	breq	.+24     	; 0x3cc8 <vfprintf+0xb2>
    3cb0:	80 33       	cpi	r24, 0x30	; 48
    3cb2:	69 f4       	brne	.+26     	; 0x3cce <vfprintf+0xb8>
    3cb4:	23 2d       	mov	r18, r3
    3cb6:	21 60       	ori	r18, 0x01	; 1
    3cb8:	16 c0       	rjmp	.+44     	; 0x3ce6 <vfprintf+0xd0>
    3cba:	83 2d       	mov	r24, r3
    3cbc:	82 60       	ori	r24, 0x02	; 2
    3cbe:	38 2e       	mov	r3, r24
    3cc0:	e3 2d       	mov	r30, r3
    3cc2:	e4 60       	ori	r30, 0x04	; 4
    3cc4:	3e 2e       	mov	r3, r30
    3cc6:	2a c0       	rjmp	.+84     	; 0x3d1c <vfprintf+0x106>
    3cc8:	f3 2d       	mov	r31, r3
    3cca:	f8 60       	ori	r31, 0x08	; 8
    3ccc:	1d c0       	rjmp	.+58     	; 0x3d08 <vfprintf+0xf2>
    3cce:	37 fc       	sbrc	r3, 7
    3cd0:	2d c0       	rjmp	.+90     	; 0x3d2c <vfprintf+0x116>
    3cd2:	20 ed       	ldi	r18, 0xD0	; 208
    3cd4:	28 0f       	add	r18, r24
    3cd6:	2a 30       	cpi	r18, 0x0A	; 10
    3cd8:	40 f0       	brcs	.+16     	; 0x3cea <vfprintf+0xd4>
    3cda:	8e 32       	cpi	r24, 0x2E	; 46
    3cdc:	b9 f4       	brne	.+46     	; 0x3d0c <vfprintf+0xf6>
    3cde:	36 fc       	sbrc	r3, 6
    3ce0:	75 c1       	rjmp	.+746    	; 0x3fcc <vfprintf+0x3b6>
    3ce2:	23 2d       	mov	r18, r3
    3ce4:	20 64       	ori	r18, 0x40	; 64
    3ce6:	32 2e       	mov	r3, r18
    3ce8:	19 c0       	rjmp	.+50     	; 0x3d1c <vfprintf+0x106>
    3cea:	36 fe       	sbrs	r3, 6
    3cec:	06 c0       	rjmp	.+12     	; 0x3cfa <vfprintf+0xe4>
    3cee:	8a e0       	ldi	r24, 0x0A	; 10
    3cf0:	98 9e       	mul	r9, r24
    3cf2:	20 0d       	add	r18, r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	92 2e       	mov	r9, r18
    3cf8:	11 c0       	rjmp	.+34     	; 0x3d1c <vfprintf+0x106>
    3cfa:	ea e0       	ldi	r30, 0x0A	; 10
    3cfc:	2e 9e       	mul	r2, r30
    3cfe:	20 0d       	add	r18, r0
    3d00:	11 24       	eor	r1, r1
    3d02:	22 2e       	mov	r2, r18
    3d04:	f3 2d       	mov	r31, r3
    3d06:	f0 62       	ori	r31, 0x20	; 32
    3d08:	3f 2e       	mov	r3, r31
    3d0a:	08 c0       	rjmp	.+16     	; 0x3d1c <vfprintf+0x106>
    3d0c:	8c 36       	cpi	r24, 0x6C	; 108
    3d0e:	21 f4       	brne	.+8      	; 0x3d18 <vfprintf+0x102>
    3d10:	83 2d       	mov	r24, r3
    3d12:	80 68       	ori	r24, 0x80	; 128
    3d14:	38 2e       	mov	r3, r24
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <vfprintf+0x106>
    3d18:	88 36       	cpi	r24, 0x68	; 104
    3d1a:	41 f4       	brne	.+16     	; 0x3d2c <vfprintf+0x116>
    3d1c:	f7 01       	movw	r30, r14
    3d1e:	93 fd       	sbrc	r25, 3
    3d20:	85 91       	lpm	r24, Z+
    3d22:	93 ff       	sbrs	r25, 3
    3d24:	81 91       	ld	r24, Z+
    3d26:	7f 01       	movw	r14, r30
    3d28:	81 11       	cpse	r24, r1
    3d2a:	b3 cf       	rjmp	.-154    	; 0x3c92 <vfprintf+0x7c>
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	9f 7d       	andi	r25, 0xDF	; 223
    3d30:	95 54       	subi	r25, 0x45	; 69
    3d32:	93 30       	cpi	r25, 0x03	; 3
    3d34:	28 f4       	brcc	.+10     	; 0x3d40 <vfprintf+0x12a>
    3d36:	0c 5f       	subi	r16, 0xFC	; 252
    3d38:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3a:	9f e3       	ldi	r25, 0x3F	; 63
    3d3c:	99 83       	std	Y+1, r25	; 0x01
    3d3e:	0d c0       	rjmp	.+26     	; 0x3d5a <vfprintf+0x144>
    3d40:	83 36       	cpi	r24, 0x63	; 99
    3d42:	31 f0       	breq	.+12     	; 0x3d50 <vfprintf+0x13a>
    3d44:	83 37       	cpi	r24, 0x73	; 115
    3d46:	71 f0       	breq	.+28     	; 0x3d64 <vfprintf+0x14e>
    3d48:	83 35       	cpi	r24, 0x53	; 83
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <vfprintf+0x138>
    3d4c:	55 c0       	rjmp	.+170    	; 0x3df8 <vfprintf+0x1e2>
    3d4e:	20 c0       	rjmp	.+64     	; 0x3d90 <vfprintf+0x17a>
    3d50:	f8 01       	movw	r30, r16
    3d52:	80 81       	ld	r24, Z
    3d54:	89 83       	std	Y+1, r24	; 0x01
    3d56:	0e 5f       	subi	r16, 0xFE	; 254
    3d58:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5a:	88 24       	eor	r8, r8
    3d5c:	83 94       	inc	r8
    3d5e:	91 2c       	mov	r9, r1
    3d60:	53 01       	movw	r10, r6
    3d62:	12 c0       	rjmp	.+36     	; 0x3d88 <vfprintf+0x172>
    3d64:	28 01       	movw	r4, r16
    3d66:	f2 e0       	ldi	r31, 0x02	; 2
    3d68:	4f 0e       	add	r4, r31
    3d6a:	51 1c       	adc	r5, r1
    3d6c:	f8 01       	movw	r30, r16
    3d6e:	a0 80       	ld	r10, Z
    3d70:	b1 80       	ldd	r11, Z+1	; 0x01
    3d72:	36 fe       	sbrs	r3, 6
    3d74:	03 c0       	rjmp	.+6      	; 0x3d7c <vfprintf+0x166>
    3d76:	69 2d       	mov	r22, r9
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <vfprintf+0x16a>
    3d7c:	6f ef       	ldi	r22, 0xFF	; 255
    3d7e:	7f ef       	ldi	r23, 0xFF	; 255
    3d80:	c5 01       	movw	r24, r10
    3d82:	4b d1       	rcall	.+662    	; 0x401a <strnlen>
    3d84:	4c 01       	movw	r8, r24
    3d86:	82 01       	movw	r16, r4
    3d88:	f3 2d       	mov	r31, r3
    3d8a:	ff 77       	andi	r31, 0x7F	; 127
    3d8c:	3f 2e       	mov	r3, r31
    3d8e:	15 c0       	rjmp	.+42     	; 0x3dba <vfprintf+0x1a4>
    3d90:	28 01       	movw	r4, r16
    3d92:	22 e0       	ldi	r18, 0x02	; 2
    3d94:	42 0e       	add	r4, r18
    3d96:	51 1c       	adc	r5, r1
    3d98:	f8 01       	movw	r30, r16
    3d9a:	a0 80       	ld	r10, Z
    3d9c:	b1 80       	ldd	r11, Z+1	; 0x01
    3d9e:	36 fe       	sbrs	r3, 6
    3da0:	03 c0       	rjmp	.+6      	; 0x3da8 <vfprintf+0x192>
    3da2:	69 2d       	mov	r22, r9
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	02 c0       	rjmp	.+4      	; 0x3dac <vfprintf+0x196>
    3da8:	6f ef       	ldi	r22, 0xFF	; 255
    3daa:	7f ef       	ldi	r23, 0xFF	; 255
    3dac:	c5 01       	movw	r24, r10
    3dae:	2a d1       	rcall	.+596    	; 0x4004 <strnlen_P>
    3db0:	4c 01       	movw	r8, r24
    3db2:	f3 2d       	mov	r31, r3
    3db4:	f0 68       	ori	r31, 0x80	; 128
    3db6:	3f 2e       	mov	r3, r31
    3db8:	82 01       	movw	r16, r4
    3dba:	33 fc       	sbrc	r3, 3
    3dbc:	19 c0       	rjmp	.+50     	; 0x3df0 <vfprintf+0x1da>
    3dbe:	82 2d       	mov	r24, r2
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	88 16       	cp	r8, r24
    3dc4:	99 06       	cpc	r9, r25
    3dc6:	a0 f4       	brcc	.+40     	; 0x3df0 <vfprintf+0x1da>
    3dc8:	b6 01       	movw	r22, r12
    3dca:	80 e2       	ldi	r24, 0x20	; 32
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	30 d1       	rcall	.+608    	; 0x4030 <fputc>
    3dd0:	2a 94       	dec	r2
    3dd2:	f5 cf       	rjmp	.-22     	; 0x3dbe <vfprintf+0x1a8>
    3dd4:	f5 01       	movw	r30, r10
    3dd6:	37 fc       	sbrc	r3, 7
    3dd8:	85 91       	lpm	r24, Z+
    3dda:	37 fe       	sbrs	r3, 7
    3ddc:	81 91       	ld	r24, Z+
    3dde:	5f 01       	movw	r10, r30
    3de0:	b6 01       	movw	r22, r12
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	25 d1       	rcall	.+586    	; 0x4030 <fputc>
    3de6:	21 10       	cpse	r2, r1
    3de8:	2a 94       	dec	r2
    3dea:	21 e0       	ldi	r18, 0x01	; 1
    3dec:	82 1a       	sub	r8, r18
    3dee:	91 08       	sbc	r9, r1
    3df0:	81 14       	cp	r8, r1
    3df2:	91 04       	cpc	r9, r1
    3df4:	79 f7       	brne	.-34     	; 0x3dd4 <vfprintf+0x1be>
    3df6:	e1 c0       	rjmp	.+450    	; 0x3fba <vfprintf+0x3a4>
    3df8:	84 36       	cpi	r24, 0x64	; 100
    3dfa:	11 f0       	breq	.+4      	; 0x3e00 <vfprintf+0x1ea>
    3dfc:	89 36       	cpi	r24, 0x69	; 105
    3dfe:	39 f5       	brne	.+78     	; 0x3e4e <vfprintf+0x238>
    3e00:	f8 01       	movw	r30, r16
    3e02:	37 fe       	sbrs	r3, 7
    3e04:	07 c0       	rjmp	.+14     	; 0x3e14 <vfprintf+0x1fe>
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	0c 5f       	subi	r16, 0xFC	; 252
    3e10:	1f 4f       	sbci	r17, 0xFF	; 255
    3e12:	08 c0       	rjmp	.+16     	; 0x3e24 <vfprintf+0x20e>
    3e14:	60 81       	ld	r22, Z
    3e16:	71 81       	ldd	r23, Z+1	; 0x01
    3e18:	07 2e       	mov	r0, r23
    3e1a:	00 0c       	add	r0, r0
    3e1c:	88 0b       	sbc	r24, r24
    3e1e:	99 0b       	sbc	r25, r25
    3e20:	0e 5f       	subi	r16, 0xFE	; 254
    3e22:	1f 4f       	sbci	r17, 0xFF	; 255
    3e24:	f3 2d       	mov	r31, r3
    3e26:	ff 76       	andi	r31, 0x6F	; 111
    3e28:	3f 2e       	mov	r3, r31
    3e2a:	97 ff       	sbrs	r25, 7
    3e2c:	09 c0       	rjmp	.+18     	; 0x3e40 <vfprintf+0x22a>
    3e2e:	90 95       	com	r25
    3e30:	80 95       	com	r24
    3e32:	70 95       	com	r23
    3e34:	61 95       	neg	r22
    3e36:	7f 4f       	sbci	r23, 0xFF	; 255
    3e38:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3c:	f0 68       	ori	r31, 0x80	; 128
    3e3e:	3f 2e       	mov	r3, r31
    3e40:	2a e0       	ldi	r18, 0x0A	; 10
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	a3 01       	movw	r20, r6
    3e46:	30 d1       	rcall	.+608    	; 0x40a8 <__ultoa_invert>
    3e48:	88 2e       	mov	r8, r24
    3e4a:	86 18       	sub	r8, r6
    3e4c:	44 c0       	rjmp	.+136    	; 0x3ed6 <vfprintf+0x2c0>
    3e4e:	85 37       	cpi	r24, 0x75	; 117
    3e50:	31 f4       	brne	.+12     	; 0x3e5e <vfprintf+0x248>
    3e52:	23 2d       	mov	r18, r3
    3e54:	2f 7e       	andi	r18, 0xEF	; 239
    3e56:	b2 2e       	mov	r11, r18
    3e58:	2a e0       	ldi	r18, 0x0A	; 10
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	25 c0       	rjmp	.+74     	; 0x3ea8 <vfprintf+0x292>
    3e5e:	93 2d       	mov	r25, r3
    3e60:	99 7f       	andi	r25, 0xF9	; 249
    3e62:	b9 2e       	mov	r11, r25
    3e64:	8f 36       	cpi	r24, 0x6F	; 111
    3e66:	c1 f0       	breq	.+48     	; 0x3e98 <vfprintf+0x282>
    3e68:	18 f4       	brcc	.+6      	; 0x3e70 <vfprintf+0x25a>
    3e6a:	88 35       	cpi	r24, 0x58	; 88
    3e6c:	79 f0       	breq	.+30     	; 0x3e8c <vfprintf+0x276>
    3e6e:	ae c0       	rjmp	.+348    	; 0x3fcc <vfprintf+0x3b6>
    3e70:	80 37       	cpi	r24, 0x70	; 112
    3e72:	19 f0       	breq	.+6      	; 0x3e7a <vfprintf+0x264>
    3e74:	88 37       	cpi	r24, 0x78	; 120
    3e76:	21 f0       	breq	.+8      	; 0x3e80 <vfprintf+0x26a>
    3e78:	a9 c0       	rjmp	.+338    	; 0x3fcc <vfprintf+0x3b6>
    3e7a:	e9 2f       	mov	r30, r25
    3e7c:	e0 61       	ori	r30, 0x10	; 16
    3e7e:	be 2e       	mov	r11, r30
    3e80:	b4 fe       	sbrs	r11, 4
    3e82:	0d c0       	rjmp	.+26     	; 0x3e9e <vfprintf+0x288>
    3e84:	fb 2d       	mov	r31, r11
    3e86:	f4 60       	ori	r31, 0x04	; 4
    3e88:	bf 2e       	mov	r11, r31
    3e8a:	09 c0       	rjmp	.+18     	; 0x3e9e <vfprintf+0x288>
    3e8c:	34 fe       	sbrs	r3, 4
    3e8e:	0a c0       	rjmp	.+20     	; 0x3ea4 <vfprintf+0x28e>
    3e90:	29 2f       	mov	r18, r25
    3e92:	26 60       	ori	r18, 0x06	; 6
    3e94:	b2 2e       	mov	r11, r18
    3e96:	06 c0       	rjmp	.+12     	; 0x3ea4 <vfprintf+0x28e>
    3e98:	28 e0       	ldi	r18, 0x08	; 8
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	05 c0       	rjmp	.+10     	; 0x3ea8 <vfprintf+0x292>
    3e9e:	20 e1       	ldi	r18, 0x10	; 16
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <vfprintf+0x292>
    3ea4:	20 e1       	ldi	r18, 0x10	; 16
    3ea6:	32 e0       	ldi	r19, 0x02	; 2
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	b7 fe       	sbrs	r11, 7
    3eac:	07 c0       	rjmp	.+14     	; 0x3ebc <vfprintf+0x2a6>
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	0c 5f       	subi	r16, 0xFC	; 252
    3eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eba:	06 c0       	rjmp	.+12     	; 0x3ec8 <vfprintf+0x2b2>
    3ebc:	60 81       	ld	r22, Z
    3ebe:	71 81       	ldd	r23, Z+1	; 0x01
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	0e 5f       	subi	r16, 0xFE	; 254
    3ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec8:	a3 01       	movw	r20, r6
    3eca:	ee d0       	rcall	.+476    	; 0x40a8 <__ultoa_invert>
    3ecc:	88 2e       	mov	r8, r24
    3ece:	86 18       	sub	r8, r6
    3ed0:	fb 2d       	mov	r31, r11
    3ed2:	ff 77       	andi	r31, 0x7F	; 127
    3ed4:	3f 2e       	mov	r3, r31
    3ed6:	36 fe       	sbrs	r3, 6
    3ed8:	0d c0       	rjmp	.+26     	; 0x3ef4 <vfprintf+0x2de>
    3eda:	23 2d       	mov	r18, r3
    3edc:	2e 7f       	andi	r18, 0xFE	; 254
    3ede:	a2 2e       	mov	r10, r18
    3ee0:	89 14       	cp	r8, r9
    3ee2:	58 f4       	brcc	.+22     	; 0x3efa <vfprintf+0x2e4>
    3ee4:	34 fe       	sbrs	r3, 4
    3ee6:	0b c0       	rjmp	.+22     	; 0x3efe <vfprintf+0x2e8>
    3ee8:	32 fc       	sbrc	r3, 2
    3eea:	09 c0       	rjmp	.+18     	; 0x3efe <vfprintf+0x2e8>
    3eec:	83 2d       	mov	r24, r3
    3eee:	8e 7e       	andi	r24, 0xEE	; 238
    3ef0:	a8 2e       	mov	r10, r24
    3ef2:	05 c0       	rjmp	.+10     	; 0x3efe <vfprintf+0x2e8>
    3ef4:	b8 2c       	mov	r11, r8
    3ef6:	a3 2c       	mov	r10, r3
    3ef8:	03 c0       	rjmp	.+6      	; 0x3f00 <vfprintf+0x2ea>
    3efa:	b8 2c       	mov	r11, r8
    3efc:	01 c0       	rjmp	.+2      	; 0x3f00 <vfprintf+0x2ea>
    3efe:	b9 2c       	mov	r11, r9
    3f00:	a4 fe       	sbrs	r10, 4
    3f02:	0f c0       	rjmp	.+30     	; 0x3f22 <vfprintf+0x30c>
    3f04:	fe 01       	movw	r30, r28
    3f06:	e8 0d       	add	r30, r8
    3f08:	f1 1d       	adc	r31, r1
    3f0a:	80 81       	ld	r24, Z
    3f0c:	80 33       	cpi	r24, 0x30	; 48
    3f0e:	21 f4       	brne	.+8      	; 0x3f18 <vfprintf+0x302>
    3f10:	9a 2d       	mov	r25, r10
    3f12:	99 7e       	andi	r25, 0xE9	; 233
    3f14:	a9 2e       	mov	r10, r25
    3f16:	09 c0       	rjmp	.+18     	; 0x3f2a <vfprintf+0x314>
    3f18:	a2 fe       	sbrs	r10, 2
    3f1a:	06 c0       	rjmp	.+12     	; 0x3f28 <vfprintf+0x312>
    3f1c:	b3 94       	inc	r11
    3f1e:	b3 94       	inc	r11
    3f20:	04 c0       	rjmp	.+8      	; 0x3f2a <vfprintf+0x314>
    3f22:	8a 2d       	mov	r24, r10
    3f24:	86 78       	andi	r24, 0x86	; 134
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <vfprintf+0x314>
    3f28:	b3 94       	inc	r11
    3f2a:	a3 fc       	sbrc	r10, 3
    3f2c:	10 c0       	rjmp	.+32     	; 0x3f4e <vfprintf+0x338>
    3f2e:	a0 fe       	sbrs	r10, 0
    3f30:	06 c0       	rjmp	.+12     	; 0x3f3e <vfprintf+0x328>
    3f32:	b2 14       	cp	r11, r2
    3f34:	80 f4       	brcc	.+32     	; 0x3f56 <vfprintf+0x340>
    3f36:	28 0c       	add	r2, r8
    3f38:	92 2c       	mov	r9, r2
    3f3a:	9b 18       	sub	r9, r11
    3f3c:	0d c0       	rjmp	.+26     	; 0x3f58 <vfprintf+0x342>
    3f3e:	b2 14       	cp	r11, r2
    3f40:	58 f4       	brcc	.+22     	; 0x3f58 <vfprintf+0x342>
    3f42:	b6 01       	movw	r22, r12
    3f44:	80 e2       	ldi	r24, 0x20	; 32
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	73 d0       	rcall	.+230    	; 0x4030 <fputc>
    3f4a:	b3 94       	inc	r11
    3f4c:	f8 cf       	rjmp	.-16     	; 0x3f3e <vfprintf+0x328>
    3f4e:	b2 14       	cp	r11, r2
    3f50:	18 f4       	brcc	.+6      	; 0x3f58 <vfprintf+0x342>
    3f52:	2b 18       	sub	r2, r11
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <vfprintf+0x344>
    3f56:	98 2c       	mov	r9, r8
    3f58:	21 2c       	mov	r2, r1
    3f5a:	a4 fe       	sbrs	r10, 4
    3f5c:	0f c0       	rjmp	.+30     	; 0x3f7c <vfprintf+0x366>
    3f5e:	b6 01       	movw	r22, r12
    3f60:	80 e3       	ldi	r24, 0x30	; 48
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	65 d0       	rcall	.+202    	; 0x4030 <fputc>
    3f66:	a2 fe       	sbrs	r10, 2
    3f68:	16 c0       	rjmp	.+44     	; 0x3f96 <vfprintf+0x380>
    3f6a:	a1 fc       	sbrc	r10, 1
    3f6c:	03 c0       	rjmp	.+6      	; 0x3f74 <vfprintf+0x35e>
    3f6e:	88 e7       	ldi	r24, 0x78	; 120
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <vfprintf+0x362>
    3f74:	88 e5       	ldi	r24, 0x58	; 88
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	b6 01       	movw	r22, r12
    3f7a:	0c c0       	rjmp	.+24     	; 0x3f94 <vfprintf+0x37e>
    3f7c:	8a 2d       	mov	r24, r10
    3f7e:	86 78       	andi	r24, 0x86	; 134
    3f80:	51 f0       	breq	.+20     	; 0x3f96 <vfprintf+0x380>
    3f82:	a1 fe       	sbrs	r10, 1
    3f84:	02 c0       	rjmp	.+4      	; 0x3f8a <vfprintf+0x374>
    3f86:	8b e2       	ldi	r24, 0x2B	; 43
    3f88:	01 c0       	rjmp	.+2      	; 0x3f8c <vfprintf+0x376>
    3f8a:	80 e2       	ldi	r24, 0x20	; 32
    3f8c:	a7 fc       	sbrc	r10, 7
    3f8e:	8d e2       	ldi	r24, 0x2D	; 45
    3f90:	b6 01       	movw	r22, r12
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	4d d0       	rcall	.+154    	; 0x4030 <fputc>
    3f96:	89 14       	cp	r8, r9
    3f98:	30 f4       	brcc	.+12     	; 0x3fa6 <vfprintf+0x390>
    3f9a:	b6 01       	movw	r22, r12
    3f9c:	80 e3       	ldi	r24, 0x30	; 48
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	47 d0       	rcall	.+142    	; 0x4030 <fputc>
    3fa2:	9a 94       	dec	r9
    3fa4:	f8 cf       	rjmp	.-16     	; 0x3f96 <vfprintf+0x380>
    3fa6:	8a 94       	dec	r8
    3fa8:	f3 01       	movw	r30, r6
    3faa:	e8 0d       	add	r30, r8
    3fac:	f1 1d       	adc	r31, r1
    3fae:	80 81       	ld	r24, Z
    3fb0:	b6 01       	movw	r22, r12
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	3d d0       	rcall	.+122    	; 0x4030 <fputc>
    3fb6:	81 10       	cpse	r8, r1
    3fb8:	f6 cf       	rjmp	.-20     	; 0x3fa6 <vfprintf+0x390>
    3fba:	22 20       	and	r2, r2
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <vfprintf+0x3aa>
    3fbe:	4e ce       	rjmp	.-868    	; 0x3c5c <vfprintf+0x46>
    3fc0:	b6 01       	movw	r22, r12
    3fc2:	80 e2       	ldi	r24, 0x20	; 32
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	34 d0       	rcall	.+104    	; 0x4030 <fputc>
    3fc8:	2a 94       	dec	r2
    3fca:	f7 cf       	rjmp	.-18     	; 0x3fba <vfprintf+0x3a4>
    3fcc:	f6 01       	movw	r30, r12
    3fce:	86 81       	ldd	r24, Z+6	; 0x06
    3fd0:	97 81       	ldd	r25, Z+7	; 0x07
    3fd2:	02 c0       	rjmp	.+4      	; 0x3fd8 <vfprintf+0x3c2>
    3fd4:	8f ef       	ldi	r24, 0xFF	; 255
    3fd6:	9f ef       	ldi	r25, 0xFF	; 255
    3fd8:	2b 96       	adiw	r28, 0x0b	; 11
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	de bf       	out	0x3e, r29	; 62
    3fde:	df 91       	pop	r29
    3fe0:	cf 91       	pop	r28
    3fe2:	1f 91       	pop	r17
    3fe4:	0f 91       	pop	r16
    3fe6:	ff 90       	pop	r15
    3fe8:	ef 90       	pop	r14
    3fea:	df 90       	pop	r13
    3fec:	cf 90       	pop	r12
    3fee:	bf 90       	pop	r11
    3ff0:	af 90       	pop	r10
    3ff2:	9f 90       	pop	r9
    3ff4:	8f 90       	pop	r8
    3ff6:	7f 90       	pop	r7
    3ff8:	6f 90       	pop	r6
    3ffa:	5f 90       	pop	r5
    3ffc:	4f 90       	pop	r4
    3ffe:	3f 90       	pop	r3
    4000:	2f 90       	pop	r2
    4002:	08 95       	ret

00004004 <strnlen_P>:
    4004:	fc 01       	movw	r30, r24
    4006:	05 90       	lpm	r0, Z+
    4008:	61 50       	subi	r22, 0x01	; 1
    400a:	70 40       	sbci	r23, 0x00	; 0
    400c:	01 10       	cpse	r0, r1
    400e:	d8 f7       	brcc	.-10     	; 0x4006 <strnlen_P+0x2>
    4010:	80 95       	com	r24
    4012:	90 95       	com	r25
    4014:	8e 0f       	add	r24, r30
    4016:	9f 1f       	adc	r25, r31
    4018:	08 95       	ret

0000401a <strnlen>:
    401a:	fc 01       	movw	r30, r24
    401c:	61 50       	subi	r22, 0x01	; 1
    401e:	70 40       	sbci	r23, 0x00	; 0
    4020:	01 90       	ld	r0, Z+
    4022:	01 10       	cpse	r0, r1
    4024:	d8 f7       	brcc	.-10     	; 0x401c <strnlen+0x2>
    4026:	80 95       	com	r24
    4028:	90 95       	com	r25
    402a:	8e 0f       	add	r24, r30
    402c:	9f 1f       	adc	r25, r31
    402e:	08 95       	ret

00004030 <fputc>:
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	fb 01       	movw	r30, r22
    403a:	23 81       	ldd	r18, Z+3	; 0x03
    403c:	21 fd       	sbrc	r18, 1
    403e:	03 c0       	rjmp	.+6      	; 0x4046 <fputc+0x16>
    4040:	8f ef       	ldi	r24, 0xFF	; 255
    4042:	9f ef       	ldi	r25, 0xFF	; 255
    4044:	2c c0       	rjmp	.+88     	; 0x409e <fputc+0x6e>
    4046:	22 ff       	sbrs	r18, 2
    4048:	16 c0       	rjmp	.+44     	; 0x4076 <fputc+0x46>
    404a:	46 81       	ldd	r20, Z+6	; 0x06
    404c:	57 81       	ldd	r21, Z+7	; 0x07
    404e:	24 81       	ldd	r18, Z+4	; 0x04
    4050:	35 81       	ldd	r19, Z+5	; 0x05
    4052:	42 17       	cp	r20, r18
    4054:	53 07       	cpc	r21, r19
    4056:	44 f4       	brge	.+16     	; 0x4068 <fputc+0x38>
    4058:	a0 81       	ld	r26, Z
    405a:	b1 81       	ldd	r27, Z+1	; 0x01
    405c:	9d 01       	movw	r18, r26
    405e:	2f 5f       	subi	r18, 0xFF	; 255
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	20 83       	st	Z, r18
    4064:	31 83       	std	Z+1, r19	; 0x01
    4066:	8c 93       	st	X, r24
    4068:	26 81       	ldd	r18, Z+6	; 0x06
    406a:	37 81       	ldd	r19, Z+7	; 0x07
    406c:	2f 5f       	subi	r18, 0xFF	; 255
    406e:	3f 4f       	sbci	r19, 0xFF	; 255
    4070:	26 83       	std	Z+6, r18	; 0x06
    4072:	37 83       	std	Z+7, r19	; 0x07
    4074:	14 c0       	rjmp	.+40     	; 0x409e <fputc+0x6e>
    4076:	8b 01       	movw	r16, r22
    4078:	ec 01       	movw	r28, r24
    407a:	fb 01       	movw	r30, r22
    407c:	00 84       	ldd	r0, Z+8	; 0x08
    407e:	f1 85       	ldd	r31, Z+9	; 0x09
    4080:	e0 2d       	mov	r30, r0
    4082:	19 95       	eicall
    4084:	89 2b       	or	r24, r25
    4086:	e1 f6       	brne	.-72     	; 0x4040 <fputc+0x10>
    4088:	d8 01       	movw	r26, r16
    408a:	16 96       	adiw	r26, 0x06	; 6
    408c:	8d 91       	ld	r24, X+
    408e:	9c 91       	ld	r25, X
    4090:	17 97       	sbiw	r26, 0x07	; 7
    4092:	01 96       	adiw	r24, 0x01	; 1
    4094:	16 96       	adiw	r26, 0x06	; 6
    4096:	8d 93       	st	X+, r24
    4098:	9c 93       	st	X, r25
    409a:	17 97       	sbiw	r26, 0x07	; 7
    409c:	ce 01       	movw	r24, r28
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	1f 91       	pop	r17
    40a4:	0f 91       	pop	r16
    40a6:	08 95       	ret

000040a8 <__ultoa_invert>:
    40a8:	fa 01       	movw	r30, r20
    40aa:	aa 27       	eor	r26, r26
    40ac:	28 30       	cpi	r18, 0x08	; 8
    40ae:	51 f1       	breq	.+84     	; 0x4104 <__ultoa_invert+0x5c>
    40b0:	20 31       	cpi	r18, 0x10	; 16
    40b2:	81 f1       	breq	.+96     	; 0x4114 <__ultoa_invert+0x6c>
    40b4:	e8 94       	clt
    40b6:	6f 93       	push	r22
    40b8:	6e 7f       	andi	r22, 0xFE	; 254
    40ba:	6e 5f       	subi	r22, 0xFE	; 254
    40bc:	7f 4f       	sbci	r23, 0xFF	; 255
    40be:	8f 4f       	sbci	r24, 0xFF	; 255
    40c0:	9f 4f       	sbci	r25, 0xFF	; 255
    40c2:	af 4f       	sbci	r26, 0xFF	; 255
    40c4:	b1 e0       	ldi	r27, 0x01	; 1
    40c6:	3e d0       	rcall	.+124    	; 0x4144 <__ultoa_invert+0x9c>
    40c8:	b4 e0       	ldi	r27, 0x04	; 4
    40ca:	3c d0       	rcall	.+120    	; 0x4144 <__ultoa_invert+0x9c>
    40cc:	67 0f       	add	r22, r23
    40ce:	78 1f       	adc	r23, r24
    40d0:	89 1f       	adc	r24, r25
    40d2:	9a 1f       	adc	r25, r26
    40d4:	a1 1d       	adc	r26, r1
    40d6:	68 0f       	add	r22, r24
    40d8:	79 1f       	adc	r23, r25
    40da:	8a 1f       	adc	r24, r26
    40dc:	91 1d       	adc	r25, r1
    40de:	a1 1d       	adc	r26, r1
    40e0:	6a 0f       	add	r22, r26
    40e2:	71 1d       	adc	r23, r1
    40e4:	81 1d       	adc	r24, r1
    40e6:	91 1d       	adc	r25, r1
    40e8:	a1 1d       	adc	r26, r1
    40ea:	20 d0       	rcall	.+64     	; 0x412c <__ultoa_invert+0x84>
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <__ultoa_invert+0x48>
    40ee:	68 94       	set
    40f0:	3f 91       	pop	r19
    40f2:	2a e0       	ldi	r18, 0x0A	; 10
    40f4:	26 9f       	mul	r18, r22
    40f6:	11 24       	eor	r1, r1
    40f8:	30 19       	sub	r19, r0
    40fa:	30 5d       	subi	r19, 0xD0	; 208
    40fc:	31 93       	st	Z+, r19
    40fe:	de f6       	brtc	.-74     	; 0x40b6 <__ultoa_invert+0xe>
    4100:	cf 01       	movw	r24, r30
    4102:	08 95       	ret
    4104:	46 2f       	mov	r20, r22
    4106:	47 70       	andi	r20, 0x07	; 7
    4108:	40 5d       	subi	r20, 0xD0	; 208
    410a:	41 93       	st	Z+, r20
    410c:	b3 e0       	ldi	r27, 0x03	; 3
    410e:	0f d0       	rcall	.+30     	; 0x412e <__ultoa_invert+0x86>
    4110:	c9 f7       	brne	.-14     	; 0x4104 <__ultoa_invert+0x5c>
    4112:	f6 cf       	rjmp	.-20     	; 0x4100 <__ultoa_invert+0x58>
    4114:	46 2f       	mov	r20, r22
    4116:	4f 70       	andi	r20, 0x0F	; 15
    4118:	40 5d       	subi	r20, 0xD0	; 208
    411a:	4a 33       	cpi	r20, 0x3A	; 58
    411c:	18 f0       	brcs	.+6      	; 0x4124 <__ultoa_invert+0x7c>
    411e:	49 5d       	subi	r20, 0xD9	; 217
    4120:	31 fd       	sbrc	r19, 1
    4122:	40 52       	subi	r20, 0x20	; 32
    4124:	41 93       	st	Z+, r20
    4126:	02 d0       	rcall	.+4      	; 0x412c <__ultoa_invert+0x84>
    4128:	a9 f7       	brne	.-22     	; 0x4114 <__ultoa_invert+0x6c>
    412a:	ea cf       	rjmp	.-44     	; 0x4100 <__ultoa_invert+0x58>
    412c:	b4 e0       	ldi	r27, 0x04	; 4
    412e:	a6 95       	lsr	r26
    4130:	97 95       	ror	r25
    4132:	87 95       	ror	r24
    4134:	77 95       	ror	r23
    4136:	67 95       	ror	r22
    4138:	ba 95       	dec	r27
    413a:	c9 f7       	brne	.-14     	; 0x412e <__ultoa_invert+0x86>
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	61 05       	cpc	r22, r1
    4140:	71 05       	cpc	r23, r1
    4142:	08 95       	ret
    4144:	9b 01       	movw	r18, r22
    4146:	ac 01       	movw	r20, r24
    4148:	0a 2e       	mov	r0, r26
    414a:	06 94       	lsr	r0
    414c:	57 95       	ror	r21
    414e:	47 95       	ror	r20
    4150:	37 95       	ror	r19
    4152:	27 95       	ror	r18
    4154:	ba 95       	dec	r27
    4156:	c9 f7       	brne	.-14     	; 0x414a <__ultoa_invert+0xa2>
    4158:	62 0f       	add	r22, r18
    415a:	73 1f       	adc	r23, r19
    415c:	84 1f       	adc	r24, r20
    415e:	95 1f       	adc	r25, r21
    4160:	a0 1d       	adc	r26, r0
    4162:	08 95       	ret

00004164 <_exit>:
    4164:	f8 94       	cli

00004166 <__stop_program>:
    4166:	ff cf       	rjmp	.-2      	; 0x4166 <__stop_program>
